package com.dzx.Activity;

import android.Manifest;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.os.StrictMode;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.AppCompatActivity;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;


import com.dzx.LinedEditText;
import com.dzx.R;
import com.dzx.Recognization.online.InFileStream;
import com.dzx.util.Logger;

import java.util.ArrayList;



public abstract class ActivityCommon extends AppCompatActivity {
   // protected TextView txtLog;
    //protected Button btn;
    cc.trity.floatingactionbutton.FloatingActionButton mAddDiaryFabVoice;
    protected Button setting;
    protected LinedEditText txtResult;

    protected Handler handler2;

    protected String descText;

    protected int layout = R.layout.activity_add_diary;

    protected Class settingActivityClass = null;

    protected boolean running = false;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        // setStrictMode();
        InFileStream.setContext(this);
        setContentView(layout);

        initView();
        handler2 = new Handler() {

            /*
             * @param msg
             */
            @Override
            public void handleMessage(Message msg) {
                super.handleMessage(msg);
                handleMsg(msg);
            }

        };
        Logger.setHandler(handler2);
        initPermission();
        initRecog();
    }


    protected abstract void initRecog();

    protected void handleMsg(Message msg) {
        //if (txtLog != null && msg.obj != null) {
            //txtLog.append(msg.obj.toString() + "\n");
        //}
    }

    protected void initView() {
        txtResult = (LinedEditText) findViewById(R.id.add_diary_et_content);
        mAddDiaryFabVoice=findViewById(R.id.add_diary_fab_voice);
        //txtLog = (TextView) findViewById(R.id.txtLog);
       // btn = (Button) findViewById(R.id.btn);

        //txtLog.setText(descText + "\n");
        if (setting != null && settingActivityClass != null) {
            setting.setOnClickListener(new View.OnClickListener() {

                @Override
                public void onClick(View v) {
                    running = true;
                    Intent intent = new Intent(ActivityCommon.this, settingActivityClass);
                    startActivityForResult(intent, 1);
                }
            });
        }

    }

    /**
     * android 6.0 以上需要动态申请权限
     */
    private void initPermission() {
        String[] permissions = {
                Manifest.permission.RECORD_AUDIO,
                Manifest.permission.ACCESS_NETWORK_STATE,
                Manifest.permission.INTERNET,
                Manifest.permission.READ_PHONE_STATE,
                Manifest.permission.WRITE_EXTERNAL_STORAGE
        };

        ArrayList<String> toApplyList = new ArrayList<String>();

        for (String perm : permissions) {
            if (PackageManager.PERMISSION_GRANTED != ContextCompat.checkSelfPermission(this, perm)) {
                toApplyList.add(perm);
                // 进入到这里代表没有权限.

            }
        }
        String[] tmpList = new String[toApplyList.size()];
        if (!toApplyList.isEmpty()) {
            ActivityCompat.requestPermissions(this, toApplyList.toArray(tmpList), 123);
        }

    }

    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        // 此处为android 6.0以上动态授权的回调，用户自行实现。
    }

    private void setStrictMode() {
        StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder()
                .detectAll()
                .penaltyLog()
                .build());
        StrictMode.setVmPolicy(new StrictMode.VmPolicy.Builder()
                .detectLeakedSqlLiteObjects()
                .detectLeakedClosableObjects()
                .penaltyLog()
                .penaltyDeath()
                .build());

    }
}
package com.dzx.Activity;

import android.content.SharedPreferences;
import android.os.Bundle;
import android.os.Message;
import android.preference.PreferenceManager;
import android.util.Log;
import android.view.View;


import com.dzx.Recognization.online.CommonRecogParams;
import com.dzx.Recognization.online.IStatus;
import com.dzx.Recognization.online.MessageStatusRecogListener;
import com.dzx.Recognization.online.StatusRecogListener;
import com.dzx.control.MyRecognizer;

import java.util.Map;

/**
 * 识别的基类Activity。封装了识别的大部分逻辑，包括MyRecognizer的初始化，资源释放、
 * <p>
 * 大致流程为
 * 1. 实例化MyRecognizer ,调用release方法前不可以实例化第二个。参数中需要开发者自行填写语音识别事件的回调类，实现开发者自身的业务逻辑
 * 2. 如果使用离线命令词功能，需要调用loadOfflineEngine。在线功能不需要。
 * 3. 根据识别的参数文档，或者demo中测试出的参数，组成json格式的字符串。调用 start 方法
 * 4. 在合适的时候，调用release释放资源。
 * <p>

 */

public abstract class ActivityRecog extends ActivityCommon implements IStatus {

    /**
     * 识别控制器，使用MyRecognizer控制识别的流程
     */
    protected MyRecognizer myRecognizer;
     String voice_content="";
    /*
     * Api的参数类，仅仅用于生成调用START的json字符串，本身与SDK的调用无关
     */
    protected CommonRecogParams apiParams;

    /*
     * 本Activity中是否需要调用离线命令词功能。根据此参数，判断是否需要调用SDK的ASR_KWS_LOAD_ENGINE事件
     */
    protected boolean enableOffline = false;


    /**
     * 控制UI按钮的状态
     */
    protected int status;

    /**
     * 日志使用
     */
    private static final String TAG = "ActivityRecog";

    /**
     * 在onCreate中调用。初始化识别控制类MyRecognizer
     */
    protected void initRecog() {
        StatusRecogListener listener = new MessageStatusRecogListener(handler2);
        myRecognizer = new MyRecognizer(this, listener);
        apiParams = getApiParams();
        status = STATUS_NONE;

    }


    /**
     * 销毁时需要释放识别资源。
     */
    @Override
    protected void onDestroy() {
        myRecognizer.release();
        Log.i(TAG, "onDestory");
        super.onDestroy();
    }

    /**
     * 开始录音，点击“开始”按钮后调用。
     */
    protected void start() {
        SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(ActivityRecog.this);
        //  上面的获取是为了生成下面的Map， 自己集成时可以忽略
        Map<String, Object> params = apiParams.fetch(sp);
        // 集成时不需要上面的代码，只需要params参数。
        // 这里打印出params， 填写至您自己的app中，直接调用下面这行代码即可。
        myRecognizer.start(params);
    }


    /**
     * 开始录音后，手动停止录音。SDK会识别在此过程中的录音。点击“停止”按钮后调用。
     */
    protected void stop() {
        myRecognizer.stop();
    }

    /**
     * 开始录音后，取消这次录音。SDK会取消本次识别，回到原始状态。点击“取消”按钮后调用。
     */
    protected void cancel() {
        myRecognizer.cancel();
    }


    /**
     * @return
     */
    protected abstract CommonRecogParams getApiParams();

    // 以上为 语音SDK调用，以下为UI部分
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
    }


    @Override
    protected void initView() {
        super.initView();
        click();

    }
    protected void click() {


        switch (status) {
            case STATUS_NONE: // 初始状态
                start();
                status = STATUS_WAITING_READY;
                //updateBtnTextByStatus();
                //txtLog.setText("");
                //txtResult.setText("");
                break;
            case STATUS_WAITING_READY: // 调用本类的start方法后，即输入START事件后，等待引擎准备完毕。
            case STATUS_READY: // 引擎准备完毕。
            case STATUS_SPEAKING:
            case STATUS_FINISHED: // 长语音情况
            case STATUS_RECOGNITION:
                stop();
                status = STATUS_STOPPED; // 引擎识别中
                //updateBtnTextByStatus();
                break;
            case STATUS_STOPPED: // 引擎识别中
                cancel();
                status = STATUS_NONE; // 识别结束，回到初始状态
                //updateBtnTextByStatus();
                break;
            default:
                break;
        }

    }



    protected void handleMsg(Message msg) {
        super.handleMsg(msg);

        switch (msg.what) { // 处理MessageStatusRecogListener中的状态回调
            case STATUS_FINISHED:
                if (msg.arg2 == 1) {
                     voice_content=msg.obj.toString();
                     txtResult.append(voice_content);
                }
                status = msg.what;
                //updateBtnTextByStatus();
                break;
            case STATUS_NONE:
            case STATUS_READY:
            case STATUS_SPEAKING:
            case STATUS_RECOGNITION:
                status = msg.what;
                //updateBtnTextByStatus();
                break;
            default:
                break;

        }
    }

    private void updateBtnTextByStatus() {
        switch (status) {
            case STATUS_NONE:

                //btn.setText("开始录音");
               // btn.setEnabled(true);

                //setting.setEnabled(true);
                break;
            case STATUS_WAITING_READY:
            case STATUS_READY:
            case STATUS_SPEAKING:
            case STATUS_RECOGNITION:
               // btn.setText("停止录音");
               // btn.setEnabled(true);
                //setting.setEnabled(false);
                mAddDiaryFabVoice.setColorNormal(0x24d63c);
                break;

            case STATUS_STOPPED:
                //btn.setText("取消整个识别过程");
               // btn.setEnabled(true);
                //setting.setEnabled(false);
                mAddDiaryFabVoice.setColorNormal(0xe41c1c);
                break;
            default:
                break;
        }
    }
}
package com.dzx.Activity;

import android.content.ContentValues;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.design.widget.FloatingActionButton;
import android.support.v7.app.ActionBar;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.text.Editable;
import android.view.MotionEvent;
import android.view.View;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.dzx.LinedEditText;
import com.dzx.MainActivity;
import com.dzx.R;
import com.dzx.Recognization.online.CommonRecogParams;
import com.dzx.Recognization.online.OnlineRecogParams;
import com.dzx.Setting.Setting_use;
import com.dzx.fragment.FragmentOne;
import com.dzx.util.AppManager;
import com.dzx.util.GetDate;
import com.dzx.util.StatusBarCompat;

import butterknife.Bind;
import butterknife.ButterKnife;
import butterknife.OnClick;
import butterknife.OnTouch;
import cc.trity.floatingactionbutton.FloatingActionsMenu;

import com.dzx.db.diaryDB;


/**
 * Created by 杜卓轩 on 2018/3/17.
 */

public class AddDiaryActivity extends ActivityRecog {
    @Bind(R.id.add_diary_tv_date)
    TextView mAddDiaryTvDate;
    @Bind(R.id.add_diary_et_title)
    EditText mAddDiaryEtTitle;
    @Bind(R.id.add_diary_et_content)
    LinedEditText mAddDiaryEtContent;
    @Bind(R.id.add_diary_fab_back)
    cc.trity.floatingactionbutton.FloatingActionButton mAddDiaryFabBack;
    @Bind(R.id.add_diary_fab_add)
    cc.trity.floatingactionbutton.FloatingActionButton mAddDiaryFabAdd;

    @Bind(R.id.right_labels)
    FloatingActionsMenu mRightLabels;
    @Bind(R.id.common_tv_title)
    TextView mCommonTvTitle;
    @Bind(R.id.common_title_ll)
    LinearLayout mCommonTitleLl;
    @Bind(R.id.common_iv_back)
    ImageView mCommonIvBack;
    @Bind(R.id.common_iv_test)
    ImageView mCommonIvTest;

    private diaryDB mHelper;


    public AddDiaryActivity() {
        super();
        settingActivityClass = Setting_use.class;
    }

    protected CommonRecogParams getApiParams() {
        return new OnlineRecogParams(this);
    }


    public static void startActivity(Context context) {
        Intent intent = new Intent(context, AddDiaryActivity.class);
        context.startActivity(intent);
    }

    public static void startActivity(Context context, String title, String content) {
        Intent intent = new Intent(context, AddDiaryActivity.class);
        intent.putExtra("title", title);
        intent.putExtra("content", content);
        context.startActivity(intent);
    }

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_add_diary);
        AppManager.getAppManager().addActivity(this);
        ButterKnife.bind(this);
        //ActionBar actionBar = getSupportActionBar();
        //actionBar.hide();
        Intent intent = getIntent();
        mAddDiaryEtTitle.setText(intent.getStringExtra("title"));
        StatusBarCompat.compat(this, Color.parseColor("#161414"));

        mCommonTvTitle.setText("添加日记");
        mAddDiaryTvDate.setText("今天，" + GetDate.getDate());
        mAddDiaryEtContent.setText(intent.getStringExtra("content"));
        mHelper = new diaryDB(this, "Diary.db", null, 1);
    }


    @OnClick({R.id.common_iv_back, R.id.add_diary_et_title, R.id.add_diary_et_content, R.id.add_diary_fab_back, R.id.add_diary_fab_add
            //,R.id.add_diary_fab_voice
    })
    public void onClick(View view) {
        switch (view.getId()) {
            case R.id.common_iv_back:
                FragmentOne.startActivity(this);
                finish();
            case R.id.add_diary_et_title:
                break;
            case R.id.add_diary_et_content:
                break;
            case R.id.add_diary_fab_back:
                String date = GetDate.getDate().toString();
                String tag = String.valueOf(System.currentTimeMillis());
                String title = mAddDiaryEtTitle.getText().toString() + "";
                String content = mAddDiaryEtContent.getText().toString() + "";
                if (!title.equals("") || !content.equals("")) {
                    SQLiteDatabase db = mHelper.getWritableDatabase();
                    ContentValues values = new ContentValues();
                    values.put("date", date);
                    values.put("title", title);
                    values.put("content", content);
                    values.put("tag", tag);
                    db.insert("Diary", null, values);
                    values.clear();
                }
                FragmentOne.startActivity(this);
                finish();
                break;
           /* case R.id.add_diary_fab_voice:
                click();
                int index = mAddDiaryEtContent.getSelectionStart();//获取光标所在位置
                //String text="I want to input str";
                Editable edit = mAddDiaryEtContent.getEditableText();//获取EditText的文字

                if (index < 0 || index >= edit.length() ){
                    edit.append(voice_content);
                    voice_content="";
                }else{
                    edit.insert(index,voice_content);//光标所在位置插入文字
                    voice_content="";
                }
                //txtResult.append(voice_content);
                break;*/
            case R.id.add_diary_fab_add:
                final String dateBack = GetDate.getDate().toString();
                final String titleBack = mAddDiaryEtTitle.getText().toString();
                final String contentBack = mAddDiaryEtContent.getText().toString();
                if(!titleBack.isEmpty() || !contentBack.isEmpty()){
                    AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(this);
                    alertDialogBuilder.setMessage("是否保存日记内容？").setPositiveButton("确定", new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int which) {
                            SQLiteDatabase db = mHelper.getWritableDatabase();
                            ContentValues values = new ContentValues();
                            values.put("date", dateBack);
                            values.put("title", titleBack);
                            values.put("content", contentBack);
                            db.insert("Diary", null, values);
                            values.clear();
                            FragmentOne.startActivity(AddDiaryActivity.this);
                            finish();
                        }
                    }).setNegativeButton("取消", new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int which) {
                            FragmentOne.startActivity(AddDiaryActivity.this);
                        }
                    }).show();

                }else{
                    FragmentOne.startActivity(this);
                    finish();
                }
                break;
        }
    }

    @OnTouch({R.id.add_diary_fab_voice})
    public boolean onTouch(View view, MotionEvent event){
        switch (view.getId()) {
            case R.id.add_diary_fab_voice:

                if (event.getAction() == MotionEvent.ACTION_DOWN) {
                    click();
                    //start();
                    //status=STATUS_WAITING_READY;
                }
                if (event.getAction() == MotionEvent.ACTION_UP) {
                    //stop();
                    //status=STATUS_STOPPED;
                    int index = mAddDiaryEtContent.getSelectionStart();//获取光标所在位置
                    Editable edit = mAddDiaryEtContent.getEditableText();//获取EditText的文字

                    if (index < 0 || index >= edit.length() ){
                        edit.append(voice_content);
                        voice_content="";
                    }else{
                        edit.insert(index,voice_content);//光标所在位置插入文字
                        voice_content="";
                    }
                    //cancel();
                    //status=STATUS_NONE;
                }
                //click();
                /*switch (status) {
                    case STATUS_NONE: // 初始状态
                        start();
                        status = STATUS_WAITING_READY;
                        //updateBtnTextByStatus();
                        //txtLog.setText("");
                        //txtResult.setText("");
                        break;
                    case STATUS_WAITING_READY: // 调用本类的start方法后，即输入START事件后，等待引擎准备完毕。
                    case STATUS_READY: // 引擎准备完毕。
                    case STATUS_SPEAKING:
                    case STATUS_FINISHED: // 长语音情况
                    case STATUS_RECOGNITION:
                        stop();
                        //status = STATUS_STOPPED; // 引擎识别中
                        //updateBtnTextByStatus();
                        //break;
                    //case STATUS_STOPPED: // 引擎识别中
                        cancel();
                        status = STATUS_NONE; // 识别结束，回到初始状态
                        //updateBtnTextByStatus();*/





        }
    return false;
    }

    @Override
    public void onBackPressed() {
        super.onBackPressed();
        FragmentOne.startActivity(this);
       // finish();
    }
}
package com.dzx.Activity;

import android.content.ContentValues;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.design.widget.FloatingActionButton;
import android.support.v7.app.ActionBar;
import android.support.v7.app.AppCompatActivity;
import android.view.View;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.dzx.LinedEditText;
import com.dzx.R;
import com.dzx.db.diaryDB;
import com.dzx.fragment.FragmentOne;
import com.dzx.util.AppManager;
import com.dzx.util.GetDate;
import com.dzx.util.StatusBarCompat;

import butterknife.Bind;
import butterknife.ButterKnife;
import butterknife.OnClick;
import cc.trity.floatingactionbutton.FloatingActionsMenu;

/**
 * Created by 杜卓轩 on 2018/3/17.
 */

public class UpdateDiaryActivity extends AppCompatActivity {
    @Bind(R.id.update_diary_tv_date)
    TextView mUpdateDiaryTvDate;
    @Bind(R.id.update_diary_et_title)
    EditText mUpdateDiaryEtTitle;
    @Bind(R.id.update_diary_et_content)
    LinedEditText mUpdateDiaryEtContent;
    @Bind(R.id.update_diary_fab_back)
    cc.trity.floatingactionbutton.FloatingActionButton mUpdateDiaryFabBack;
    @Bind(R.id.update_diary_fab_add)
    cc.trity.floatingactionbutton.FloatingActionButton mUpdateDiaryFabAdd;
    @Bind(R.id.update_diary_fab_delete)
    cc.trity.floatingactionbutton.FloatingActionButton mUpdateDiaryFabDelete;
    @Bind(R.id.right_labels)
    FloatingActionsMenu mRightLabels;
    @Bind(R.id.common_tv_title)
    TextView mCommonTvTitle;
    @Bind(R.id.common_title_ll)
    LinearLayout mCommonTitleLl;
    @Bind(R.id.common_iv_back)
    ImageView mCommonIvBack;
    @Bind(R.id.common_iv_test)
    ImageView mCommonIvTest;
    @Bind(R.id.update_diary_tv_tag)
    TextView mTvTag;


    private diaryDB mHelper;

    public static void startActivity(Context context, String title, String content, String tag) {
        Intent intent = new Intent(context, UpdateDiaryActivity.class);
        intent.putExtra("title", title);
        intent.putExtra("content", content);
        intent.putExtra("tag", tag);
        context.startActivity(intent);
    }

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_update_diary);
        AppManager.getAppManager().addActivity(this);
        ButterKnife.bind(this);
        mHelper = new diaryDB(this, "Diary.db", null, 1);
        initTitle();
        StatusBarCompat.compat(this, Color.parseColor("#161414"));

        Intent intent = getIntent();
        mUpdateDiaryTvDate.setText("今天，" + GetDate.getDate());
        mUpdateDiaryEtTitle.setText(intent.getStringExtra("title"));
        mUpdateDiaryEtContent.setText(intent.getStringExtra("content"));
        mTvTag.setText(intent.getStringExtra("tag"));



    }

    private void initTitle() {
        //ActionBar actionBar = getSupportActionBar();
       // actionBar.hide();
        mCommonTvTitle.setText("修改日记");
    }

    @OnClick({R.id.common_iv_back, R.id.update_diary_tv_date, R.id.update_diary_et_title, R.id.update_diary_et_content, R.id.update_diary_fab_back, R.id.update_diary_fab_add, R.id.update_diary_fab_delete})
    public void onClick(View view) {
        switch (view.getId()) {
            case R.id.common_iv_back:
                FragmentOne.startActivity(this);
                finish();
            case R.id.update_diary_tv_date:
                break;
            case R.id.update_diary_et_title:
                break;
            case R.id.update_diary_et_content:
                break;
            case R.id.update_diary_fab_delete:
                android.support.v7.app.AlertDialog.Builder alertDialogBuilder = new android.support.v7.app.AlertDialog.Builder(this);
                alertDialogBuilder.setMessage("确定要删除该日记吗？").setPositiveButton("确定", new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {

//                        String title = mUpdateDiaryEtTitle.getText().toString();
                        String tag = mTvTag.getText().toString();
                        SQLiteDatabase dbDelete = mHelper.getWritableDatabase();
                        dbDelete.delete("Diary", "tag = ?", new String[]{tag});
                        FragmentOne.startActivity(UpdateDiaryActivity.this);
                        finish();
                    }
                }).setNegativeButton("取消", new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                    }
                }).show();
                break;
            case R.id.update_diary_fab_add:
                SQLiteDatabase dbUpdate = mHelper.getWritableDatabase();
                ContentValues valuesUpdate = new ContentValues();
                String title = mUpdateDiaryEtTitle.getText().toString();
                String content = mUpdateDiaryEtContent.getText().toString();
                valuesUpdate.put("title", title);
                valuesUpdate.put("content", content);
                dbUpdate.update("Diary", valuesUpdate, "title = ?", new String[]{title});
                dbUpdate.update("Diary", valuesUpdate, "content = ?", new String[]{content});
                FragmentOne.startActivity(this);
                finish();
                break;
            case R.id.update_diary_fab_back:
                FragmentOne.startActivity(this);
                finish();

                break;
        }
    }

    @OnClick(R.id.common_tv_title)
    public void onClick() {
    }

    @Override
    public void onBackPressed() {
        super.onBackPressed();
        FragmentOne.startActivity(this);
    }
}
package com.dzx.Activity;

import android.content.Intent;


import android.os.Bundle;
import android.os.Handler;
import android.support.v7.app.AppCompatActivity;

import android.view.Window;
import android.view.WindowManager;
import android.widget.ImageView;

import com.dzx.MainActivity;
import com.dzx.R;
import java.util.Random;



/**
 * Created by 杜卓轩 on 2018/3/5.
 * 这是一个欢迎页面
 */


public class WelcomeActivity extends AppCompatActivity {
    private ImageView imageView;
    private int randomImage[]={
            R.mipmap.pic_01,
            R.mipmap.pic_02,
            R.mipmap.pic_03,
            R.mipmap.pic_04,
            R.mipmap.pic_05,
            R.mipmap.pic_06,
            R.mipmap.pic_07

    };

    Random rand=new Random();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
                WindowManager.LayoutParams.FLAG_FULLSCREEN);
        requestWindowFeature(Window.FEATURE_NO_TITLE);
        setContentView(R.layout.activity_welcome);

        imageView=(ImageView)findViewById(R.id.image_choose);
        int random_img=rand.nextInt(7);
        random_img=randomImage[random_img];


        imageView.setImageDrawable(getResources().getDrawable(random_img));


        Handler handler = new Handler();
        //当计时结束,跳转至主界面
        handler.postDelayed(new Runnable() {
            @Override
            public void run() {
                Intent intent = new Intent(WelcomeActivity.this, MainActivity.class);
                startActivity(intent);
                WelcomeActivity.this.finish();
            }
        }, 3000);
    }




}
package com.dzx.Bean;

/**
 * Created by 杜卓轩 on 2018/3/17.
 */

public class diaryBean {

    private String date;
    private String title;
    private String content;
    private String tag;

    public diaryBean(String date, String title, String content, String tag) {
        this.date = date;
        this.title = title;
        this.content = content;
        this.tag = tag;
    }
    public String getTag() {
        return tag;
    }

    public void setTag(String tag) {
        this.tag = tag;
    }

    public String getDate() {
        return date;
    }

    public void setDate(String date) {
        this.date = date;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }


}
package com.dzx.Bean;

import java.util.List;

/**
 * Created by 杜卓轩 on 2018/3/9.
 */

public class weatherBean {
    private List<HeWeather6Bean> HeWeather6;

    public List<HeWeather6Bean> getHeWeather6() {
        return HeWeather6;
    }

    public void setHeWeather6(List<HeWeather6Bean> HeWeather6) {
        this.HeWeather6 = HeWeather6;
    }

    public static class HeWeather6Bean {
        /**
         * basic : {"cid":"CN101200113","location":"洪山","parent_city":"武汉","admin_area":"湖北","cnty":"中国","lat":"30.50425911","lon":"114.40071869","tz":"+8.00"}
         * update : {"loc":"2018-03-09 20:47","utc":"2018-03-09 12:47"}
         * status : ok
         * now : {"cloud":"0","cond_code":"100","cond_txt":"晴","fl":"4","hum":"85","pcpn":"0.0","pres":"1023","tmp":"7","vis":"10","wind_deg":"151","wind_dir":"东南风","wind_sc":"1-2","wind_spd":"3"}
         * daily_forecast : [{"cond_code_d":"103","cond_code_n":"100","cond_txt_d":"晴间多云","cond_txt_n":"晴","date":"2018-03-09","hum":"60","mr":"00:34","ms":"11:28","pcpn":"0.0","pop":"0","pres":"1027","sr":"06:39","ss":"18:26","tmp_max":"14","tmp_min":"4","uv_index":"6","vis":"16","wind_deg":"104","wind_dir":"东南风","wind_sc":"1-2","wind_spd":"5"},{"cond_code_d":"101","cond_code_n":"101","cond_txt_d":"多云","cond_txt_n":"多云","date":"2018-03-10","hum":"52","mr":"01:27","ms":"12:11","pcpn":"0.0","pop":"0","pres":"1023","sr":"06:38","ss":"18:27","tmp_max":"18","tmp_min":"5","uv_index":"7","vis":"20","wind_deg":"96","wind_dir":"东风","wind_sc":"1-2","wind_spd":"6"},{"cond_code_d":"101","cond_code_n":"101","cond_txt_d":"多云","cond_txt_n":"多云","date":"2018-03-11","hum":"52","mr":"02:17","ms":"12:57","pcpn":"0.0","pop":"0","pres":"1021","sr":"06:37","ss":"18:27","tmp_max":"18","tmp_min":"8","uv_index":"5","vis":"20","wind_deg":"181","wind_dir":"南风","wind_sc":"1-2","wind_spd":"4"}]
         * lifestyle : [{"brf":"舒适","txt":"今天夜间不太热也不太冷，风力不大，相信您在这样的天气条件下，应会感到比较清爽和舒适。","type":"comf"},{"brf":"较舒适","txt":"建议着薄外套、开衫牛仔衫裤等服装。年老体弱者应适当添加衣物，宜着夹克衫、薄毛衣等。","type":"drsg"},{"brf":"易发","txt":"昼夜温差很大，易发生感冒，请注意适当增减衣服，加强自我防护避免感冒。","type":"flu"},{"brf":"适宜","txt":"天气较好，赶快投身大自然参与户外运动，尽情感受运动的快乐吧。","type":"sport"},{"brf":"适宜","txt":"天气较好，但丝毫不会影响您出行的心情。温度适宜又有微风相伴，适宜旅游。","type":"trav"},{"brf":"弱","txt":"紫外线强度较弱，建议出门前涂擦SPF在12-15之间、PA+的防晒护肤品。","type":"uv"},{"brf":"较适宜","txt":"较适宜洗车，未来一天无雨，风力较小，擦洗一新的汽车至少能保持一天。","type":"cw"},{"brf":"较差","txt":"气象条件较不利于空气污染物稀释、扩散和清除，请适当减少室外活动时间。","type":"air"}]
         */

        private BasicBean basic;
        private UpdateBean update;
        private String status;
        private NowBean now;
        private List<DailyForecastBean> daily_forecast;
        private List<LifestyleBean> lifestyle;

        public BasicBean getBasic() {
            return basic;
        }

        public void setBasic(BasicBean basic) {
            this.basic = basic;
        }

        public UpdateBean getUpdate() {
            return update;
        }

        public void setUpdate(UpdateBean update) {
            this.update = update;
        }

        public String getStatus() {
            return status;
        }

        public void setStatus(String status) {
            this.status = status;
        }

        public NowBean getNow() {
            return now;
        }

        public void setNow(NowBean now) {
            this.now = now;
        }

        public List<DailyForecastBean> getDaily_forecast() {
            return daily_forecast;
        }

        public void setDaily_forecast(List<DailyForecastBean> daily_forecast) {
            this.daily_forecast = daily_forecast;
        }

        public List<LifestyleBean> getLifestyle() {
            return lifestyle;
        }

        public void setLifestyle(List<LifestyleBean> lifestyle) {
            this.lifestyle = lifestyle;
        }

        public static class BasicBean {
            /**
             * cid : CN101200113
             * location : 洪山
             * parent_city : 武汉
             * admin_area : 湖北
             * cnty : 中国
             * lat : 30.50425911
             * lon : 114.40071869
             * tz : +8.00
             */

            private String cid;
            private String location;
            private String parent_city;
            private String admin_area;
            private String cnty;
            private String lat;
            private String lon;
            private String tz;

            public String getCid() {
                return cid;
            }

            public void setCid(String cid) {
                this.cid = cid;
            }

            public String getLocation() {
                return location;
            }

            public void setLocation(String location) {
                this.location = location;
            }

            public String getParent_city() {
                return parent_city;
            }

            public void setParent_city(String parent_city) {
                this.parent_city = parent_city;
            }

            public String getAdmin_area() {
                return admin_area;
            }

            public void setAdmin_area(String admin_area) {
                this.admin_area = admin_area;
            }

            public String getCnty() {
                return cnty;
            }

            public void setCnty(String cnty) {
                this.cnty = cnty;
            }

            public String getLat() {
                return lat;
            }

            public void setLat(String lat) {
                this.lat = lat;
            }

            public String getLon() {
                return lon;
            }

            public void setLon(String lon) {
                this.lon = lon;
            }

            public String getTz() {
                return tz;
            }

            public void setTz(String tz) {
                this.tz = tz;
            }
        }

        public static class UpdateBean {
            /**
             * loc : 2018-03-09 20:47
             * utc : 2018-03-09 12:47
             */

            private String loc;
            private String utc;

            public String getLoc() {
                return loc;
            }

            public void setLoc(String loc) {
                this.loc = loc;
            }

            public String getUtc() {
                return utc;
            }

            public void setUtc(String utc) {
                this.utc = utc;
            }
        }

        public static class NowBean {
            /**
             * cloud : 0
             * cond_code : 100
             * cond_txt : 晴
             * fl : 4
             * hum : 85
             * pcpn : 0.0
             * pres : 1023
             * tmp : 7
             * vis : 10
             * wind_deg : 151
             * wind_dir : 东南风
             * wind_sc : 1-2
             * wind_spd : 3
             */

            private String cloud;
            private String cond_code;
            private String cond_txt;
            private String fl;
            private String hum;
            private String pcpn;
            private String pres;
            private String tmp;
            private String vis;
            private String wind_deg;
            private String wind_dir;
            private String wind_sc;
            private String wind_spd;

            public String getCloud() {
                return cloud;
            }

            public void setCloud(String cloud) {
                this.cloud = cloud;
            }

            public String getCond_code() {
                return cond_code;
            }

            public void setCond_code(String cond_code) {
                this.cond_code = cond_code;
            }

            public String getCond_txt() {
                return cond_txt;
            }

            public void setCond_txt(String cond_txt) {
                this.cond_txt = cond_txt;
            }

            public String getFl() {
                return fl;
            }

            public void setFl(String fl) {
                this.fl = fl;
            }

            public String getHum() {
                return hum;
            }

            public void setHum(String hum) {
                this.hum = hum;
            }

            public String getPcpn() {
                return pcpn;
            }

            public void setPcpn(String pcpn) {
                this.pcpn = pcpn;
            }

            public String getPres() {
                return pres;
            }

            public void setPres(String pres) {
                this.pres = pres;
            }

            public String getTmp() {
                return tmp;
            }

            public void setTmp(String tmp) {
                this.tmp = tmp;
            }

            public String getVis() {
                return vis;
            }

            public void setVis(String vis) {
                this.vis = vis;
            }

            public String getWind_deg() {
                return wind_deg;
            }

            public void setWind_deg(String wind_deg) {
                this.wind_deg = wind_deg;
            }

            public String getWind_dir() {
                return wind_dir;
            }

            public void setWind_dir(String wind_dir) {
                this.wind_dir = wind_dir;
            }

            public String getWind_sc() {
                return wind_sc;
            }

            public void setWind_sc(String wind_sc) {
                this.wind_sc = wind_sc;
            }

            public String getWind_spd() {
                return wind_spd;
            }

            public void setWind_spd(String wind_spd) {
                this.wind_spd = wind_spd;
            }
        }

        public static class DailyForecastBean {
            /**
             * cond_code_d : 103
             * cond_code_n : 100
             * cond_txt_d : 晴间多云
             * cond_txt_n : 晴
             * date : 2018-03-09
             * hum : 60
             * mr : 00:34
             * ms : 11:28
             * pcpn : 0.0
             * pop : 0
             * pres : 1027
             * sr : 06:39
             * ss : 18:26
             * tmp_max : 14
             * tmp_min : 4
             * uv_index : 6
             * vis : 16
             * wind_deg : 104
             * wind_dir : 东南风
             * wind_sc : 1-2
             * wind_spd : 5
             */

            private String cond_code_d;
            private String cond_code_n;
            private String cond_txt_d;
            private String cond_txt_n;
            private String date;
            private String hum;
            private String mr;
            private String ms;
            private String pcpn;
            private String pop;
            private String pres;
            private String sr;
            private String ss;
            private String tmp_max;
            private String tmp_min;
            private String uv_index;
            private String vis;
            private String wind_deg;
            private String wind_dir;
            private String wind_sc;
            private String wind_spd;

            public String getCond_code_d() {
                return cond_code_d;
            }

            public void setCond_code_d(String cond_code_d) {
                this.cond_code_d = cond_code_d;
            }

            public String getCond_code_n() {
                return cond_code_n;
            }

            public void setCond_code_n(String cond_code_n) {
                this.cond_code_n = cond_code_n;
            }

            public String getCond_txt_d() {
                return cond_txt_d;
            }

            public void setCond_txt_d(String cond_txt_d) {
                this.cond_txt_d = cond_txt_d;
            }

            public String getCond_txt_n() {
                return cond_txt_n;
            }

            public void setCond_txt_n(String cond_txt_n) {
                this.cond_txt_n = cond_txt_n;
            }

            public String getDate() {
                return date;
            }

            public void setDate(String date) {
                this.date = date;
            }

            public String getHum() {
                return hum;
            }

            public void setHum(String hum) {
                this.hum = hum;
            }

            public String getMr() {
                return mr;
            }

            public void setMr(String mr) {
                this.mr = mr;
            }

            public String getMs() {
                return ms;
            }

            public void setMs(String ms) {
                this.ms = ms;
            }

            public String getPcpn() {
                return pcpn;
            }

            public void setPcpn(String pcpn) {
                this.pcpn = pcpn;
            }

            public String getPop() {
                return pop;
            }

            public void setPop(String pop) {
                this.pop = pop;
            }

            public String getPres() {
                return pres;
            }

            public void setPres(String pres) {
                this.pres = pres;
            }

            public String getSr() {
                return sr;
            }

            public void setSr(String sr) {
                this.sr = sr;
            }

            public String getSs() {
                return ss;
            }

            public void setSs(String ss) {
                this.ss = ss;
            }

            public String getTmp_max() {
                return tmp_max;
            }

            public void setTmp_max(String tmp_max) {
                this.tmp_max = tmp_max;
            }

            public String getTmp_min() {
                return tmp_min;
            }

            public void setTmp_min(String tmp_min) {
                this.tmp_min = tmp_min;
            }

            public String getUv_index() {
                return uv_index;
            }

            public void setUv_index(String uv_index) {
                this.uv_index = uv_index;
            }

            public String getVis() {
                return vis;
            }

            public void setVis(String vis) {
                this.vis = vis;
            }

            public String getWind_deg() {
                return wind_deg;
            }

            public void setWind_deg(String wind_deg) {
                this.wind_deg = wind_deg;
            }

            public String getWind_dir() {
                return wind_dir;
            }

            public void setWind_dir(String wind_dir) {
                this.wind_dir = wind_dir;
            }

            public String getWind_sc() {
                return wind_sc;
            }

            public void setWind_sc(String wind_sc) {
                this.wind_sc = wind_sc;
            }

            public String getWind_spd() {
                return wind_spd;
            }

            public void setWind_spd(String wind_spd) {
                this.wind_spd = wind_spd;
            }
        }

        public static class LifestyleBean {
            /**
             * brf : 舒适
             * txt : 今天夜间不太热也不太冷，风力不大，相信您在这样的天气条件下，应会感到比较清爽和舒适。
             * type : comf
             */

            private String brf;
            private String txt;
            private String type;

            public String getBrf() {
                return brf;
            }

            public void setBrf(String brf) {
                this.brf = brf;
            }

            public String getTxt() {
                return txt;
            }

            public void setTxt(String txt) {
                this.txt = txt;
            }

            public String getType() {
                return type;
            }

            public void setType(String type) {
                this.type = type;
            }
        }
    }
}
package com.dzx.Bean;

/**
 * Created by 杜卓轩 on 2018/3/10.
 */

public class weatherInfoBean {



    private String city;
    private String date;
    private String temp;
    private String weather;
    private String wind;
    private String info;
    private String temp_max;
    private String netInfo;

    public String getNetInfo() {
        return netInfo;
    }

    public void setNetInfo(String netInfo) {
        this.netInfo = netInfo;
    }

    public String getParent_city() {
        return parent_city;
    }

    public void setParent_city(String parent_city) {
        this.parent_city = parent_city;
    }

    private String parent_city;
    private String tips;

    public String getTips() {
        return tips;
    }

    public void setTips(String tips) {
        this.tips = tips;
    }

    public String getTemp_max() {
        return temp_max;
    }

    public void setTemp_max(String temp_max) {
        this.temp_max = temp_max;
    }

    public String getInfo() {
        return info;
    }

    public void setInfo(String info) {
        this.info = info;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public String getDate() {
        return date;
    }

    public void setDate(String date) {
        this.date = date;
    }

    public String getTemp() {
        return temp;
    }

    public void setTemp(String temp) {
        this.temp = temp;
    }

    public String getWeather() {
        return weather;
    }

    public void setWeather(String weather) {
        this.weather = weather;
    }

    public String getWind() {
        return wind;
    }

    public void setWind(String wind) {
        this.wind = wind;
    }


    /**
     *
     * @return 是否为本人发送
     */
    private boolean isMeSend;
    private boolean isWeather;
    private boolean isNet;
    public boolean getisNet() {
        return isNet;
    }
    public boolean isWeather() {
        return isWeather;
    }
    public boolean isMeSend() {
        return isMeSend;
    }
    public void setIsWeather(boolean isWeather) {
        this.isWeather = isWeather;
    }
    public void setIsNet(boolean isNet){this.isNet=isNet;}
    public void setMeSend(boolean isMeSend) {
        this.isMeSend = isMeSend;
    }
    public weatherInfoBean(String city, String date, String temp,String weather,String wind, boolean isMeSend) {
        super();
        this.city = city;
        this.date = date;
        this.temp = temp;
        this.weather=weather;
        this.wind=wind;
        this.isMeSend = isMeSend;
    }
    public weatherInfoBean() {
        super();
    }
}
package com.dzx.control;

import android.content.Context;

import com.dzx.Recognization.online.IRecogListener;
import com.dzx.Recognization.online.RecogEventAdapter;
import com.dzx.util.Logger;
import com.baidu.speech.EventListener;
import com.baidu.speech.EventManager;
import com.baidu.speech.EventManagerFactory;
import com.baidu.speech.asr.SpeechConstant;

import org.json.JSONObject;

import java.util.Map;

/**

 * EventManager内的方法如send 都可以在主线程中进行，SDK中做过处理
 */

public class MyRecognizer {
    /**
     * SDK 内部核心 EventManager 类
     */
    private EventManager asr;

    /**
     * SDK 内部核心 事件回调类， 用于开发者写自己的识别回调逻辑
     */
    private EventListener eventListener;

    private static boolean isOfflineEngineLoaded = false;

    private static boolean isInited = false;

    private static final String TAG = "MyRecognizer";

    /**
     * 初始化
     *
     * @param context
     * @param recogListener 将EventListener结果做解析的DEMO回调。使用RecogEventAdapter 适配EventListener
     */
    public MyRecognizer(Context context, IRecogListener recogListener) {
        this(context, new RecogEventAdapter(recogListener));
    }

    /**
     * 初始化 提供 EventManagerFactory需要的Context和EventListener
     *
     * @param context
     * @param eventListener
     */
    public MyRecognizer(Context context, EventListener eventListener) {
        if (isInited) {
            Logger.error(TAG, "还未调用release()，请勿新建一个新类");
            throw new RuntimeException("还未调用release()，请勿新建一个新类");
        }
        isInited = true;
        this.eventListener = eventListener;
        asr = EventManagerFactory.create(context, "asr");
        asr.registerListener(eventListener);
    }


    /**
     * @param params
     */
    /*public void loadOfflineEngine(Map<String, Object> params) {
        String json = new JSONObject(params).toString();
        Logger.info(TAG + ".Debug", "loadOfflineEngine params:" + json);
        asr.send(SpeechConstant.ASR_KWS_LOAD_ENGINE, json, null, 0, 0);
        isOfflineEngineLoaded = true;
        // 没有ASR_KWS_LOAD_ENGINE这个回调表试失败，如缺少第一次联网时下载的正式授权文件。
    }*/

    public void start(Map<String, Object> params) {
        String json = new JSONObject(params).toString();
        Logger.info(TAG + ".Debug", "asr params(反馈请带上此行日志):" + json);
        if (asr != null) {
            asr.send(SpeechConstant.ASR_START, json, null, 0, 0);
        }
        else{

        }
    }


    /**
     * 提前结束录音等待识别结果。
     */
    public void stop() {
        Logger.info(TAG, "停止录音");
        if (asr != null) {
            asr.send(SpeechConstant.ASR_STOP, "{}", null, 0, 0);
        }
    }

    /**
     * 取消本次识别，取消后将立即停止不会返回识别结果。
     * cancel 与stop的区别是 cancel在stop的基础上，完全停止整个识别流程，
     */
    public void cancel() {
        Logger.info(TAG, "取消识别");
        if (asr != null) {
            asr.send(SpeechConstant.ASR_CANCEL, "{}", null, 0, 0);
        }
    }


    public void release() {
        if (asr == null) {
            return;
        }
        cancel();

        asr.unregisterListener(eventListener);
        asr = null;
        isInited = false;
    }
}
package com.dzx.control;

import android.content.Context;

import com.dzx.util.Logger;

import com.baidu.speech.EventListener;
import com.baidu.speech.EventManager;
import com.baidu.speech.EventManagerFactory;
import com.baidu.speech.asr.SpeechConstant;

import org.json.JSONObject;

import java.util.Map;

/**

 */

public class MyWakeup {


    private static boolean isInited = false;

    private EventManager wp;
    private EventListener eventListener;

    private static final String TAG = "MyWakeup";

    public MyWakeup(Context context, EventListener eventListener) {
        if (isInited) {
            Logger.error(TAG, "还未调用release()，请勿新建一个新类");
            throw new RuntimeException("还未调用release()，请勿新建一个新类");
        }
        isInited = true;
        this.eventListener = eventListener;
        wp = EventManagerFactory.create(context, "wp");
        wp.registerListener(eventListener);
    }


    public void start(Map<String, Object> params) {
        String json = new JSONObject(params).toString();
        Logger.info(TAG + ".Debug", "wakeup params(反馈请带上此行日志):" + json);
        wp.send(SpeechConstant.WAKEUP_START, json, null, 0, 0);
    }

    public void stop() {
        Logger.info(TAG, "唤醒结束");
        wp.send(SpeechConstant.WAKEUP_STOP, null, null, 0, 0);
    }

    public void release() {
        stop();
        wp.unregisterListener(eventListener);
        wp = null;
        isInited = false;
    }
}
package com.dzx.db;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

/**
 * Created by 杜卓轩 on 2018/3/17.
 */

public class diaryDB extends SQLiteOpenHelper {
    public static final String CREATE_DIARY = "create table Diary("
            + "id integer primary key autoincrement, "
            + "date text, "
            + "title text, "
            + "tag text, "
            + "content text)";

    private Context mContext;
    public diaryDB(Context context, String name, SQLiteDatabase.CursorFactory factory, int version){
        super(context, name, factory, version);
        mContext = context;
    }
    @Override
    public void onCreate(SQLiteDatabase db) {
        db.execSQL(CREATE_DIARY);
    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {

        db.execSQL("drop table if exists Diary");
        onCreate(db);
    }
}
package com.dzx.fragment;

import android.Manifest;

import android.content.pm.PackageManager;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.os.StrictMode;
import android.support.v4.app.ActivityCompat;
import android.support.v4.app.Fragment;
import android.support.v4.content.ContextCompat;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import com.dzx.R;
import com.dzx.Recognization.online.InFileStream;
import com.dzx.util.Logger;

import java.util.ArrayList;

/**
 * Created by 杜卓轩 on 2018/3/4.
 */

public abstract class Fragment_common extends Fragment {
    protected TextView txtLog;
    protected Button btn;
    //protected Button btn_stop;
    protected TextView txtResult;

    protected Handler handler;

    protected String descText;

    protected int layout = R.layout.fragment_2;

    protected Class settingActivityClass = null;

   // protected boolean running = false;

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {


        // setStrictMode();
        InFileStream.setContext(getActivity());
        View rootView = inflater.inflate(R.layout.fragment_2, container, false);

        handler = new Handler() {

            /*
             * @param msg
             */
            @Override
            public void handleMessage(Message msg) {
                super.handleMessage(msg);
                handleMsg(msg);
            }

        };
        Logger.setHandler(handler);
        initPermission();
        initView(rootView);
        initRecog();
        return rootView;
    }
    protected abstract void initRecog();

    protected void handleMsg(Message msg) {
        if (txtLog != null && msg.obj != null) {
           txtLog.append(msg.obj.toString() + "\n");

        }
    }

    protected void initView(View rootView) {
        txtResult = (TextView) rootView.findViewById(R.id.txtResult);
        txtLog = (TextView) rootView.findViewById(R.id.txtLog);
        btn = (Button) rootView.findViewById(R.id.btn);

        txtLog.setText(descText + "\n");
         //txtResult.setText("ceshi");
    }

    /**
     * android 6.0 以上需要动态申请权限
     */
    private void initPermission() {
        String[] permissions = {
                Manifest.permission.RECORD_AUDIO,
                Manifest.permission.ACCESS_NETWORK_STATE,
                Manifest.permission.INTERNET,
                Manifest.permission.READ_PHONE_STATE,
                Manifest.permission.WRITE_EXTERNAL_STORAGE
        };

        ArrayList<String> toApplyList = new ArrayList<String>();

        for (String perm : permissions) {
            if (PackageManager.PERMISSION_GRANTED != ContextCompat.checkSelfPermission(getActivity(), perm)) {
                toApplyList.add(perm);
                // 进入到这里代表没有权限.

            }
        }
        String[] tmpList = new String[toApplyList.size()];
        if (!toApplyList.isEmpty()) {
            ActivityCompat.requestPermissions(getActivity(), toApplyList.toArray(tmpList), 123);
        }

    }

    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        // 此处为android 6.0以上动态授权的回调，用户自行实现。
    }

    private void setStrictMode() {
        StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder()
                .detectAll()
                .penaltyLog()
                .build());
        StrictMode.setVmPolicy(new StrictMode.VmPolicy.Builder()
                .detectLeakedSqlLiteObjects()
                .detectLeakedClosableObjects()
                .penaltyLog()
                .penaltyDeath()
                .build());

    }
}
package com.dzx.fragment;

import android.content.SharedPreferences;
import android.os.Bundle;
import android.os.Message;
import android.preference.PreferenceManager;
import android.util.Log;
import android.view.View;


import com.dzx.Recognization.online.CommonRecogParams;
import com.dzx.Recognization.online.IStatus;
import com.dzx.Recognization.online.MessageStatusRecogListener;
import com.dzx.Recognization.online.StatusRecogListener;
import com.dzx.control.MyRecognizer;
import com.dzx.util.Logger;

import java.util.Map;

/**
 * Created by 杜卓轩 on 2018/3/4.
 */

public abstract class Fragment_recog extends Fragment_common implements IStatus {


        /**
         * 识别控制器，使用MyRecognizer控制识别的流程
         */
        protected MyRecognizer myRecognizer;

        /*
         * Api的参数类，仅仅用于生成调用START的json字符串，本身与SDK的调用无关
         */
        protected CommonRecogParams apiParams;

        /*
         * 本Activity中是否需要调用离线命令词功能。根据此参数，判断是否需要调用SDK的ASR_KWS_LOAD_ENGINE事件
         */
        protected boolean enableOffline = false;


        /**
         * 控制UI按钮的状态
         */
        protected int status;

        /**
         * 日志使用
         */
        private static final String TAG = "Fragment_recog";

        /**
         * 在onCreate中调用。初始化识别控制类MyRecognizer
         */
        protected void initRecog() {
            StatusRecogListener listener = new MessageStatusRecogListener(handler);
            myRecognizer = new MyRecognizer(getActivity(),  listener);
            apiParams = getApiParams();
            status = STATUS_NONE;

        }


        /**
         * 销毁时需要释放识别资源。
         */
        @Override
        public void onDestroy() {
            myRecognizer.release();
            Log.i(TAG, "onDestory");
            super.onDestroy();
        }
        @Override
        public void onStop(){

            super.onStop();
        }

        public void onStart(){
           // start();
            super.onStart();
        //目前的结论是，锁屏时调用release，把asr注销，isinited=false
            //导致了再次开启屏幕时，报nullpointer exception
            //asr.send函数报错。
        }

        public void onPause(){
            super.onPause();
            //myRecognizer.release();
            //这个有没有用。
            Logger.info(TAG, "进行了release");
        }

        /**
         * 开始录音，点击“开始”按钮后调用。
         */
        protected void start() {
            SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(getActivity());
            //  上面的获取是为了生成下面的Map， 自己集成时可以忽略
            Map<String, Object> params = apiParams.fetch(sp);
            // 集成时不需要上面的代码，只需要params参数。
            // 这里打印出params， 填写至您自己的app中，直接调用下面这行代码即可。
            myRecognizer.start(params);
        }


        /**
         * 开始录音后，手动停止录音。SDK会识别在此过程中的录音。点击“停止”按钮后调用。
         */
        private void stop() {
            myRecognizer.stop();
        }

        /**
         * 开始录音后，取消这次录音。SDK会取消本次识别，回到原始状态。点击“取消”按钮后调用。
         */
        private void cancel() {
            myRecognizer.cancel();
        }


        /**
         * @return
         */
        protected abstract CommonRecogParams getApiParams();

        // 以上为 语音SDK调用，以下为UI部分
        @Override
        public void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
        }


        @Override
        protected void initView(View rootView) {
            super.initView(rootView);
            btn.setOnClickListener(new View.OnClickListener() {

                @Override
                public void onClick(View v) {
                    switch (status) {
                        case STATUS_NONE: // 初始状态
                            start();
                            status = STATUS_WAITING_READY;
                            updateBtnTextByStatus();
                            txtLog.setText("");
                            txtResult.setText("");
                            break;
                        case STATUS_WAITING_READY: // 调用本类的start方法后，即输入START事件后，等待引擎准备完毕。
                        case STATUS_READY: // 引擎准备完毕。
                        case STATUS_SPEAKING:
                        case STATUS_FINISHED: // 长语音情况
                        case STATUS_RECOGNITION:
                            stop();
                            status = STATUS_STOPPED; // 引擎识别中
                            updateBtnTextByStatus();
                            break;
                        case STATUS_STOPPED: // 引擎识别中
                            cancel();
                            status = STATUS_NONE; // 识别结束，回到初始状态
                            updateBtnTextByStatus();
                            break;
                        default:
                            break;
                    }

                }
            });
        }

        protected void handleMsg(Message msg) {
            super.handleMsg(msg);

            switch (msg.what) { // 处理MessageStatusRecogListener中的状态回调
                case STATUS_FINISHED:
                   if (msg.arg2 == 1) {
                       txtResult.setText(msg.obj.toString());
                    }
                    status = msg.what;
                    updateBtnTextByStatus();
                    break;
                case STATUS_NONE:
                case STATUS_READY:
                case STATUS_SPEAKING:
                case STATUS_RECOGNITION:
                    status = msg.what;
                    updateBtnTextByStatus();
                    break;
                default:

                    break;

            }
        }

        private void updateBtnTextByStatus() {
            switch (status) {
                case STATUS_NONE:
                    btn.setText("开始录音");
                    btn.setEnabled(true);
                    //setting.setEnabled(true);
                    break;
                case STATUS_WAITING_READY:
                case STATUS_READY:
                case STATUS_SPEAKING:
                case STATUS_RECOGNITION:
                    btn.setText("停止录音");
                    btn.setEnabled(true);
                    //setting.setEnabled(false);
                    break;

                case STATUS_STOPPED:
                    btn.setText("取消整个识别过程");
                    btn.setEnabled(true);
                   // setting.setEnabled(false);
                    break;
                default:
                    break;
            }
        }
    }

package com.dzx.fragment;

import android.app.Activity;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import com.dzx.Recognization.online.CommonRecogParams;
import com.dzx.Recognization.online.OnlineRecogParams;
import com.dzx.Setting.Setting_use;

/**
 * Created by 杜卓轩 on 2018/3/4.
 */

public class FragmentCommon extends Fragment_recog {




    public FragmentCommon() {
        super();
        settingActivityClass = Setting_use.class;
    }

    @Override
    protected CommonRecogParams getApiParams() {
        return new OnlineRecogParams(getActivity());
    }

    public static String  TAG = FragmentCommon.class.getSimpleName();

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        Log.i(TAG, "onCreate");
    }

    @Override
    public void onActivityCreated(Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        Log.i(TAG, "onActivityCreated");
    }
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        Log.i(TAG, "onCreateView");
        return super.onCreateView(inflater, container, savedInstanceState);
    }

    @Override
    public void onAttach(Activity activity) {
        super.onAttach(activity);
        Log.i(TAG, "onAttach");
    }
    @Override
    public void onDestroy() {
        Log.i(TAG, "onDestory");
        super.onDestroy();
    }
    @Override
    public void onDetach() {
        Log.i(TAG, "onDetch");
        super.onDetach();
    }
    @Override
    public void onPause() {
        Log.i(TAG, "onPause");
        super.onPause();
    }
    @Override
    public void onDestroyView() {
        super.onDestroyView();
        Log.i(TAG, "onDestroyView");
    }
    @Override
    public void onViewCreated(View view, Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        Log.i(TAG, "onViewCreated");
    }
    @Override
    public void onStart() {
        super.onStart();
        Log.i(TAG, "onStart");
    }
}
package com.dzx.fragment;

import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.os.Bundle;
import android.support.design.widget.FloatingActionButton;
import android.support.v4.app.Fragment;
import android.support.v7.app.ActionBar;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.text.TextUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.SearchView;
import android.widget.TextView;

import com.dzx.Activity.AddDiaryActivity;
import com.dzx.Activity.UpdateDiaryActivity;
import com.dzx.Adapter.DiaryAdapter;
import com.dzx.Bean.diaryBean;
import com.dzx.Constants;
import com.dzx.Event.DelDiaryEvent;
import com.dzx.Event.StartUpdateDiaryEvent;
import com.dzx.MainActivity;
import com.dzx.R;
import com.dzx.db.diaryDB;
import com.dzx.util.AppManager;
import com.dzx.util.GetDate;
import com.dzx.util.SpHelper;
import com.dzx.util.StatusBarCompat;

import org.greenrobot.eventbus.EventBus;
import org.greenrobot.eventbus.Subscribe;

import java.util.ArrayList;
import java.util.List;

import butterknife.Bind;
import butterknife.ButterKnife;
import butterknife.OnClick;

/**
 * Created by 杜卓轩 on 2018/2/28.
 */




//public class FragmentOne extends BaseFragment {
public class FragmentOne extends Fragment {
    /*public static FragmentOne newInstance(String s){
        Bundle bundle = new Bundle();
        bundle.putString(Constants.KEY_ARGS,s);
        FragmentOne fragment = new FragmentOne();
        fragment.setArguments(bundle);
        return fragment;
    }*/




    //@Bind(R.id.common_iv_back)
    //ImageView mCommonIvBack;
    //@Bind(R.id.common_tv_title)
   // TextView mCommonTvTitle;
  //  @Bind(R.id.common_iv_test)
    //ImageView mCommonIvTest;
    //@Bind(R.id.common_title_ll)
   // LinearLayout mCommonTitleLl;
    @Bind(R.id.main_iv_circle)
    ImageView mMainIvCircle;
    @Bind(R.id.main_tv_date)
    TextView mMainTvDate;
    @Bind(R.id.main_tv_content)
    TextView mMainTvContent;
    @Bind(R.id.item_ll_control)
    LinearLayout mItemLlControl;

    @Bind(R.id.main_rv_show_diary)
    RecyclerView mMainRvShowDiary;
    @Bind(R.id.main_fab_enter_edit)
    FloatingActionButton mMainFabEnterEdit;
    @Bind(R.id.main_rl_main)
    RelativeLayout mMainRlMain;
    @Bind(R.id.item_first)
    LinearLayout mItemFirst;
    @Bind(R.id.main_ll_main)
    LinearLayout mMainLlMain;
    @Bind(R.id.searchView)
    SearchView mSearchView;
    private List<diaryBean> mDiaryBeanList=new ArrayList<>();


    private diaryDB mHelper;

    private static String IS_WRITE = "true";

    private int mEditPosition = -1;
    private DiaryAdapter diaryAdapter;
    /**
     * 标识今天是否已经写了日记
     */
    private boolean isWrite = false;
    private static TextView mTvTest;
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View rootView = inflater.inflate(R.layout.fragment_1, container, false);
        ButterKnife.bind(this,rootView);
        StatusBarCompat.compat(getActivity(), Color.parseColor("#161414"));
        mHelper = new diaryDB(getActivity(), "Diary.db", null, 1);
        //ActionBar actionBar = getSupportActionBar();
        //actionBar.hide();
        if(!EventBus.getDefault().isRegistered(this)){//加上判断
            EventBus.getDefault().register(this);
        }

        SpHelper spHelper = SpHelper.getInstance(getActivity());

        initTitle();
        getDiaryBeanList();
        RecyclerView.LayoutManager layoutManager=new LinearLayoutManager(getActivity());
        mMainRvShowDiary.setLayoutManager(layoutManager);
        diaryAdapter=new DiaryAdapter(getActivity().getApplicationContext(),mDiaryBeanList);
        mMainRvShowDiary.setAdapter(diaryAdapter);
        mTvTest = new TextView(getActivity());
        mTvTest.setText("hello world");
        searchEvent();
        mSearchView.clearFocus();
        return rootView;
    }
    public static void  startActivity(Context context) {
        Intent intent = new Intent(context,MainActivity.class);
        context.startActivity(intent);
        //diaryAdapter.notifyDataSetChanged();
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        //setContentView(R.layout.activity_main);
        //AppManager.getAppManager().addActivity(getActivity());

    }

    private void initTitle() {
        mMainTvDate.setText("今天，" + GetDate.getDate());
       // mCommonTvTitle.setText("日记");
      //  mCommonIvBack.setVisibility(View.INVISIBLE);
      //  mCommonIvTest.setVisibility(View.INVISIBLE);

    }

    private void searchEvent(){

        mSearchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
            // 当点击搜索按钮时触发该方法
            @Override
            public boolean onQueryTextSubmit(String query) {
                return false;
            }

            // 当搜索内容改变时触发该方法
            @Override
            public boolean onQueryTextChange(String newText) {

                    diaryAdapter.filter(newText);

                return false;
            }
        });
    }




    private List<diaryBean> getDiaryBeanList() {

        //mDiaryBeanList = new ArrayList<>();
        List<diaryBean> diaryList = new ArrayList<>();
        SQLiteDatabase sqLiteDatabase = mHelper.getWritableDatabase();
        Cursor cursor = sqLiteDatabase.query("Diary", null, null, null, null, null, null);

        if (cursor.moveToFirst()) {
            do {
                String date = cursor.getString(cursor.getColumnIndex("date"));
                String dateSystem = GetDate.getDate().toString();
                if (date.equals(dateSystem)) {
                    mMainLlMain.removeView(mItemFirst);

                    break;
                }
            } while (cursor.moveToNext());
        }


        if (cursor.moveToFirst()) {
            do {
                String date = cursor.getString(cursor.getColumnIndex("date"));
                String title = cursor.getString(cursor.getColumnIndex("title"));
                String content = cursor.getString(cursor.getColumnIndex("content"));
                String tag = cursor.getString(cursor.getColumnIndex("tag"));
                mDiaryBeanList.add(new diaryBean(date, title, content, tag));
            } while (cursor.moveToNext());
        }
        cursor.close();

        for (int i = mDiaryBeanList.size() - 1; i >= 0; i--) {
            diaryList.add(mDiaryBeanList.get(i));
        }

        mDiaryBeanList = diaryList;
        return mDiaryBeanList;
    }

    @Subscribe
    public void startUpdateDiaryActivity(StartUpdateDiaryEvent event) {
        String title = mDiaryBeanList.get(event.getPosition()).getTitle();
        String content = mDiaryBeanList.get(event.getPosition()).getContent();
        String tag = mDiaryBeanList.get(event.getPosition()).getTag();
        UpdateDiaryActivity.startActivity(getActivity(), title, content, tag);
        getActivity().finish();
       // onDestroy();

    }

    @Subscribe
    public void DelDiaryActivity(final DelDiaryEvent event) {
        //final String date = mDiaryBeanList.get(event.getPosition()).getDate();
         String title = mDiaryBeanList.get(event.getPosition()).getTitle();
         String content = mDiaryBeanList.get(event.getPosition()).getContent();
         final String tag = mDiaryBeanList.get(event.getPosition()).getTag();
        //UpdateDiaryActivity.startActivity(getActivity(), title, content, tag);
        android.support.v7.app.AlertDialog.Builder alertDialogBuilder = new android.support.v7.app.AlertDialog.Builder(getActivity());
        alertDialogBuilder.setMessage("确定要删除该日记吗？").setPositiveButton("确定", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int which) {

//                        String title = mUpdateDiaryEtTitle.getText().toString();
                //String tag = mTvTag.getText().toString();
                SQLiteDatabase dbDelete = mHelper.getWritableDatabase();
                dbDelete.delete("Diary", "tag = ?", new String[]{tag});
                mDiaryBeanList.remove(event.getPosition());
                diaryAdapter.notifyItemRemoved(event.getPosition());

              /*  getDiaryBeanList();
                RecyclerView.LayoutManager layoutManager=new LinearLayoutManager(getActivity());
                mMainRvShowDiary.setLayoutManager(layoutManager);*/
                diaryAdapter=new DiaryAdapter(getActivity().getApplicationContext(),mDiaryBeanList);
                mMainRvShowDiary.setAdapter(diaryAdapter);
                //if(event.getPosition()==0){
                    //mMainLlMain.addView(mItemFirst);
               // }



                //mMainRvShowDiary.notify();
                //mDiaryBeanList.remove(new diaryBean(date,title, content, tag));
                //diaryAdapter.notifyDataSetChanged();
                //FragmentOne.startActivity(getActivity());


               // FragmentOne.startActivity(UpdateDiaryActivity.this);
            }
        }).setNegativeButton("取消", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int which) {
            }
        }).show();
    }




    @Override
    public void onDestroy() {
        super.onDestroy();
        EventBus.getDefault().unregister(this);
    }

    @OnClick(R.id.main_fab_enter_edit)
    public void onClick() {
        AddDiaryActivity.startActivity(getActivity());
        getActivity().finish();
    }

    public void onResume(){
        super.onResume();

        mSearchView.setFocusable(true);
        mSearchView.setFocusableInTouchMode(true);
        //onCreateView(null,null,null);
    }
    public void onStart(){
        super.onStart();
        //getDiaryBeanList();

        //diaryAdapter.notifyDataSetChanged();
    }


}






package com.dzx.fragment;

import android.Manifest;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;

import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;

import android.support.v4.app.ActivityCompat;
import android.support.v4.app.Fragment;
import android.support.v4.content.ContextCompat;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ListView;
import android.widget.TextView;

import com.amap.api.location.AMapLocation;
import com.amap.api.location.AMapLocationClient;
import com.amap.api.location.AMapLocationClientOption;
import com.amap.api.location.AMapLocationListener;
import com.dzx.Adapter.weatherInfoViewAdapter;
import com.dzx.Bean.weatherInfoBean;
import com.dzx.R;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Random;

import okhttp3.Call;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

import com.dzx.Bean.weatherBean;
import com.google.gson.Gson;
import com.dzx.util.GetTime;
import static java.lang.Boolean.TRUE;


/**
 * Created by 杜卓轩 on 2018/2/28.
 */


public class FragmentThree extends Fragment implements AMapLocationListener{
    public AMapLocationClient mLocationClient=null;
    public AMapLocationClientOption mLocationOption=null;
    public String city;
    public TextView fragment3;

    public String cityCode;
    public double mLatitude;
    public double mLongitude;
    public TextView textView2;
    public TextView t_city;
    public TextView t_date;
    public TextView t_temp;
    public TextView t_weath;
    public TextView t_wind;
    public TextView t_air;
    public String weatherInfo;
    public boolean flag=TRUE;

    public String s_city;
    public String s_date;
    public String s_temp;
    public String s_weath;
    public String s_wind;
    public String s_air;
    public GetTime mgetTime;

    public static SharedPreferences sp;


    private String randomTips_night[]={//17-21
            "记得好好吃晚饭！",
            "现在大概是晚上吧？（如果没有BUG的话）\n在自习，在上课，还是在去食堂的路上呢？",
            "诶嘿，今天过的怎么样啊！",
            "晚上好啊！",
            "什么东西都要坚持才好！请收下我这碗鸡汤！"
    };
    private String randomTips_morning[]={//6-8
            "嗨，早上好啊！",
            "今天天气怎么样呢？",
            "要带着一天的好心情啊！",
            "又是新的一天！",
            "要一直元气满满啊！会为你加油的！！"
    };
    private String randomTips_noon[]={//10-14
            "午安~！",
            "中午稍稍休息一下吧！",
            "不如小睡一下养足精神...",
            "感觉我们这里好热啊！",
            "记得不要在路上玩手机啊！注意安全。"
    };
    private String randomTips_midnight[]={//21-6
            "现在...应该是很晚了吧！",
            "还没有休息吗？",
            "如果没有什么事的话就早点休息吧！",
            "累吗...要照顾好自己啊",
            "如果已经很困，不如明早早些起完成待续的任务？"
    };
    private String randomTips_daily[]={//8-10
            "这里是日常问候哟！",
            "有什么不开心的事就在这里说一说吧！",
            "假装我能听见。",
            "(眯眼笑)",
            "一起笑一下！"
    };
    private String randomTips_afternoon[]={//14-17
            "大概是下午？",
            "在上课吗？好好听讲！",
            "也许自习很枯燥但是....不对！如果有人陪或许就不那么枯燥了吧！",
            "好吧？当我没说....",
            "那就这样吧！加油！"
    };

    Random rand=new Random();

    //测试代码。测试功能
    private weatherInfoViewAdapter weatherInfoViewAdapters;
    private ListView weather_listView;

    private List<weatherInfoBean> weatherInfoBeans_List = new ArrayList<weatherInfoBean>();
    private Handler handler_p = new Handler() {
        public void handleMessage(android.os.Message msg) {
            int what = msg.what;
            switch (what) {
                case 1:
                    /**
                     * ListView条目控制在最后一行
                     */
                    weather_listView.setSelection(weatherInfoBeans_List.size());
                    break;

                default:
                    break;
            }
        };
    };






    public static boolean isNetworkAvailable(Context context) {

        if(context!=null) {
            ConnectivityManager cm = (ConnectivityManager) context
                    .getSystemService(Context.CONNECTIVITY_SERVICE);
            if (cm == null) {return false;
            } else {
                //如果仅仅是用来判断网络连接
                //则可以使用 cm.getActiveNetworkInfo().isAvailable();
                NetworkInfo[] info = cm.getAllNetworkInfo();
                if (info != null) {
                    for (int i = 0; i < info.length; i++) {
                        if (info[i].getState() == NetworkInfo.State.CONNECTED) {
                            return true;
                        }
                    }
                }
            }
        }

        return false;
    }


    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        //View rootView = inflater.inflate(R.layout.fragment_3, container, false);
        View rootView = inflater.inflate(R.layout.fragment_weather, container, false);
        initPermission();
        location();



        //测试：

        weather_listView = (ListView) rootView.findViewById(R.id.lv_chat_dialog);
        Button btn_forecast_send = (Button) rootView.findViewById(R.id.btn_forecast);
        Button btn_tips_send = (Button) rootView.findViewById(R.id.btn_tips);
        /**
         * 发送按钮的点击事件
         */

        btn_tips_send.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View arg0) {

                // TODO Auto-generated method stub
               // if (isNetworkAvailable(getActivity().getApplicationContext())) {
                HashMap<String,Object> map=mgetTime.getTime();
                int nowtime=Integer.parseInt(map.get("hour").toString());
                int nowDay=Integer.parseInt(map.get("day").toString());
                sp = getActivity().getSharedPreferences("Time_record", Context.MODE_PRIVATE);

                if(nowtime-sp.getInt("LAST_TIME",0)>=2  ||nowDay-sp.getInt("LAST_DAY",0)!=0) {//如果与上次使用tips间隔超过三小时（仅使用hour来粗略估计）



                    SharedPreferences.Editor editor = sp.edit();
                    editor.putInt("LAST_TIME", nowtime);
                    editor.putInt("LAST_DAY",nowDay);
                    editor.commit();
                    //更新使用时间。

                    weatherInfoBean weatherInfoBeans = new weatherInfoBean();
                    weatherInfoBeans.setMeSend(true);
                    weatherInfoBeans.setIsNet(true);
                    weatherInfoBeans.setInfo("想说的话");
                    weatherInfoBeans_List.add(weatherInfoBeans);

                    //weatherInfoViewAdapters.notifyDataSetChanged();
                    // if (!isNetworkAvailable(getActivity().getApplicationContext())) {
                    weatherInfoViewAdapters = new weatherInfoViewAdapter(getActivity(), weatherInfoBeans_List);
                    weather_listView.setAdapter(weatherInfoViewAdapters);
                    //  }
                    weatherInfoViewAdapters.notifyDataSetChanged();

                    weatherInfoBeans = new weatherInfoBean();
                    weatherInfoBeans.setMeSend(false);
                    weatherInfoBeans.setIsWeather(false);

                    //Log.i("tag",map.get("hour").toString());
                    if (nowtime <= 24 && nowtime >= 21) {
                        int random_tips = rand.nextInt(5);
                        weatherInfoBeans.setTips(randomTips_midnight[random_tips]);
                    } else if (nowtime <= 21 && nowtime >= 17) {
                        int random_tips = rand.nextInt(5);
                        weatherInfoBeans.setTips(randomTips_night[random_tips]);
                    } else if (nowtime <= 17 && nowtime >= 14) {
                        int random_tips = rand.nextInt(5);
                        weatherInfoBeans.setTips(randomTips_afternoon[random_tips]);
                    } else if (nowtime <= 14 && nowtime >= 10) {
                        int random_tips = rand.nextInt(5);
                        weatherInfoBeans.setTips(randomTips_noon[random_tips]);
                    } else if (nowtime <= 10 && nowtime >= 8) {
                        int random_tips = rand.nextInt(5);
                        weatherInfoBeans.setTips(randomTips_daily[random_tips]);
                    } else if (nowtime <= 8 && nowtime >= 6) {
                        int random_tips = rand.nextInt(5);
                        weatherInfoBeans.setTips(randomTips_morning[random_tips]);
                    } else if (nowtime <= 6 && nowtime >= 0) {
                        int random_tips = rand.nextInt(5);
                        weatherInfoBeans.setTips(randomTips_midnight[random_tips]);
                    }


                    weatherInfoBeans_List.add(weatherInfoBeans);

                    weatherInfoViewAdapters.notifyDataSetChanged();
                    handler_p.sendEmptyMessage(1);
                }
                else {
                    weatherInfoBean weatherInfoBeans = new weatherInfoBean();
                    weatherInfoBeans.setMeSend(false);
                    weatherInfoBeans.setIsWeather(false);
                    //weatherInfoBeans.setIsNet(true);
                    weatherInfoBeans.setTips("先去忙吧！"+"\n"+"不要这么频繁的点击啊。"+"\n"+"考虑一下存货问题！"+"\n"+"留一些以后看可好...");
                    weatherInfoBeans_List.add(weatherInfoBeans);

                    //weatherInfoViewAdapters.notifyDataSetChanged();
                    // if (!isNetworkAvailable(getActivity().getApplicationContext())) {
                    weatherInfoViewAdapters = new weatherInfoViewAdapter(getActivity(), weatherInfoBeans_List);
                    weather_listView.setAdapter(weatherInfoViewAdapters);
                    //  }
                    weatherInfoViewAdapters.notifyDataSetChanged();
                    handler_p.sendEmptyMessage(1);
                }
               // }
               /*else{
                    weatherInfoBean weatherInfoBeans = new weatherInfoBean();
                    weatherInfoBeans.setMeSend(true);
                    weatherInfoBeans.setIsNet(false);
                    weatherInfoBeans.setNetInfo("网络没有连接上啊,请先连接网络再试");
                    weatherInfoBeans_List.add(weatherInfoBeans);
                    weatherInfoViewAdapters = new weatherInfoViewAdapter(getActivity(), weatherInfoBeans_List);
                    weather_listView.setAdapter(weatherInfoViewAdapters);
                    weatherInfoViewAdapters.notifyDataSetChanged();
                }*/
            }
        });
        btn_forecast_send.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View arg0) {
                // TODO Auto-generated method stub

                if (isNetworkAvailable(getActivity().getApplicationContext())) {
                    Log.i("tag","youwangluolianjie");
                    weatherInfoBean weatherInfoBeans = new weatherInfoBean();
                    weatherInfoBeans.setMeSend(true);
                    weatherInfoBeans.setIsNet(true);
                    weatherInfoBeans.setInfo("未来N天天气预报");
                    weatherInfoBeans_List.add(weatherInfoBeans);
                    //weatherInfoViewAdapters.notifyDataSetChanged();

                    /*try {
                        Thread.currentThread().sleep(1000);
                    }catch (InterruptedException e) {
                        e.printStackTrace();
                    }*/

                    weatherInfoBeans = new weatherInfoBean();
                    weatherInfoBeans.setMeSend(false);
                    weatherInfoBeans.setIsWeather(true);
                    Gson gson = new Gson();
                    weatherBean weatherBean = gson.fromJson(weatherInfo, weatherBean.class);
                    weatherInfoBeans.setParent_city(weatherBean.getHeWeather6().get(0).getBasic().getParent_city());
                    weatherInfoBeans.setCity(weatherBean.getHeWeather6().get(0).getBasic().getLocation());
                    weatherInfoBeans.setDate(weatherBean.getHeWeather6().get(0).getDaily_forecast().get(1).getDate());
                    weatherInfoBeans.setTemp(weatherBean.getHeWeather6().get(0).getDaily_forecast().get(1).getTmp_min());
                    weatherInfoBeans.setTemp_max(weatherBean.getHeWeather6().get(0).getDaily_forecast().get(1).getTmp_max());
                    weatherInfoBeans.setWeather(weatherBean.getHeWeather6().get(0).getDaily_forecast().get(1).getCond_txt_d());
                    weatherInfoBeans.setWind(weatherBean.getHeWeather6().get(0).getDaily_forecast().get(1).getWind_dir());
                    weatherInfoBeans_List.add(weatherInfoBeans);

                    weatherInfoViewAdapters.notifyDataSetChanged();


                    weatherInfoBeans = new weatherInfoBean();
                    weatherInfoBeans.setMeSend(false);
                    weatherInfoBeans.setIsWeather(true);
                    gson = new Gson();
                    weatherBean = gson.fromJson(weatherInfo, weatherBean.class);
                    weatherInfoBeans.setParent_city(weatherBean.getHeWeather6().get(0).getBasic().getParent_city());
                    weatherInfoBeans.setCity(weatherBean.getHeWeather6().get(0).getBasic().getLocation());
                    weatherInfoBeans.setDate(weatherBean.getHeWeather6().get(0).getDaily_forecast().get(2).getDate());
                    weatherInfoBeans.setTemp(weatherBean.getHeWeather6().get(0).getDaily_forecast().get(2).getTmp_min());
                    weatherInfoBeans.setTemp_max(weatherBean.getHeWeather6().get(0).getDaily_forecast().get(2).getTmp_max());
                    weatherInfoBeans.setWeather(weatherBean.getHeWeather6().get(0).getDaily_forecast().get(2).getCond_txt_d());
                    weatherInfoBeans.setWind(weatherBean.getHeWeather6().get(0).getDaily_forecast().get(2).getWind_dir());
                    weatherInfoBeans_List.add(weatherInfoBeans);
                    weatherInfoViewAdapters.notifyDataSetChanged();

                    handler_p.sendEmptyMessage(1);
                }
                else{
                    weatherInfoBean weatherInfoBeans = new weatherInfoBean();
                    weatherInfoBeans.setMeSend(true);
                    weatherInfoBeans.setIsNet(false);
                    weatherInfoBeans.setNetInfo("网络没有连接上啊,请先连接网络再试");
                    weatherInfoBeans_List.add(weatherInfoBeans);
                    weatherInfoViewAdapters = new weatherInfoViewAdapter(getActivity(), weatherInfoBeans_List);
                    weather_listView.setAdapter(weatherInfoViewAdapters);
                    weatherInfoViewAdapters.notifyDataSetChanged();
                    handler_p.sendEmptyMessage(1);
                }
            }
        });
      //  initView(rootView);

        return rootView;
    }


    private void initView(View rootView){
        fragment3= rootView.findViewById(R.id.fragment_3_text);
        textView2=rootView.findViewById(R.id.textView1);
        t_air=rootView.findViewById(R.id.tv_air);
        t_city=rootView.findViewById(R.id.tv_city);
        t_date=rootView.findViewById(R.id.tv_date);
        t_temp=rootView.findViewById(R.id.tv_temp);
        t_weath=rootView.findViewById(R.id.tv_weath);
        t_wind=rootView.findViewById(R.id.tv_wind);

    }
    @Override
    public void onStart(){
        super.onStart();
       // fragment3.setText(cityCode);
        //fragment3.setText("cityCode");
     //   Log.i("tag",cityCode);
       // textView2.setText(weatherInfo);
    }

    private void location() {
        //初始化定位
        mLocationClient = new AMapLocationClient(getContext());
        //设置定位回调监听
        mLocationClient.setLocationListener((AMapLocationListener) this);
        //初始化定位参数
        mLocationOption = new AMapLocationClientOption();
        //设置定位模式为Hight_Accuracy高精度模式，Battery_Saving为低功耗模式，Device_Sensors是仅设备模式
        mLocationOption.setLocationMode(AMapLocationClientOption.AMapLocationMode.Hight_Accuracy);
        //设置是否返回地址信息（默认返回地址信息）
        mLocationOption.setNeedAddress(true);
        //设置是否只定位一次,默认为false
        mLocationOption.setOnceLocation(true);
        //设置是否强制刷新WIFI，默认为强制刷新
        mLocationOption.setWifiActiveScan(true);
        //设置是否允许模拟位置,默认为false，不允许模拟位置
        mLocationOption.setMockEnable(false);
        //设置定位间隔,单位毫秒,默认为2000ms
        mLocationOption.setInterval(2000);

        //给定位客户端对象设置定位参数
        mLocationClient.setLocationOption(mLocationOption);

        //启动定位
        mLocationClient.startLocation();


    }

    @Override
    public void onLocationChanged(AMapLocation amapLocation) {

        if (amapLocation != null) {
            if (amapLocation.getErrorCode() == 0) {
                //可在其中解析amapLocation获取相应内容。
                amapLocation.getCountry();//国家信息
                amapLocation.getProvince();//省信息
                city = amapLocation.getCity().toString();//城市信息
                mLatitude = amapLocation.getLatitude();//获取纬度
                mLongitude = amapLocation.getLongitude();//获取经度
                new Thread(new Runnable() {
                    @Override
                    public void run() {
                        String url = "https://free-api.heweather.com/s6/weather?" +
                                "location=" + mLongitude + "," + mLatitude + "&" +
                                "key=1c3120151deb44f3aaa70d5c2e0e5581" + "&" +

                                "unit=m";

                        OkHttpClient okHttpClient = new OkHttpClient();
                        Request request = new Request.Builder().url(url).build();
                        Call call = okHttpClient.newCall(request);
                        try {
                            Response response = call.execute();
                            //打印json
                            //System.out.println(response.body().string());
                            // Log.i("tag",response.body().string());
                            weatherInfo = response.body().string();
                            Log.i("tag", weatherInfo);

                        } catch (IOException e) {
                            e.printStackTrace();
                            Log.i("tag", "ioexception wrong");
                            //textView2.setText("error");
                        }


                      //  s_air = weatherBean.getHeWeather6().get(0).getNow();


                      //  tv_qlty.setText("空气质量："+qlty);
                        handler.sendEmptyMessage(1);
                    }
                }).start();
                //System.out.println(mLatitude);
                //System.out.println(mLongitude);
                //fragment3.setText(city);
                /*city="北京";
                Cursor C=com.dzx.db.rawQuery("select * from city.com.dzx.db where city like" + city+"%",null);
                while	(C.moveToNext()) {
                    String	cityCode	=	C.getString(C.getColumnIndex("number"));
                }*/
               // fragment3.setText(cityCode);
             //   textView2.setText(weatherInfo);







                /*SharedPreferences sharedPreferences=getSharedPreferences("CityCodePreference", Activity_MODE_PRIVATE);
                SharedPreferences.Editor editor=sharedPreferences.edit();
                editor.putString("cityCode",cityCode);
                editor.commit();
                Intent intent=new intent(getActivity(),);
                intent.putExtra("cityCode",cityCode);
                startActivity(intent);*/

            }
        } else {
            //定位失败时，可通过ErrCode（错误码）信息来确定失败的原因，errInfo是错误信息，详见错误码表。
            Log.e("AmapError", "location Error, ErrCode:"
                    + amapLocation.getErrorCode() + ", errInfo:"
                    + amapLocation.getErrorInfo());
        }
    }




    private Handler handler = new Handler(){
        @Override
public  void handleMessage(Message msg) {
            switch (msg.what) {
                case 0:

                    break;
                case 1:
                   // fragment3.setText(cityCode);
                   // textView2.setText(weatherInfo);
                   // t_city.setText("城市："+s_city);
                    //t_date.setText("日期："+s_date);
                   // t_temp.setText("温度："+s_temp);
                   // t_weath.setText("天气情况："+s_weath);
                   // t_wind.setText("风向："+s_wind);
                    if (isNetworkAvailable(getActivity())) {
                        weatherInfoBean weatherInfoBeans = new weatherInfoBean();
                        weatherInfoBeans.setMeSend(false);
                        weatherInfoBeans.setIsWeather(true);
                        Gson gson = new Gson();
                        weatherBean weatherBean = gson.fromJson(weatherInfo, weatherBean.class);
                        weatherInfoBeans.setParent_city(weatherBean.getHeWeather6().get(0).getBasic().getParent_city());
                        weatherInfoBeans.setCity(weatherBean.getHeWeather6().get(0).getBasic().getLocation());
                        weatherInfoBeans.setDate(weatherBean.getHeWeather6().get(0).getDaily_forecast().get(0).getDate());
                        weatherInfoBeans.setTemp(weatherBean.getHeWeather6().get(0).getDaily_forecast().get(0).getTmp_min());
                        weatherInfoBeans.setTemp_max(weatherBean.getHeWeather6().get(0).getDaily_forecast().get(0).getTmp_max());
                        weatherInfoBeans.setWeather(weatherBean.getHeWeather6().get(0).getDaily_forecast().get(0).getCond_txt_d());
                        weatherInfoBeans.setWind(weatherBean.getHeWeather6().get(0).getDaily_forecast().get(0).getWind_dir());
                        weatherInfoBeans_List.add(weatherInfoBeans);

                        /**
                         *setAdapter
                         */
                        weatherInfoViewAdapters = new weatherInfoViewAdapter(getActivity(), weatherInfoBeans_List);
                        weather_listView.setAdapter(weatherInfoViewAdapters);
                        weatherInfoViewAdapters.notifyDataSetChanged();
                    }


                    break;
                default:
                    break;
            }
        }
    };








    private void initPermission() {
        String[] permissions = {
                Manifest.permission.ACCESS_COARSE_LOCATION,
                Manifest.permission.ACCESS_FINE_LOCATION,
                Manifest.permission.WRITE_EXTERNAL_STORAGE,
                Manifest.permission.READ_EXTERNAL_STORAGE,
                Manifest.permission.READ_PHONE_STATE
        };

        ArrayList<String> toApplyList = new ArrayList<String>();

        for (String perm : permissions) {
            if (PackageManager.PERMISSION_GRANTED != ContextCompat.checkSelfPermission(getActivity(), perm)) {
                toApplyList.add(perm);
                // 进入到这里代表没有权限.

            }
        }
        String[] tmpList = new String[toApplyList.size()];
        if (!toApplyList.isEmpty()) {
            ActivityCompat.requestPermissions(getActivity(), toApplyList.toArray(tmpList), 123);
        }

    }

    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        // 此处为android 6.0以上动态授权的回调，用户自行实现。
    }
}
package com.dzx.fragment;

import android.Manifest;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.support.v4.app.ActivityCompat;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.content.ContextCompat;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;

import com.baidu.speech.EventListener;
import com.baidu.speech.EventManager;
import com.baidu.speech.EventManagerFactory;
import com.baidu.speech.asr.SpeechConstant;
import com.dzx.Constants;
import com.dzx.R;

import org.json.JSONObject;

import java.util.ArrayList;

import java.util.LinkedHashMap;
import java.util.Map;

/**
 * Created by 杜卓轩 on 2018/2/28.
 */

//public class FragmentTwo extends BaseFragment {
   /* public static FragmentTwo newInstance(String s){
    Bundle bundle = new Bundle();
    bundle.putString(Constants.KEY_ARGS,s);
    FragmentTwo fragment = new FragmentTwo();
    fragment.setArguments(bundle);
    return fragment;
}*/
public class FragmentTwo extends Fragment implements EventListener{
    protected TextView txtLog;
    protected TextView txtResult;
    protected Button btn;
    protected Button stopBtn;
    private static String DESC_TEXT = "精简版识别，带有SDK唤醒运行的最少代码，仅仅展示如何调用，\n" +
            "也可以用来反馈测试SDK输入参数及输出回调。\n" +
            "本示例需要自行根据文档填写参数，可以使用之前识别示例中的日志中的参数。\n" +
            "需要完整版请参见之前的识别示例。\n" +
            "需要测试离线命令词识别功能可以将本类中的enableOffline改成true，首次测试离线命令词请联网使用。之后请说出“打电话给张三”";

    private EventManager asr;

    private boolean logTime = true;

    private boolean enableOffline = false; // 测试离线命令词，需要改成true

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View rootView = inflater.inflate(R.layout.fragment_2, container, false);


       // super.onCreate(savedInstanceState);


        initView(rootView);
        initPermission();
        asr = EventManagerFactory.create(getActivity(), "asr");
        asr.registerListener(this); //  EventListener 中 onEvent方法
        btn.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                start();
            }
        });
        stopBtn.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                stop();
            }
        });
        if (enableOffline) {
            loadOfflineEngine(); // 测试离线命令词请开启, 测试 ASR_OFFLINE_ENGINE_GRAMMER_FILE_PATH 参数时开启
        }
        return rootView;
    }

    /**
     * 测试参数填在这里
     */
    private void start() {
        txtLog.setText("");
        Map<String, Object> params = new LinkedHashMap<String, Object>();
        String event = null;
        event = SpeechConstant.ASR_START; // 替换成测试的event

        if (enableOffline) {
            params.put(SpeechConstant.DECODER, 2);
        }
        params.put(SpeechConstant.ACCEPT_AUDIO_VOLUME, false);
        // params.put(SpeechConstant.NLU, "enable");
        // params.put(SpeechConstant.VAD_ENDPOINT_TIMEOUT, 0); // 长语音
        // params.put(SpeechConstant.IN_FILE, "res:///com/baidu/android/voicedemo/16k_test.pcm");
        // params.put(SpeechConstant.VAD, SpeechConstant.VAD_DNN);
        // params.put(SpeechConstant.PROP ,20000);
        // params.put(SpeechConstant.PID, 1537); // 中文输入法模型，有逗号
        // 请先使用如‘在线识别’界面测试和生成识别参数。 params同ActivityRecog类中myRecognizer.start(params);
        String json = null; // 可以替换成自己的json
        json = new JSONObject(params).toString(); // 这里可以替换成你需要测试的json
        asr.send(event, json, null, 0, 0);
        printLog("输入参数：" + json);
    }

    private void stop() {
        printLog("停止识别：ASR_STOP");
        asr.send(SpeechConstant.ASR_STOP, null, null, 0, 0); //
    }

    private void loadOfflineEngine() {
        Map<String, Object> params = new LinkedHashMap<String, Object>();
        params.put(SpeechConstant.DECODER, 2);
        params.put(SpeechConstant.ASR_OFFLINE_ENGINE_GRAMMER_FILE_PATH, "assets://baidu_speech_grammar.bsg");
        asr.send(SpeechConstant.ASR_KWS_LOAD_ENGINE, new JSONObject(params).toString(), null, 0, 0);
    }

    private void unloadOfflineEngine() {
        asr.send(SpeechConstant.ASR_KWS_UNLOAD_ENGINE, null, null, 0, 0); //
    }



    @Override
    public void onDestroy() {
        super.onDestroy();
        asr.send(SpeechConstant.ASR_CANCEL, "{}", null, 0, 0);
        if (enableOffline) {
            unloadOfflineEngine(); // 测试离线命令词请开启, 测试 ASR_OFFLINE_ENGINE_GRAMMER_FILE_PATH 参数时开启
        }
    }

    //   EventListener  回调方法
    @Override
    public void onEvent(String name, String params, byte[] data, int offset, int length) {
        String logTxt = "name: " + name;


        if (params != null && !params.isEmpty()) {
            logTxt += " ;params :" + params;
        }
        if (name.equals(SpeechConstant.CALLBACK_EVENT_ASR_PARTIAL)) {
            if (params.contains("\"nlu_result\"")) {
                if (length > 0 && data.length > 0) {
                    logTxt += ", 语义解析结果：" + new String(data, offset, length);
                }
            }
        } else if (data != null) {
            logTxt += " ;data length=" + data.length;
        }
        printLog(logTxt);
    }

    private void printLog(String text) {
        if (logTime) {
            text += "  ;time=" + System.currentTimeMillis();
        }
        text += "\n";
        Log.i(getClass().getName(), text);
        txtLog.append(text + "\n");
    }


    private void initView(View rootView) {
        txtResult = (TextView) rootView.findViewById(R.id.txtResult);
        txtLog = (TextView) rootView.findViewById(R.id.txtLog);
        btn = (Button) rootView.findViewById(R.id.btn);
       // stopBtn = (Button) rootView.findViewById(R.id.btn_stop);
        txtLog.setText(DESC_TEXT + "\n");
    }

    /**
     * android 6.0 以上需要动态申请权限
     */
    private void initPermission() {
        String permissions[] = {Manifest.permission.RECORD_AUDIO,
                Manifest.permission.ACCESS_NETWORK_STATE,
                Manifest.permission.INTERNET,
                Manifest.permission.READ_PHONE_STATE,
                Manifest.permission.WRITE_EXTERNAL_STORAGE
        };

        ArrayList<String> toApplyList = new ArrayList<String>();

        for (String perm : permissions) {
            if (PackageManager.PERMISSION_GRANTED != ContextCompat.checkSelfPermission(getActivity(), perm)) {
                toApplyList.add(perm);
                // 进入到这里代表没有权限.

            }
        }
        String tmpList[] = new String[toApplyList.size()];
        if (!toApplyList.isEmpty()) {
            ActivityCompat.requestPermissions(getActivity(), toApplyList.toArray(tmpList), 123);
        }

    }

    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        // 此处为android 6.0以上动态授权的回调，用户自行实现。
    }

}

package com.dzx.Recognization.online;


import java.util.ArrayList;



public class ChainRecogListener implements IRecogListener {

    private ArrayList<IRecogListener> listeners;

    public ChainRecogListener() {
        listeners = new ArrayList<IRecogListener>();
    }

    public void addListener(IRecogListener listener) {
        listeners.add(listener);
    }

    /**
     * ASR_START 输入事件调用后，引擎准备完毕
     */
    @Override
    public void onAsrReady() {
        for (IRecogListener listener : listeners) {
            listener.onAsrReady();
        }
    }

    /**
     * onAsrReady后检查到用户开始说话
     */
    @Override
    public void onAsrBegin() {
        for (IRecogListener listener : listeners) {
            listener.onAsrBegin();
        }
    }

    /**
     * 检查到用户开始说话停止，或者ASR_STOP 输入事件调用后，
     */
    @Override
    public void onAsrEnd() {
        for (IRecogListener listener : listeners) {
            listener.onAsrEnd();
        }
    }

    /**
     * onAsrBegin 后 随着用户的说话，返回的临时结果
     *
     * @param results     可能返回多个结果，请取第一个结果
     * @param recogResult 完整的结果
     */
    @Override
    public void onAsrPartialResult(String[] results, RecogResult recogResult) {
        for (IRecogListener listener : listeners) {
            listener.onAsrPartialResult(results, recogResult);
        }
    }

    /**
     * 最终的识别结果
     *
     * @param results     可能返回多个结果，请取第一个结果
     * @param recogResult 完整的结果
     */
    @Override
    public void onAsrFinalResult(String[] results, RecogResult recogResult) {
        for (IRecogListener listener : listeners) {
            listener.onAsrFinalResult(results, recogResult);
        }
    }

    @Override
    public void onAsrFinish(RecogResult recogResult) {
        for (IRecogListener listener : listeners) {
            listener.onAsrFinish(recogResult);
        }
    }

    @Override
    public void onAsrFinishError(int errorCode, int subErrorCode, String errorMessage, String descMessage,
                                 RecogResult recogResult) {
        for (IRecogListener listener : listeners) {
            listener.onAsrFinishError(errorCode, subErrorCode, errorMessage, descMessage, recogResult);
        }
    }

    /**
     * 长语音识别结束
     */
    @Override
    public void onAsrLongFinish() {
        for (IRecogListener listener : listeners) {
            listener.onAsrLongFinish();
        }
    }

    @Override
    public void onAsrVolume(int volumePercent, int volume) {
        for (IRecogListener listener : listeners) {
            listener.onAsrVolume(volumePercent, volume);
        }
    }

    @Override
    public void onAsrAudio(byte[] data, int offset, int length) {
        for (IRecogListener listener : listeners) {
            listener.onAsrAudio(data, offset, length);
        }
    }

    @Override
    public void onAsrExit() {
        for (IRecogListener listener : listeners) {
            listener.onAsrExit();
        }
    }

    @Override
    public void onAsrOnlineNluResult(String nluResult) {
        for (IRecogListener listener : listeners) {
            listener.onAsrOnlineNluResult(nluResult);
        }
    }

    @Override
    public void onOfflineLoaded() {
        for (IRecogListener listener : listeners) {
            listener.onOfflineLoaded();
        }
    }

    @Override
    public void onOfflineUnLoaded() {
        for (IRecogListener listener : listeners) {
            listener.onOfflineUnLoaded();
        }
    }
}
package com.dzx.Recognization.online;

import android.app.Activity;
import android.content.SharedPreferences;
import android.os.Environment;

import com.dzx.util.FileUtil;
import com.dzx.util.Logger;
import com.baidu.speech.asr.SpeechConstant;
import com.dzx.R;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;


public class CommonRecogParams {

    protected String samplePath;
    /**
     * 字符串格式的参数
     */
    protected ArrayList<String> stringParams = new ArrayList<String>();

    /**
     * int格式的参数
     */
    protected ArrayList<String> intParams = new ArrayList<String>();

    /**
     * bool格式的参数
     */
    protected ArrayList<String> boolParams = new ArrayList<String>();

    private static final String TAG = "CommonRecogParams";

    public CommonRecogParams(Activity context) {

        stringParams.addAll(Arrays.asList(
                SpeechConstant.VAD,
                SpeechConstant.IN_FILE
        ));
        intParams.addAll(Arrays.asList(
                SpeechConstant.VAD_ENDPOINT_TIMEOUT
        ));
        boolParams.addAll(Arrays.asList(
                SpeechConstant.ACCEPT_AUDIO_DATA,
                SpeechConstant.ACCEPT_AUDIO_VOLUME
        ));
        initSamplePath(context);
    }

    /**
     * 创建保存OUTFILE的临时目录. 仅用于OUTFILE参数。不使用demo中的OUTFILE参数可忽略此段
     *
     * @param context
     */
    protected void initSamplePath(Activity context) {
        String sampleDir = "baiduASR";
        samplePath = Environment.getExternalStorageDirectory().toString() + "/" + sampleDir;
        if (!FileUtil.makeDir(samplePath)) {
            samplePath = context.getApplication().getExternalFilesDir(sampleDir).getAbsolutePath();
            if (!FileUtil.makeDir(samplePath)) {
                throw new RuntimeException("创建临时目录失败 :" + samplePath);
            }
        }
    }

    public Map<String, Object> fetch(SharedPreferences sp) {
        Map<String, Object> map = new HashMap<String, Object>();

        parseParamArr(sp, map);

      /*  if (sp.getBoolean("_tips_sound", false)) { // 声音回调
            map.put(SpeechConstant.SOUND_START, R.raw.bdspeech_recognition_start);
            map.put(SpeechConstant.SOUND_END, R.raw.bdspeech_speech_end);
            map.put(SpeechConstant.SOUND_SUCCESS, R.raw.bdspeech_recognition_success);
            map.put(SpeechConstant.SOUND_ERROR, R.raw.bdspeech_recognition_error);
            map.put(SpeechConstant.SOUND_CANCEL, R.raw.bdspeech_recognition_cancel);
        }
*/
        if (sp.getBoolean("_outfile", false)) { // 保存录音文件
            map.put(SpeechConstant.ACCEPT_AUDIO_DATA, true); // 目前必须开启此回掉才嫩保存音频
            map.put(SpeechConstant.OUT_FILE, samplePath + "/outfile.pcm");
            Logger.info(TAG, "语音录音文件将保存在：" + samplePath + "/outfile.pcm");
        }

        return map;
    }

    /**
     * 根据 stringParams intParams boolParams中定义的参数名称，提取SharedPreferences相关字段
     *
     * @param sp
     * @param map
     */
    private void parseParamArr(SharedPreferences sp, Map<String, Object> map) {
        for (String name : stringParams) {
            if (sp.contains(name)) {
                String tmp = sp.getString(name, "").replaceAll(",.*", "").trim();
                if (null != tmp && !"".equals(tmp)) {
                    map.put(name, tmp);
                }
            }
        }
        for (String name : intParams) {
            if (sp.contains(name)) {
                String tmp = sp.getString(name, "").replaceAll(",.*", "").trim();
                if (null != tmp && !"".equals(tmp)) {
                    map.put(name, Integer.parseInt(tmp));
                }
            }
        }
        for (String name : boolParams) {
            if (sp.contains(name)) {
                map.put(name, sp.getBoolean(name, false));
            }
        }
    }
}

package com.dzx.Recognization.online;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;

/**
 * <p>
 * 解决大文件的输入问题。
 */

public class FileAudioInputStream extends InputStream {

    private InputStream in;

    public static final float SPEED = 2;

    public FileAudioInputStream(String file) throws FileNotFoundException {
        in = new FileInputStream(file);
    }

    public FileAudioInputStream(InputStream in) {
        this.in = in;
    }

    private long firstRead = -1;
    private long returnCount;

    @Override
    public int read() throws IOException {
        throw new UnsupportedOperationException();
    }

    @Override
    public int read(byte[] buffer, int byteOffset, int byteCount) throws IOException {
        if (firstRead == -1) {
            firstRead = System.currentTimeMillis();
        }
        long limit = (long) ((System.currentTimeMillis() - firstRead) * 32 * SPEED);
        long count = Math.min((limit - returnCount), byteCount);
        if (count <= 0) {
            try {
                Thread.sleep(1);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            return 0;
        } else {
            int r = in.read(buffer, byteOffset, (int) count);
            if (r >= 0) {
                returnCount += r;
            }
            return r;
        }
    }

    @Override
    public void close() throws IOException {
        super.close();
        if (null != in) {
            in.close();
        }
    }
}
package com.dzx.Recognization.online;

import android.app.Activity;

import com.dzx.util.Logger;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;

/**

 */

public class InFileStream {

    private static Activity context;

    private static final String TAG = "InFileStream";

    public static void setContext(Activity context) {
        InFileStream.context = context;
    }

    private static String filename;

    private static InputStream is;

    public static void reset() {
        filename = null;
        is = null;
    }

    public static void setFileName(String filename) {
        InFileStream.filename = filename;
    }

    public static void setInputStream(InputStream is2) {
        is = is2;
    }

    public static InputStream create16kStream() {
        if (is != null) {
            return new FileAudioInputStream(is);
        } else if (filename != null) {
            try {
                return new FileAudioInputStream(filename);
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        } else {
            return new FileAudioInputStream(createFileStream());
        }
        return null;
    }

    private static InputStream createFileStream() {
        InputStream res = null;
        try {
            InputStream is = context.getAssets().open("outfile.pcm");
            Logger.info(TAG, "create input stream ok " + is.available());
            res = new FileAudioInputStream(is);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return res;
    }
}package com.dzx.Recognization.online;

import android.app.Activity;

import com.dzx.util.Logger;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;

/**

 */

public class InFileStream {

    private static Activity context;

    private static final String TAG = "InFileStream";

    public static void setContext(Activity context) {
        InFileStream.context = context;
    }

    private static String filename;

    private static InputStream is;

    public static void reset() {
        filename = null;
        is = null;
    }

    public static void setFileName(String filename) {
        InFileStream.filename = filename;
    }

    public static void setInputStream(InputStream is2) {
        is = is2;
    }

    public static InputStream create16kStream() {
        if (is != null) {
            return new FileAudioInputStream(is);
        } else if (filename != null) {
            try {
                return new FileAudioInputStream(filename);
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        } else {
            return new FileAudioInputStream(createFileStream());
        }
        return null;
    }

    private static InputStream createFileStream() {
        InputStream res = null;
        try {
            InputStream is = context.getAssets().open("outfile.pcm");
            Logger.info(TAG, "create input stream ok " + is.available());
            res = new FileAudioInputStream(is);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return res;
    }
}package com.dzx.Recognization.online;

import android.os.Handler;
import android.os.Message;

/**

 */

public class MessageStatusRecogListener extends StatusRecogListener {
    private Handler handler;

    private long speechEndTime;

    private boolean needTime = true;

    public MessageStatusRecogListener(Handler handler) {
        this.handler = handler;
    }


    @Override
    public void onAsrReady() {
        super.onAsrReady();
        sendStatusMessage("引擎就绪，可以开始说话。");
    }

    @Override
    public void onAsrBegin() {
        super.onAsrBegin();
        sendStatusMessage("检测到用户说话");
    }

    @Override
    public void onAsrEnd() {
        super.onAsrEnd();
        speechEndTime = System.currentTimeMillis();
        //sendMessage("检测到用户说话结束");
    }

    @Override
    public void onAsrPartialResult(String[] results, RecogResult recogResult) {
        sendStatusMessage("临时识别结果，结果是“" + results[0] + "”；原始json：" + recogResult.getOrigalJson());
        super.onAsrPartialResult(results, recogResult);
    }

    @Override
    public void onAsrFinalResult(String[] results, RecogResult recogResult) {
        super.onAsrFinalResult(results, recogResult);
        //String message = "识别结束，结果是”" + results[0] + "”";
        String message =  results[0] ;
        sendStatusMessage(message + "“；原始json：" + recogResult.getOrigalJson());
        if (speechEndTime > 0) {
            long diffTime = System.currentTimeMillis() - speechEndTime;
            //message += "；说话结束到识别结束耗时【" + diffTime + "ms】";

        }
        speechEndTime = 0;
        sendMessage(message, status, true);
    }

    @Override
    public void onAsrFinishError(int errorCode, int subErrorCode, String errorMessage, String descMessage,
                                 RecogResult recogResult) {
        super.onAsrFinishError(errorCode, subErrorCode, errorMessage, descMessage, recogResult);
        String message = "";
        sendStatusMessage(message + "；错误消息:" + errorMessage + "；描述信息：" + descMessage);
        if (speechEndTime > 0) {
            long diffTime = System.currentTimeMillis() - speechEndTime;
            //message += "。说话结束到识别结束耗时【" + diffTime + "ms】";
        }
        speechEndTime = 0;
        sendMessage(message, status, true);
        speechEndTime = 0;
    }

    @Override
    public void onAsrOnlineNluResult(String nluResult) {
        super.onAsrOnlineNluResult(nluResult);
        if (!nluResult.isEmpty()) {
            sendStatusMessage("原始语义识别结果json：" + nluResult);
        }
    }

    @Override
    public void onAsrFinish(RecogResult recogResult) {
        super.onAsrFinish(recogResult);
        sendStatusMessage("识别一段话结束。如果是长语音的情况会继续识别下段话。");

    }

    /**
     * 长语音识别结束
     */
    @Override
    public void onAsrLongFinish() {
        super.onAsrLongFinish();
        sendStatusMessage("长语音识别结束。");
    }


    /**
     * 使用离线命令词时，有该回调说明离线语法资源加载成功
     */
    @Override
    public void onOfflineLoaded() {
        sendStatusMessage("【重要】asr.loaded：离线资源加载成功。没有此回调可能离线语法功能不能使用。");
    }

    /**
     * 使用离线命令词时，有该回调说明离线语法资源加载成功
     */
    @Override
    public void onOfflineUnLoaded() {
        sendStatusMessage(" 离线资源卸载成功。");
    }

    @Override
    public void onAsrExit() {
        super.onAsrExit();
        sendStatusMessage("识别引擎结束并空闲中");
    }

    private void sendStatusMessage(String message) {
        sendMessage(message, status);
    }

    private void sendMessage(String message) {
        sendMessage(message, WHAT_MESSAGE_STATUS);
    }

    private void sendMessage(String message, int what) {
        sendMessage(message, what, false);
    }


    private void sendMessage(String message, int what, boolean highlight) {
        if (needTime && what != STATUS_FINISHED) {
            message += "  ;time=" + System.currentTimeMillis();
        }
        Message msg = Message.obtain();
        msg.what = what;
        msg.arg1 = status;
        if (highlight) {
            msg.arg2 = 1;
        }
        //msg.obj = message + "\n";
        msg.obj=message;
        handler.sendMessage(msg);
    }
}
package com.dzx.Recognization.online;

import android.media.AudioFormat;
import android.media.AudioRecord;
import android.media.MediaRecorder;
import android.support.annotation.NonNull;
import android.util.Log;

import java.io.IOException;
import java.io.InputStream;

/**

 */

public class MicrophoneInputStream extends InputStream {
    private static AudioRecord audioRecord;

    private static MicrophoneInputStream is;

    private boolean isStarted = false;

    private static final String TAG = "MicrophoneInputStream";

    public MicrophoneInputStream() {

        if (audioRecord != null) {
            int bufferSize = AudioRecord.getMinBufferSize(16000,
                    AudioFormat.CHANNEL_CONFIGURATION_MONO, AudioFormat.ENCODING_PCM_16BIT) * 16;
            audioRecord = new AudioRecord(MediaRecorder.AudioSource.MIC,
                    16000, AudioFormat.CHANNEL_CONFIGURATION_MONO, AudioFormat.ENCODING_PCM_16BIT, bufferSize);
        }


    }

    public static MicrophoneInputStream getInstance() {

        if (is == null) {
            synchronized (MicrophoneInputStream.class) {
                if (is == null) {
                    is = new MicrophoneInputStream();
                }
            }
        }
        return is;
    }

    public void start() {
        Log.i(TAG, " MicrophoneInputStream start recoding");
        if (audioRecord == null
                || audioRecord.getState() != AudioRecord.STATE_INITIALIZED) {
            throw new IllegalStateException(
                    "startRecording() called on an uninitialized AudioRecord.");
        }
        audioRecord.startRecording();
    }

    @Override
    public int read() throws IOException {
        throw new UnsupportedOperationException();
    }

    @Override
    public int read(@NonNull byte[] b, int off, int len) throws IOException {
        if (!isStarted) {
            start(); // 建议在CALLBACK_EVENT_ASR_READY事件中调用。
            isStarted = true;
        }
        int count = audioRecord.read(b, off, len);
        // Log.i(TAG, " MicrophoneInputStream read count:" + count);
        return count;
    }

    @Override
    public void close() throws IOException {
        Log.i(TAG, " MicrophoneInputStream close");
        if (audioRecord != null) {
            audioRecord.stop();
            audioRecord.release();
            isStarted = false;
        }
    }
}
package com.dzx.Recognization.online;

import android.media.AudioFormat;
import android.media.AudioRecord;
import android.media.MediaRecorder;
import android.support.annotation.NonNull;
import android.util.Log;

import java.io.IOException;
import java.io.InputStream;

/**

 */

public class MicrophoneInputStream extends InputStream {
    private static AudioRecord audioRecord;

    private static MicrophoneInputStream is;

    private boolean isStarted = false;

    private static final String TAG = "MicrophoneInputStream";

    public MicrophoneInputStream() {

        if (audioRecord != null) {
            int bufferSize = AudioRecord.getMinBufferSize(16000,
                    AudioFormat.CHANNEL_CONFIGURATION_MONO, AudioFormat.ENCODING_PCM_16BIT) * 16;
            audioRecord = new AudioRecord(MediaRecorder.AudioSource.MIC,
                    16000, AudioFormat.CHANNEL_CONFIGURATION_MONO, AudioFormat.ENCODING_PCM_16BIT, bufferSize);
        }


    }

    public static MicrophoneInputStream getInstance() {

        if (is == null) {
            synchronized (MicrophoneInputStream.class) {
                if (is == null) {
                    is = new MicrophoneInputStream();
                }
            }
        }
        return is;
    }

    public void start() {
        Log.i(TAG, " MicrophoneInputStream start recoding");
        if (audioRecord == null
                || audioRecord.getState() != AudioRecord.STATE_INITIALIZED) {
            throw new IllegalStateException(
                    "startRecording() called on an uninitialized AudioRecord.");
        }
        audioRecord.startRecording();
    }

    @Override
    public int read() throws IOException {
        throw new UnsupportedOperationException();
    }

    @Override
    public int read(@NonNull byte[] b, int off, int len) throws IOException {
        if (!isStarted) {
            start(); // 建议在CALLBACK_EVENT_ASR_READY事件中调用。
            isStarted = true;
        }
        int count = audioRecord.read(b, off, len);
        // Log.i(TAG, " MicrophoneInputStream read count:" + count);
        return count;
    }

    @Override
    public void close() throws IOException {
        Log.i(TAG, " MicrophoneInputStream close");
        if (audioRecord != null) {
            audioRecord.stop();
            audioRecord.release();
            isStarted = false;
        }
    }
}
package com.dzx.Recognization.online;

import android.app.Activity;
import android.content.SharedPreferences;



import com.baidu.speech.asr.SpeechConstant;

import java.util.Arrays;
import java.util.Map;




public class OnlineRecogParams extends CommonRecogParams {


    private static final String TAG = "OnlineRecogParams";

    public OnlineRecogParams(Activity context) {
        super(context);

        stringParams.addAll(Arrays.asList(
                "_language", // 用于生成PID参数
                "_model" // 用于生成PID参数
        ));

        intParams.addAll(Arrays.asList(SpeechConstant.PROP));

        boolParams.addAll(Arrays.asList(SpeechConstant.DISABLE_PUNCTUATION));

    }


    public Map<String, Object> fetch(SharedPreferences sp) {
        Map<String, Object> map = super.fetch(sp);
        PidBuilder builder = new PidBuilder();
        map = builder.addPidInfo(map); // 生成PID， PID 网络在线有效
        return map;

    }

}
package com.dzx.Recognization.online;

import com.baidu.speech.asr.SpeechConstant;

import java.util.HashMap;
import java.util.Map;

/**
 * 根据语言， 搜索模型或输入法模型和是否需要语义功能 生成对应PID

 */

public class PidBuilder {

    public static final String PUDONGHUA = "cmn-Hans-CN";

    public static final String ENGLISH = "en-GB";

    public static final String SICHUAN = "sichuan-Hans-CN";

    public static final String YUEYU = "yue-Hans-CN";

    public static final String SEARCH = "search";

    public static final String INPUT = "input";

    public static final String FAR = "far";

    private static Map<String, Integer> map;

    private String language = PUDONGHUA;

    private String model = SEARCH;

    private boolean supportNlu = false;

    private boolean emptyParams = false;

    static {
        map = new HashMap<String, Integer>(16);
        createPid(1536, PUDONGHUA, SEARCH, false);
        createPid(15361, PUDONGHUA, SEARCH, true);
        createPid(1537, PUDONGHUA, INPUT, false);
        createPid(1736, ENGLISH, SEARCH, false);
        createPid(1737, ENGLISH, INPUT, false);
        createPid(1636, YUEYU, SEARCH, false);
        createPid(1637, YUEYU, INPUT, false);
        createPid(1836, SICHUAN, SEARCH, false);
        createPid(1837, SICHUAN, INPUT, false);
        createPid(1936, PUDONGHUA, FAR, false);
        createPid(1936, PUDONGHUA, FAR, true);
    }

    public static PidBuilder create() {
        return new PidBuilder();
    }

    /**
     * 从 params中 根据_language _model和_nlu_online这三个临时参数，输出PID并加入到params中。
     *
     * @param params
     * @return
     */
    public Map<String, Object> addPidInfo(Map<String, Object> params) {
        if (params != null) {
            Object lang = params.get("_language");
            params.remove("_language");
            Object onlineModel = params.get("_model");
            params.remove("_model");
            Object nlu = params.get("_nlu_online");
            params.remove("_nlu_online");
            if (lang == null && onlineModel == null && nlu == null) {
                emptyParams = true;
            } else {
                if (lang != null) {
                    language(String.valueOf(lang));
                }
                if (onlineModel != null) {
                    model(String.valueOf(onlineModel));
                }
                if (nlu != null) {
                    supportNlu(Boolean.valueOf(nlu.toString()));
                }
            }
            int pid = toPId();
            if (pid > 0) {
                params.put(SpeechConstant.PID, pid);
            }
        }

        return params;
    }

    /**
     * 返回负数的话，即没有生成PID成功，请不要设置
     *
     * @return -1 没对应pid
     * -2  用于使用 PidBuilder(params), params为空或者没有相关选项用于确定PID
     */
    public int toPId() {
        if (emptyParams) { // 用于 PidBuilder(Map<String,Object> params)
            return -2;
        }

        String key = language + "_" + model + "_" + (supportNlu ? 1 : 0);
        Integer result = map.get(key);
        if (result == null) {
            return -1;
        } else {
            return result;
        }
    }

    /**
     * 语言
     *
     * @param language
     * @return
     */
    public PidBuilder language(String language) {
        this.language = language;
        emptyParams = false;
        return this;
    }

    /**
     * 输入法模型或者搜索模型
     *
     * @param model
     * @return
     */
    public PidBuilder model(String model) {
        this.model = model;
        emptyParams = false;
        return this;
    }

    /**
     * 是否开启语义识别
     *
     * @param supportNlu
     * @return
     */
    public PidBuilder supportNlu(boolean supportNlu) {
        this.supportNlu = supportNlu;
        emptyParams = false;
        return this;
    }

    private static void createPid(int pid, String lang, String onlineModel, boolean nlu) {
        String key = lang + "_" + onlineModel + "_" + (nlu ? 1 : 0);
        map.put(key, pid);
    }
}
package com.dzx.Recognization.online;

import android.util.Log;

import com.dzx.control.ErrorTranslation;
import com.dzx.util.Logger;
import com.baidu.speech.EventListener;
import com.baidu.speech.asr.SpeechConstant;

import org.json.JSONException;
import org.json.JSONObject;




public class RecogEventAdapter implements EventListener {

    private static final String TAG = "RecogEventAdapter";


    private IRecogListener listener;

    public RecogEventAdapter(IRecogListener listener) {
        this.listener = listener;
    }

    protected String currentJson;

    @Override
    public void onEvent(String name, String params, byte[] data, int offset, int length) {
        currentJson = params;
        String logMessage = "name:" + name + "; params:" + params;

        // logcat 中 搜索RecogEventAdapter，即可以看见下面一行的日志
        Log.i(TAG, logMessage);
        if (false) { // 可以调试，不需要后续逻辑
            return;
        }
        if (name.equals(SpeechConstant.CALLBACK_EVENT_ASR_LOADED)) {
            listener.onOfflineLoaded();
        } else if (name.equals(SpeechConstant.CALLBACK_EVENT_ASR_UNLOADED)) {
            listener.onOfflineUnLoaded();
        } else if (name.equals(SpeechConstant.CALLBACK_EVENT_ASR_READY)) {
            // 引擎准备就绪，可以开始说话
            listener.onAsrReady();

        } else if (name.equals(SpeechConstant.CALLBACK_EVENT_ASR_BEGIN)) {
            // 检测到用户的已经开始说话
            listener.onAsrBegin();

        } else if (name.equals(SpeechConstant.CALLBACK_EVENT_ASR_END)) {
            // 检测到用户的已经停止说话
            listener.onAsrEnd();

        } else if (name.equals(SpeechConstant.CALLBACK_EVENT_ASR_PARTIAL)) {
            RecogResult recogResult = RecogResult.parseJson(params);
            // 临时识别结果, 长语音模式需要从此消息中取出结果
            String[] results = recogResult.getResultsRecognition();
            if (recogResult.isFinalResult()) {
                listener.onAsrFinalResult(results, recogResult);
            } else if (recogResult.isPartialResult()) {
                listener.onAsrPartialResult(results, recogResult);
            } else if (recogResult.isNluResult()) {
                listener.onAsrOnlineNluResult(new String(data, offset, length));
            }

        } else if (name.equals(SpeechConstant.CALLBACK_EVENT_ASR_FINISH)) {
            // 识别结束， 最终识别结果或可能的错误
            RecogResult recogResult = RecogResult.parseJson(params);
            if (recogResult.hasError()) {
                int errorCode = recogResult.getError();
                int subErrorCode = recogResult.getSubError();
                Logger.error(TAG, "asr error:" + params);
                listener.onAsrFinishError(errorCode, subErrorCode, ErrorTranslation.recogError(errorCode), recogResult.getDesc(), recogResult);
            } else {
                listener.onAsrFinish(recogResult);
            }

        } else if (name.equals(SpeechConstant.CALLBACK_EVENT_ASR_LONG_SPEECH)) { //长语音
            listener.onAsrLongFinish();// 长语音
        } else if (name.equals(SpeechConstant.CALLBACK_EVENT_ASR_EXIT)) {
            listener.onAsrExit();
        } else if (name.equals(SpeechConstant.CALLBACK_EVENT_ASR_VOLUME)) {
            // Logger.info(TAG, "asr volume event:" + params);
            Volume vol = parseVolumeJson(params);
            listener.onAsrVolume(vol.volumePercent, vol.volume);
        } else if (name.equals(SpeechConstant.CALLBACK_EVENT_ASR_AUDIO)) {
            if (data.length != length) {
                Logger.error(TAG, "internal error: asr.audio callback data length is not equal to length param");
            }
            listener.onAsrAudio(data, offset, length);
        }
    }


    private Volume parseVolumeJson(String jsonStr) {
        Volume vol = new Volume();
        vol.origalJson = jsonStr;
        try {
            JSONObject json = new JSONObject(jsonStr);
            vol.volumePercent = json.getInt("volume-percent");
            vol.volume = json.getInt("volume");
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return vol;
    }

    private class Volume {
        private int volumePercent = -1;
        private int volume = -1;
        private String origalJson;
    }

}
package com.dzx.Recognization.online;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/**

 */
public class RecogResult {
    private static final int ERROR_NONE = 0;

    private String origalJson;
    private String[] resultsRecognition;
    private String origalResult;
    private String sn; // 日志id， 请求有问题请提问带上sn
    private String desc;
    private String resultType;
    private int error = -1;
    private int subError = -1;

    public static RecogResult parseJson(String jsonStr) {
        RecogResult result = new RecogResult();
        result.setOrigalJson(jsonStr);
        try {
            JSONObject json = new JSONObject(jsonStr);
            int error = json.optInt("error");
            int subError = json.optInt("sub_error");
            result.setError(error);
            result.setDesc(json.optString("desc"));
            result.setResultType(json.optString("result_type"));
            if (error == ERROR_NONE) {
                result.setOrigalResult(json.getString("origin_result"));
                JSONArray arr = json.optJSONArray("results_recognition");
                if (arr != null) {
                    int size = arr.length();
                    String[] recogs = new String[size];
                    for (int i = 0; i < size; i++) {
                        recogs[i] = arr.getString(i);
                    }
                    result.setResultsRecognition(recogs);
                }


            }
        } catch (JSONException e) {
            e.printStackTrace();
        }

        return result;
    }

    public boolean hasError() {
        return error != ERROR_NONE;
    }

    public boolean isFinalResult() {
        return "final_result".equals(resultType);
    }


    public boolean isPartialResult() {
        return "partial_result".equals(resultType);
    }

    public boolean isNluResult() {
        return "nlu_result".equals(resultType);
    }

    public String getOrigalJson() {
        return origalJson;
    }

    public void setOrigalJson(String origalJson) {
        this.origalJson = origalJson;
    }

    public String[] getResultsRecognition() {
        return resultsRecognition;
    }

    public void setResultsRecognition(String[] resultsRecognition) {
        this.resultsRecognition = resultsRecognition;
    }

    public String getSn() {
        return sn;
    }

    public void setSn(String sn) {
        this.sn = sn;
    }

    public int getError() {
        return error;
    }

    public void setError(int error) {
        this.error = error;
    }

    public String getDesc() {
        return desc;
    }

    public void setDesc(String desc) {
        this.desc = desc;
    }

    public String getOrigalResult() {
        return origalResult;
    }

    public void setOrigalResult(String origalResult) {
        this.origalResult = origalResult;
    }

    public String getResultType() {
        return resultType;
    }

    public void setResultType(String resultType) {
        this.resultType = resultType;
    }

    public int getSubError() {
        return subError;
    }

    public void setSubError(int subError) {
        this.subError = subError;
    }
}
package com.dzx.Recognization.online;

/**

 */

import android.util.Log;

public class StatusRecogListener implements IRecogListener, IStatus {

    private static final String TAG = "StatusRecogListener";

    /**
     * 识别的引擎当前的状态
     */
    protected int status = STATUS_NONE;

    @Override
    public void onAsrReady() {
        status = STATUS_READY;
    }

    @Override
    public void onAsrBegin() {
        status = STATUS_SPEAKING;
    }

    @Override
    public void onAsrEnd() {
        status = STATUS_RECOGNITION;
    }

    @Override
    public void onAsrPartialResult(String[] results, RecogResult recogResult) {


    }

    @Override
    public void onAsrFinalResult(String[] results, RecogResult recogResult) {
        status = STATUS_FINISHED;
    }

    @Override
    public void onAsrFinish(RecogResult recogResult) {
        status = STATUS_FINISHED;
    }


    @Override
    public void onAsrFinishError(int errorCode, int subErrorCode, String errorMessage, String descMessage,
                                 RecogResult recogResult) {
        status = STATUS_FINISHED;
    }

    /**
     * 长语音识别结束
     */
    @Override
    public void onAsrLongFinish() {
        status = STATUS_FINISHED;
    }

    @Override
    public void onAsrVolume(int volumePercent, int volume) {
        Log.i(TAG, "音量百分比" + volumePercent + " ; 音量" + volume);
    }

    @Override
    public void onAsrAudio(byte[] data, int offset, int length) {
        if (offset != 0 || data.length != length) {
            byte[] actualData = new byte[length];
            System.arraycopy(data, 0, actualData, 0, length);
            data = actualData;
        }

        Log.i(TAG, "音频数据回调, length:" + data.length);
    }

    @Override
    public void onAsrExit() {
        status = STATUS_NONE;
    }

    @Override
    public void onAsrOnlineNluResult(String nluResult) {
        status = STATUS_FINISHED;
    }

    @Override
    public void onOfflineLoaded() {

    }

    @Override
    public void onOfflineUnLoaded() {

    }


}
package com.dzx;


import android.content.Intent;
import android.os.Bundle;
import android.support.design.widget.FloatingActionButton;
import android.support.design.widget.Snackbar;

import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentTransaction;

import android.support.v4.view.ViewPager;
import android.view.View;
import android.support.design.widget.NavigationView;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.view.Menu;
import android.view.MenuItem;

import com.ashokvarma.bottomnavigation.BottomNavigationBar;
import com.ashokvarma.bottomnavigation.BottomNavigationItem;
import com.dzx.Setting.Setting_use;
import com.dzx.fragment.FragmentCommon;
import com.dzx.fragment.FragmentFour;
import com.dzx.fragment.FragmentOne;
import com.dzx.fragment.FragmentThree;
import com.dzx.fragment.FragmentTwo;
import com.dzx.Adapter.SectionsPagerAdapter;
import java.util.ArrayList;
import java.util.List;


public class MainActivity extends AppCompatActivity
        implements NavigationView.OnNavigationItemSelectedListener,
        BottomNavigationBar.OnTabSelectedListener,
        ViewPager.OnPageChangeListener{

    //之前出现的问题是因为没有实现全部的接口的抽象方法，我加上reselected和unselected之后就不报错了。
    private ViewPager viewPager;
    private BottomNavigationBar mBottomNavigationBar;
    private List<Fragment> fragments;
    private MenuItem menuItem;
  //  private FragmentOne mFragmentOne;
   // private FragmentTwo mFragmentTwo;
  //  private FragmentThree mFragmentThree;
  //  private FragmentFour mFragmentFour;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        initView();

        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        //FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);
        /*fab.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Snackbar.make(view, "Replace with your own action", Snackbar.LENGTH_LONG)
                        .setAction("Action", null).show();
            }

        });*/

        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(
                this, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);
        drawer.addDrawerListener(toggle);
        toggle.syncState();

        NavigationView navigationView = (NavigationView) findViewById(R.id.nav_view);
        navigationView.setNavigationItemSelectedListener(this);

    }



    @Override
    public void onBackPressed() {
        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        if (drawer.isDrawerOpen(GravityCompat.START)) {
            drawer.closeDrawer(GravityCompat.START);
        } else {
            super.onBackPressed();
        }
    }



    private void initView(){
        initBottomNavigationBar();
        initViewPager();
    }

    private void initBottomNavigationBar(){
        mBottomNavigationBar = (BottomNavigationBar) findViewById(R.id.bottom_navigation_bar);
        mBottomNavigationBar.setTabSelectedListener(this);
        mBottomNavigationBar.clearAll();
        mBottomNavigationBar.setMode(BottomNavigationBar.MODE_FIXED);
        mBottomNavigationBar.setBackgroundStyle(BottomNavigationBar.BACKGROUND_STYLE_STATIC);
//        mBottomNavigationBar.setBackgroundStyle(BottomNavigationBar.BACKGROUND_STYLE_RIPPLE);
        mBottomNavigationBar.setBarBackgroundColor(R.color.red);//set background color for navigation bar
        mBottomNavigationBar.setInActiveColor(R.color.gray);//unSelected icon color
        mBottomNavigationBar.addItem(new BottomNavigationItem(R.drawable.ic_tab3, "记录").setActiveColorResource(R.color.white))
                .addItem(new BottomNavigationItem(R.drawable.ic_tab2, "声音").setActiveColorResource(R.color.white))
                .addItem(new BottomNavigationItem(R.drawable.ic_tab1, "天气").setActiveColorResource(R.color.white))
                .addItem(new BottomNavigationItem(R.drawable.icon_four, "没想好").setActiveColorResource(R.color.white))
                //.setFirstSelectedPosition(0)
                .initialise();


        //setDefaultFragment();
    }


    private void initViewPager(){
        viewPager = (ViewPager) findViewById(R.id.viewPager);
        viewPager.setOffscreenPageLimit(3);
        fragments = new ArrayList<Fragment>();
        fragments.add(new FragmentOne());
        fragments.add(new Fragment());
        fragments.add(new FragmentThree());
        fragments.add(new FragmentFour());

        viewPager.setAdapter(new SectionsPagerAdapter(getSupportFragmentManager(), fragments));
        viewPager.addOnPageChangeListener(this);
        viewPager.setCurrentItem(0);

    }

    /*private void setDefaultFragment() {
        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
        mFragmentOne = FragmentOne.newInstance("First Fragment");
        transaction.replace(R.id.bottom_nav_content, mFragmentOne).commit();
        //第一个参数是将fragment动态添加到那个id布局里，第二个参数是添加哪个fragment
        //还有add方法，remove方法。
        //transaction.commit()是提交事务。
    }*/
    //@Override
    public void onTabSelected(int position) {
       /* FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
        switch (position) {
            case 0:
                if (mFragmentOne == null) {
                    mFragmentOne = FragmentOne.newInstance("First Fragment");
                }
                transaction.replace(R.id.bottom_nav_content, mFragmentOne);
                break;
            case 1:
                if (mFragmentTwo == null) {
                    mFragmentTwo = FragmentTwo.newInstance("Second Fragment");
                }
                transaction.replace(R.id.bottom_nav_content, mFragmentTwo);
                break;
            case 2:
                if (mFragmentThree == null) {
                    mFragmentThree = FragmentThree.newInstance("Third Fragment");
                }
                transaction.replace(R.id.bottom_nav_content, mFragmentThree);
                break;
            case 3:
                if (mFragmentFour == null) {
                    mFragmentFour = FragmentFour.newInstance("Forth Fragment");
                }
                transaction.replace(R.id.bottom_nav_content, mFragmentFour);
                break;
            default:
                if (mFragmentOne == null) {
                    mFragmentOne = FragmentOne.newInstance("First Fragment");
                }
                transaction.replace(R.id.bottom_nav_content, mFragmentOne);
                break;
        }
        transaction.commit();*/
        viewPager.setCurrentItem(position);
    }
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.main, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        if (id == R.id.action_settings) {
            return true;
        }

        return super.onOptionsItemSelected(item);
    }

    @SuppressWarnings("StatementWithEmptyBody")
    @Override
    public boolean onNavigationItemSelected(MenuItem menuItem) {
        // Handle navigation view item clicks here.
        int id = menuItem.getItemId();

        if (id == R.id.nav_camera) {
            // Handle the camera action
        } else if (id == R.id.nav_gallery) {

        } else if (id == R.id.nav_slideshow) {


        } else if (id == R.id.nav_manage) {
            Intent intent=new Intent(MainActivity.this, Setting_use.class);
            startActivity(intent);



        } else if (id == R.id.nav_share) {

        } else if (id == R.id.nav_send) {

        }

        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        drawer.closeDrawer(GravityCompat.START);
        return true;
    }

    @Override

    public void onTabReselected(int position) {

    }
    @Override

    public void onTabUnselected(int position) {

    }
    @Override

    public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {

    }
    @Override
    public void onPageSelected(int position) {
        mBottomNavigationBar.selectTab(position);
    }
    @Override

    public void onPageScrollStateChanged(int state) {

    }

}
package com.dzx.Activity;

import android.Manifest;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.os.StrictMode;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.AppCompatActivity;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;


import com.dzx.LinedEditText;
import com.dzx.R;
import com.dzx.Recognization.online.InFileStream;
import com.dzx.util.Logger;

import java.util.ArrayList;



public abstract class ActivityCommon extends AppCompatActivity {
   // protected TextView txtLog;
    //protected Button btn;
    cc.trity.floatingactionbutton.FloatingActionButton mAddDiaryFabVoice;
    protected Button setting;
    protected LinedEditText txtResult;

    protected Handler handler2;

    protected String descText;

    protected int layout = R.layout.activity_add_diary;

    protected Class settingActivityClass = null;

    protected boolean running = false;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        // setStrictMode();
        InFileStream.setContext(this);
        setContentView(layout);

        initView();
        handler2 = new Handler() {

            /*
             * @param msg
             */
            @Override
            public void handleMessage(Message msg) {
                super.handleMessage(msg);
                handleMsg(msg);
            }

        };
        Logger.setHandler(handler2);
        initPermission();
        initRecog();
    }


    protected abstract void initRecog();

    protected void handleMsg(Message msg) {
        //if (txtLog != null && msg.obj != null) {
            //txtLog.append(msg.obj.toString() + "\n");
        //}
    }

    protected void initView() {
        txtResult = (LinedEditText) findViewById(R.id.add_diary_et_content);
        mAddDiaryFabVoice=findViewById(R.id.add_diary_fab_voice);
        //txtLog = (TextView) findViewById(R.id.txtLog);
       // btn = (Button) findViewById(R.id.btn);

        //txtLog.setText(descText + "\n");
        if (setting != null && settingActivityClass != null) {
            setting.setOnClickListener(new View.OnClickListener() {

                @Override
                public void onClick(View v) {
                    running = true;
                    Intent intent = new Intent(ActivityCommon.this, settingActivityClass);
                    startActivityForResult(intent, 1);
                }
            });
        }

    }

    /**
     * android 6.0 以上需要动态申请权限
     */
    private void initPermission() {
        String[] permissions = {
                Manifest.permission.RECORD_AUDIO,
                Manifest.permission.ACCESS_NETWORK_STATE,
                Manifest.permission.INTERNET,
                Manifest.permission.READ_PHONE_STATE,
                Manifest.permission.WRITE_EXTERNAL_STORAGE
        };

        ArrayList<String> toApplyList = new ArrayList<String>();

        for (String perm : permissions) {
            if (PackageManager.PERMISSION_GRANTED != ContextCompat.checkSelfPermission(this, perm)) {
                toApplyList.add(perm);
                // 进入到这里代表没有权限.

            }
        }
        String[] tmpList = new String[toApplyList.size()];
        if (!toApplyList.isEmpty()) {
            ActivityCompat.requestPermissions(this, toApplyList.toArray(tmpList), 123);
        }

    }

    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        // 此处为android 6.0以上动态授权的回调，用户自行实现。
    }

    private void setStrictMode() {
        StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder()
                .detectAll()
                .penaltyLog()
                .build());
        StrictMode.setVmPolicy(new StrictMode.VmPolicy.Builder()
                .detectLeakedSqlLiteObjects()
                .detectLeakedClosableObjects()
                .penaltyLog()
                .penaltyDeath()
                .build());

    }
}
package com.dzx.Activity;

import android.content.SharedPreferences;
import android.os.Bundle;
import android.os.Message;
import android.preference.PreferenceManager;
import android.util.Log;
import android.view.View;


import com.dzx.Recognization.online.CommonRecogParams;
import com.dzx.Recognization.online.IStatus;
import com.dzx.Recognization.online.MessageStatusRecogListener;
import com.dzx.Recognization.online.StatusRecogListener;
import com.dzx.control.MyRecognizer;

import java.util.Map;

/**
 * 识别的基类Activity。封装了识别的大部分逻辑，包括MyRecognizer的初始化，资源释放、
 * <p>
 * 大致流程为
 * 1. 实例化MyRecognizer ,调用release方法前不可以实例化第二个。参数中需要开发者自行填写语音识别事件的回调类，实现开发者自身的业务逻辑
 * 2. 如果使用离线命令词功能，需要调用loadOfflineEngine。在线功能不需要。
 * 3. 根据识别的参数文档，或者demo中测试出的参数，组成json格式的字符串。调用 start 方法
 * 4. 在合适的时候，调用release释放资源。
 * <p>

 */

public abstract class ActivityRecog extends ActivityCommon implements IStatus {

    /**
     * 识别控制器，使用MyRecognizer控制识别的流程
     */
    protected MyRecognizer myRecognizer;
     String voice_content="";
    /*
     * Api的参数类，仅仅用于生成调用START的json字符串，本身与SDK的调用无关
     */
    protected CommonRecogParams apiParams;

    /*
     * 本Activity中是否需要调用离线命令词功能。根据此参数，判断是否需要调用SDK的ASR_KWS_LOAD_ENGINE事件
     */
    protected boolean enableOffline = false;


    /**
     * 控制UI按钮的状态
     */
    protected int status;

    /**
     * 日志使用
     */
    private static final String TAG = "ActivityRecog";

    /**
     * 在onCreate中调用。初始化识别控制类MyRecognizer
     */
    protected void initRecog() {
        StatusRecogListener listener = new MessageStatusRecogListener(handler2);
        myRecognizer = new MyRecognizer(this, listener);
        apiParams = getApiParams();
        status = STATUS_NONE;

    }


    /**
     * 销毁时需要释放识别资源。
     */
    @Override
    protected void onDestroy() {
        myRecognizer.release();
        Log.i(TAG, "onDestory");
        super.onDestroy();
    }

    /**
     * 开始录音，点击“开始”按钮后调用。
     */
    protected void start() {
        SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(ActivityRecog.this);
        //  上面的获取是为了生成下面的Map， 自己集成时可以忽略
        Map<String, Object> params = apiParams.fetch(sp);
        // 集成时不需要上面的代码，只需要params参数。
        // 这里打印出params， 填写至您自己的app中，直接调用下面这行代码即可。
        myRecognizer.start(params);
    }


    /**
     * 开始录音后，手动停止录音。SDK会识别在此过程中的录音。点击“停止”按钮后调用。
     */
    protected void stop() {
        myRecognizer.stop();
    }

    /**
     * 开始录音后，取消这次录音。SDK会取消本次识别，回到原始状态。点击“取消”按钮后调用。
     */
    protected void cancel() {
        myRecognizer.cancel();
    }


    /**
     * @return
     */
    protected abstract CommonRecogParams getApiParams();

    // 以上为 语音SDK调用，以下为UI部分
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
    }


    @Override
    protected void initView() {
        super.initView();
        click();

    }
    protected void click() {


        switch (status) {
            case STATUS_NONE: // 初始状态
                start();
                status = STATUS_WAITING_READY;
                //updateBtnTextByStatus();
                //txtLog.setText("");
                //txtResult.setText("");
                break;
            case STATUS_WAITING_READY: // 调用本类的start方法后，即输入START事件后，等待引擎准备完毕。
            case STATUS_READY: // 引擎准备完毕。
            case STATUS_SPEAKING:
            case STATUS_FINISHED: // 长语音情况
            case STATUS_RECOGNITION:
                stop();
                status = STATUS_STOPPED; // 引擎识别中
                //updateBtnTextByStatus();
                break;
            case STATUS_STOPPED: // 引擎识别中
                cancel();
                status = STATUS_NONE; // 识别结束，回到初始状态
                //updateBtnTextByStatus();
                break;
            default:
                break;
        }

    }



    protected void handleMsg(Message msg) {
        super.handleMsg(msg);

        switch (msg.what) { // 处理MessageStatusRecogListener中的状态回调
            case STATUS_FINISHED:
                if (msg.arg2 == 1) {
                     voice_content=msg.obj.toString();
                     txtResult.append(voice_content);
                }
                status = msg.what;
                //updateBtnTextByStatus();
                break;
            case STATUS_NONE:
            case STATUS_READY:
            case STATUS_SPEAKING:
            case STATUS_RECOGNITION:
                status = msg.what;
                //updateBtnTextByStatus();
                break;
            default:
                break;

        }
    }

    private void updateBtnTextByStatus() {
        switch (status) {
            case STATUS_NONE:

                //btn.setText("开始录音");
               // btn.setEnabled(true);

                //setting.setEnabled(true);
                break;
            case STATUS_WAITING_READY:
            case STATUS_READY:
            case STATUS_SPEAKING:
            case STATUS_RECOGNITION:
               // btn.setText("停止录音");
               // btn.setEnabled(true);
                //setting.setEnabled(false);
                mAddDiaryFabVoice.setColorNormal(0x24d63c);
                break;

            case STATUS_STOPPED:
                //btn.setText("取消整个识别过程");
               // btn.setEnabled(true);
                //setting.setEnabled(false);
                mAddDiaryFabVoice.setColorNormal(0xe41c1c);
                break;
            default:
                break;
        }
    }
}
package com.dzx.Activity;

import android.content.ContentValues;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.design.widget.FloatingActionButton;
import android.support.v7.app.ActionBar;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.text.Editable;
import android.view.MotionEvent;
import android.view.View;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.dzx.LinedEditText;
import com.dzx.MainActivity;
import com.dzx.R;
import com.dzx.Recognization.online.CommonRecogParams;
import com.dzx.Recognization.online.OnlineRecogParams;
import com.dzx.Setting.Setting_use;
import com.dzx.fragment.FragmentOne;
import com.dzx.util.AppManager;
import com.dzx.util.GetDate;
import com.dzx.util.StatusBarCompat;

import butterknife.Bind;
import butterknife.ButterKnife;
import butterknife.OnClick;
import butterknife.OnTouch;
import cc.trity.floatingactionbutton.FloatingActionsMenu;

import com.dzx.db.diaryDB;


/**
 * Created by 杜卓轩 on 2018/3/17.
 */

public class AddDiaryActivity extends ActivityRecog {
    @Bind(R.id.add_diary_tv_date)
    TextView mAddDiaryTvDate;
    @Bind(R.id.add_diary_et_title)
    EditText mAddDiaryEtTitle;
    @Bind(R.id.add_diary_et_content)
    LinedEditText mAddDiaryEtContent;
    @Bind(R.id.add_diary_fab_back)
    cc.trity.floatingactionbutton.FloatingActionButton mAddDiaryFabBack;
    @Bind(R.id.add_diary_fab_add)
    cc.trity.floatingactionbutton.FloatingActionButton mAddDiaryFabAdd;

    @Bind(R.id.right_labels)
    FloatingActionsMenu mRightLabels;
    @Bind(R.id.common_tv_title)
    TextView mCommonTvTitle;
    @Bind(R.id.common_title_ll)
    LinearLayout mCommonTitleLl;
    @Bind(R.id.common_iv_back)
    ImageView mCommonIvBack;
    @Bind(R.id.common_iv_test)
    ImageView mCommonIvTest;

    private diaryDB mHelper;


    public AddDiaryActivity() {
        super();
        settingActivityClass = Setting_use.class;
    }

    protected CommonRecogParams getApiParams() {
        return new OnlineRecogParams(this);
    }


    public static void startActivity(Context context) {
        Intent intent = new Intent(context, AddDiaryActivity.class);
        context.startActivity(intent);
    }

    public static void startActivity(Context context, String title, String content) {
        Intent intent = new Intent(context, AddDiaryActivity.class);
        intent.putExtra("title", title);
        intent.putExtra("content", content);
        context.startActivity(intent);
    }

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_add_diary);
        AppManager.getAppManager().addActivity(this);
        ButterKnife.bind(this);
        //ActionBar actionBar = getSupportActionBar();
        //actionBar.hide();
        Intent intent = getIntent();
        mAddDiaryEtTitle.setText(intent.getStringExtra("title"));
        StatusBarCompat.compat(this, Color.parseColor("#161414"));

        mCommonTvTitle.setText("添加日记");
        mAddDiaryTvDate.setText("今天，" + GetDate.getDate());
        mAddDiaryEtContent.setText(intent.getStringExtra("content"));
        mHelper = new diaryDB(this, "Diary.db", null, 1);
    }


    @OnClick({R.id.common_iv_back, R.id.add_diary_et_title, R.id.add_diary_et_content, R.id.add_diary_fab_back, R.id.add_diary_fab_add
            //,R.id.add_diary_fab_voice
    })
    public void onClick(View view) {
        switch (view.getId()) {
            case R.id.common_iv_back:
                FragmentOne.startActivity(this);
                finish();
            case R.id.add_diary_et_title:
                break;
            case R.id.add_diary_et_content:
                break;
            case R.id.add_diary_fab_back:
                String date = GetDate.getDate().toString();
                String tag = String.valueOf(System.currentTimeMillis());
                String title = mAddDiaryEtTitle.getText().toString() + "";
                String content = mAddDiaryEtContent.getText().toString() + "";
                if (!title.equals("") || !content.equals("")) {
                    SQLiteDatabase db = mHelper.getWritableDatabase();
                    ContentValues values = new ContentValues();
                    values.put("date", date);
                    values.put("title", title);
                    values.put("content", content);
                    values.put("tag", tag);
                    db.insert("Diary", null, values);
                    values.clear();
                }
                FragmentOne.startActivity(this);
                finish();
                break;
           /* case R.id.add_diary_fab_voice:
                click();
                int index = mAddDiaryEtContent.getSelectionStart();//获取光标所在位置
                //String text="I want to input str";
                Editable edit = mAddDiaryEtContent.getEditableText();//获取EditText的文字

                if (index < 0 || index >= edit.length() ){
                    edit.append(voice_content);
                    voice_content="";
                }else{
                    edit.insert(index,voice_content);//光标所在位置插入文字
                    voice_content="";
                }
                //txtResult.append(voice_content);
                break;*/
            case R.id.add_diary_fab_add:
                final String dateBack = GetDate.getDate().toString();
                final String titleBack = mAddDiaryEtTitle.getText().toString();
                final String contentBack = mAddDiaryEtContent.getText().toString();
                if(!titleBack.isEmpty() || !contentBack.isEmpty()){
                    AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(this);
                    alertDialogBuilder.setMessage("是否保存日记内容？").setPositiveButton("确定", new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int which) {
                            SQLiteDatabase db = mHelper.getWritableDatabase();
                            ContentValues values = new ContentValues();
                            values.put("date", dateBack);
                            values.put("title", titleBack);
                            values.put("content", contentBack);
                            db.insert("Diary", null, values);
                            values.clear();
                            FragmentOne.startActivity(AddDiaryActivity.this);
                            finish();
                        }
                    }).setNegativeButton("取消", new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int which) {
                            FragmentOne.startActivity(AddDiaryActivity.this);
                        }
                    }).show();

                }else{
                    FragmentOne.startActivity(this);
                    finish();
                }
                break;
        }
    }

    @OnTouch({R.id.add_diary_fab_voice})
    public boolean onTouch(View view, MotionEvent event){
        switch (view.getId()) {
            case R.id.add_diary_fab_voice:

                if (event.getAction() == MotionEvent.ACTION_DOWN) {
                    click();
                    //start();
                    //status=STATUS_WAITING_READY;
                }
                if (event.getAction() == MotionEvent.ACTION_UP) {
                    //stop();
                    //status=STATUS_STOPPED;
                    int index = mAddDiaryEtContent.getSelectionStart();//获取光标所在位置
                    Editable edit = mAddDiaryEtContent.getEditableText();//获取EditText的文字

                    if (index < 0 || index >= edit.length() ){
                        edit.append(voice_content);
                        voice_content="";
                    }else{
                        edit.insert(index,voice_content);//光标所在位置插入文字
                        voice_content="";
                    }
                    //cancel();
                    //status=STATUS_NONE;
                }
                //click();
                /*switch (status) {
                    case STATUS_NONE: // 初始状态
                        start();
                        status = STATUS_WAITING_READY;
                        //updateBtnTextByStatus();
                        //txtLog.setText("");
                        //txtResult.setText("");
                        break;
                    case STATUS_WAITING_READY: // 调用本类的start方法后，即输入START事件后，等待引擎准备完毕。
                    case STATUS_READY: // 引擎准备完毕。
                    case STATUS_SPEAKING:
                    case STATUS_FINISHED: // 长语音情况
                    case STATUS_RECOGNITION:
                        stop();
                        //status = STATUS_STOPPED; // 引擎识别中
                        //updateBtnTextByStatus();
                        //break;
                    //case STATUS_STOPPED: // 引擎识别中
                        cancel();
                        status = STATUS_NONE; // 识别结束，回到初始状态
                        //updateBtnTextByStatus();*/





        }
    return false;
    }

    @Override
    public void onBackPressed() {
        super.onBackPressed();
        FragmentOne.startActivity(this);
       // finish();
    }
}
package com.dzx.Activity;

import android.content.ContentValues;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.design.widget.FloatingActionButton;
import android.support.v7.app.ActionBar;
import android.support.v7.app.AppCompatActivity;
import android.view.View;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.dzx.LinedEditText;
import com.dzx.R;
import com.dzx.db.diaryDB;
import com.dzx.fragment.FragmentOne;
import com.dzx.util.AppManager;
import com.dzx.util.GetDate;
import com.dzx.util.StatusBarCompat;

import butterknife.Bind;
import butterknife.ButterKnife;
import butterknife.OnClick;
import cc.trity.floatingactionbutton.FloatingActionsMenu;

/**
 * Created by 杜卓轩 on 2018/3/17.
 */

public class UpdateDiaryActivity extends AppCompatActivity {
    @Bind(R.id.update_diary_tv_date)
    TextView mUpdateDiaryTvDate;
    @Bind(R.id.update_diary_et_title)
    EditText mUpdateDiaryEtTitle;
    @Bind(R.id.update_diary_et_content)
    LinedEditText mUpdateDiaryEtContent;
    @Bind(R.id.update_diary_fab_back)
    cc.trity.floatingactionbutton.FloatingActionButton mUpdateDiaryFabBack;
    @Bind(R.id.update_diary_fab_add)
    cc.trity.floatingactionbutton.FloatingActionButton mUpdateDiaryFabAdd;
    @Bind(R.id.update_diary_fab_delete)
    cc.trity.floatingactionbutton.FloatingActionButton mUpdateDiaryFabDelete;
    @Bind(R.id.right_labels)
    FloatingActionsMenu mRightLabels;
    @Bind(R.id.common_tv_title)
    TextView mCommonTvTitle;
    @Bind(R.id.common_title_ll)
    LinearLayout mCommonTitleLl;
    @Bind(R.id.common_iv_back)
    ImageView mCommonIvBack;
    @Bind(R.id.common_iv_test)
    ImageView mCommonIvTest;
    @Bind(R.id.update_diary_tv_tag)
    TextView mTvTag;


    private diaryDB mHelper;

    public static void startActivity(Context context, String title, String content, String tag) {
        Intent intent = new Intent(context, UpdateDiaryActivity.class);
        intent.putExtra("title", title);
        intent.putExtra("content", content);
        intent.putExtra("tag", tag);
        context.startActivity(intent);
    }

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_update_diary);
        AppManager.getAppManager().addActivity(this);
        ButterKnife.bind(this);
        mHelper = new diaryDB(this, "Diary.db", null, 1);
        initTitle();
        StatusBarCompat.compat(this, Color.parseColor("#161414"));

        Intent intent = getIntent();
        mUpdateDiaryTvDate.setText("今天，" + GetDate.getDate());
        mUpdateDiaryEtTitle.setText(intent.getStringExtra("title"));
        mUpdateDiaryEtContent.setText(intent.getStringExtra("content"));
        mTvTag.setText(intent.getStringExtra("tag"));



    }

    private void initTitle() {
        //ActionBar actionBar = getSupportActionBar();
       // actionBar.hide();
        mCommonTvTitle.setText("修改日记");
    }

    @OnClick({R.id.common_iv_back, R.id.update_diary_tv_date, R.id.update_diary_et_title, R.id.update_diary_et_content, R.id.update_diary_fab_back, R.id.update_diary_fab_add, R.id.update_diary_fab_delete})
    public void onClick(View view) {
        switch (view.getId()) {
            case R.id.common_iv_back:
                FragmentOne.startActivity(this);
                finish();
            case R.id.update_diary_tv_date:
                break;
            case R.id.update_diary_et_title:
                break;
            case R.id.update_diary_et_content:
                break;
            case R.id.update_diary_fab_delete:
                android.support.v7.app.AlertDialog.Builder alertDialogBuilder = new android.support.v7.app.AlertDialog.Builder(this);
                alertDialogBuilder.setMessage("确定要删除该日记吗？").setPositiveButton("确定", new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {

//                        String title = mUpdateDiaryEtTitle.getText().toString();
                        String tag = mTvTag.getText().toString();
                        SQLiteDatabase dbDelete = mHelper.getWritableDatabase();
                        dbDelete.delete("Diary", "tag = ?", new String[]{tag});
                        FragmentOne.startActivity(UpdateDiaryActivity.this);
                        finish();
                    }
                }).setNegativeButton("取消", new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                    }
                }).show();
                break;
            case R.id.update_diary_fab_add:
                SQLiteDatabase dbUpdate = mHelper.getWritableDatabase();
                ContentValues valuesUpdate = new ContentValues();
                String title = mUpdateDiaryEtTitle.getText().toString();
                String content = mUpdateDiaryEtContent.getText().toString();
                valuesUpdate.put("title", title);
                valuesUpdate.put("content", content);
                dbUpdate.update("Diary", valuesUpdate, "title = ?", new String[]{title});
                dbUpdate.update("Diary", valuesUpdate, "content = ?", new String[]{content});
                FragmentOne.startActivity(this);
                finish();
                break;
            case R.id.update_diary_fab_back:
                FragmentOne.startActivity(this);
                finish();

                break;
        }
    }

    @OnClick(R.id.common_tv_title)
    public void onClick() {
    }

    @Override
    public void onBackPressed() {
        super.onBackPressed();
        FragmentOne.startActivity(this);
    }
}
package com.dzx.Activity;

import android.content.Intent;


import android.os.Bundle;
import android.os.Handler;
import android.support.v7.app.AppCompatActivity;

import android.view.Window;
import android.view.WindowManager;
import android.widget.ImageView;

import com.dzx.MainActivity;
import com.dzx.R;
import java.util.Random;



/**
 * Created by 杜卓轩 on 2018/3/5.
 * 这是一个欢迎页面
 */


public class WelcomeActivity extends AppCompatActivity {
    private ImageView imageView;
    private int randomImage[]={
            R.mipmap.pic_01,
            R.mipmap.pic_02,
            R.mipmap.pic_03,
            R.mipmap.pic_04,
            R.mipmap.pic_05,
            R.mipmap.pic_06,
            R.mipmap.pic_07

    };

    Random rand=new Random();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
                WindowManager.LayoutParams.FLAG_FULLSCREEN);
        requestWindowFeature(Window.FEATURE_NO_TITLE);
        setContentView(R.layout.activity_welcome);

        imageView=(ImageView)findViewById(R.id.image_choose);
        int random_img=rand.nextInt(7);
        random_img=randomImage[random_img];


        imageView.setImageDrawable(getResources().getDrawable(random_img));


        Handler handler = new Handler();
        //当计时结束,跳转至主界面
        handler.postDelayed(new Runnable() {
            @Override
            public void run() {
                Intent intent = new Intent(WelcomeActivity.this, MainActivity.class);
                startActivity(intent);
                WelcomeActivity.this.finish();
            }
        }, 3000);
    }




}
package com.dzx.Bean;

/**
 * Created by 杜卓轩 on 2018/3/17.
 */

public class diaryBean {

    private String date;
    private String title;
    private String content;
    private String tag;

    public diaryBean(String date, String title, String content, String tag) {
        this.date = date;
        this.title = title;
        this.content = content;
        this.tag = tag;
    }
    public String getTag() {
        return tag;
    }

    public void setTag(String tag) {
        this.tag = tag;
    }

    public String getDate() {
        return date;
    }

    public void setDate(String date) {
        this.date = date;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }


}
package com.dzx.Bean;

import java.util.List;

/**
 * Created by 杜卓轩 on 2018/3/9.
 */

public class weatherBean {
    private List<HeWeather6Bean> HeWeather6;

    public List<HeWeather6Bean> getHeWeather6() {
        return HeWeather6;
    }

    public void setHeWeather6(List<HeWeather6Bean> HeWeather6) {
        this.HeWeather6 = HeWeather6;
    }

    public static class HeWeather6Bean {
        /**
         * basic : {"cid":"CN101200113","location":"洪山","parent_city":"武汉","admin_area":"湖北","cnty":"中国","lat":"30.50425911","lon":"114.40071869","tz":"+8.00"}
         * update : {"loc":"2018-03-09 20:47","utc":"2018-03-09 12:47"}
         * status : ok
         * now : {"cloud":"0","cond_code":"100","cond_txt":"晴","fl":"4","hum":"85","pcpn":"0.0","pres":"1023","tmp":"7","vis":"10","wind_deg":"151","wind_dir":"东南风","wind_sc":"1-2","wind_spd":"3"}
         * daily_forecast : [{"cond_code_d":"103","cond_code_n":"100","cond_txt_d":"晴间多云","cond_txt_n":"晴","date":"2018-03-09","hum":"60","mr":"00:34","ms":"11:28","pcpn":"0.0","pop":"0","pres":"1027","sr":"06:39","ss":"18:26","tmp_max":"14","tmp_min":"4","uv_index":"6","vis":"16","wind_deg":"104","wind_dir":"东南风","wind_sc":"1-2","wind_spd":"5"},{"cond_code_d":"101","cond_code_n":"101","cond_txt_d":"多云","cond_txt_n":"多云","date":"2018-03-10","hum":"52","mr":"01:27","ms":"12:11","pcpn":"0.0","pop":"0","pres":"1023","sr":"06:38","ss":"18:27","tmp_max":"18","tmp_min":"5","uv_index":"7","vis":"20","wind_deg":"96","wind_dir":"东风","wind_sc":"1-2","wind_spd":"6"},{"cond_code_d":"101","cond_code_n":"101","cond_txt_d":"多云","cond_txt_n":"多云","date":"2018-03-11","hum":"52","mr":"02:17","ms":"12:57","pcpn":"0.0","pop":"0","pres":"1021","sr":"06:37","ss":"18:27","tmp_max":"18","tmp_min":"8","uv_index":"5","vis":"20","wind_deg":"181","wind_dir":"南风","wind_sc":"1-2","wind_spd":"4"}]
         * lifestyle : [{"brf":"舒适","txt":"今天夜间不太热也不太冷，风力不大，相信您在这样的天气条件下，应会感到比较清爽和舒适。","type":"comf"},{"brf":"较舒适","txt":"建议着薄外套、开衫牛仔衫裤等服装。年老体弱者应适当添加衣物，宜着夹克衫、薄毛衣等。","type":"drsg"},{"brf":"易发","txt":"昼夜温差很大，易发生感冒，请注意适当增减衣服，加强自我防护避免感冒。","type":"flu"},{"brf":"适宜","txt":"天气较好，赶快投身大自然参与户外运动，尽情感受运动的快乐吧。","type":"sport"},{"brf":"适宜","txt":"天气较好，但丝毫不会影响您出行的心情。温度适宜又有微风相伴，适宜旅游。","type":"trav"},{"brf":"弱","txt":"紫外线强度较弱，建议出门前涂擦SPF在12-15之间、PA+的防晒护肤品。","type":"uv"},{"brf":"较适宜","txt":"较适宜洗车，未来一天无雨，风力较小，擦洗一新的汽车至少能保持一天。","type":"cw"},{"brf":"较差","txt":"气象条件较不利于空气污染物稀释、扩散和清除，请适当减少室外活动时间。","type":"air"}]
         */

        private BasicBean basic;
        private UpdateBean update;
        private String status;
        private NowBean now;
        private List<DailyForecastBean> daily_forecast;
        private List<LifestyleBean> lifestyle;

        public BasicBean getBasic() {
            return basic;
        }

        public void setBasic(BasicBean basic) {
            this.basic = basic;
        }

        public UpdateBean getUpdate() {
            return update;
        }

        public void setUpdate(UpdateBean update) {
            this.update = update;
        }

        public String getStatus() {
            return status;
        }

        public void setStatus(String status) {
            this.status = status;
        }

        public NowBean getNow() {
            return now;
        }

        public void setNow(NowBean now) {
            this.now = now;
        }

        public List<DailyForecastBean> getDaily_forecast() {
            return daily_forecast;
        }

        public void setDaily_forecast(List<DailyForecastBean> daily_forecast) {
            this.daily_forecast = daily_forecast;
        }

        public List<LifestyleBean> getLifestyle() {
            return lifestyle;
        }

        public void setLifestyle(List<LifestyleBean> lifestyle) {
            this.lifestyle = lifestyle;
        }

        public static class BasicBean {
            /**
             * cid : CN101200113
             * location : 洪山
             * parent_city : 武汉
             * admin_area : 湖北
             * cnty : 中国
             * lat : 30.50425911
             * lon : 114.40071869
             * tz : +8.00
             */

            private String cid;
            private String location;
            private String parent_city;
            private String admin_area;
            private String cnty;
            private String lat;
            private String lon;
            private String tz;

            public String getCid() {
                return cid;
            }

            public void setCid(String cid) {
                this.cid = cid;
            }

            public String getLocation() {
                return location;
            }

            public void setLocation(String location) {
                this.location = location;
            }

            public String getParent_city() {
                return parent_city;
            }

            public void setParent_city(String parent_city) {
                this.parent_city = parent_city;
            }

            public String getAdmin_area() {
                return admin_area;
            }

            public void setAdmin_area(String admin_area) {
                this.admin_area = admin_area;
            }

            public String getCnty() {
                return cnty;
            }

            public void setCnty(String cnty) {
                this.cnty = cnty;
            }

            public String getLat() {
                return lat;
            }

            public void setLat(String lat) {
                this.lat = lat;
            }

            public String getLon() {
                return lon;
            }

            public void setLon(String lon) {
                this.lon = lon;
            }

            public String getTz() {
                return tz;
            }

            public void setTz(String tz) {
                this.tz = tz;
            }
        }

        public static class UpdateBean {
            /**
             * loc : 2018-03-09 20:47
             * utc : 2018-03-09 12:47
             */

            private String loc;
            private String utc;

            public String getLoc() {
                return loc;
            }

            public void setLoc(String loc) {
                this.loc = loc;
            }

            public String getUtc() {
                return utc;
            }

            public void setUtc(String utc) {
                this.utc = utc;
            }
        }

        public static class NowBean {
            /**
             * cloud : 0
             * cond_code : 100
             * cond_txt : 晴
             * fl : 4
             * hum : 85
             * pcpn : 0.0
             * pres : 1023
             * tmp : 7
             * vis : 10
             * wind_deg : 151
             * wind_dir : 东南风
             * wind_sc : 1-2
             * wind_spd : 3
             */

            private String cloud;
            private String cond_code;
            private String cond_txt;
            private String fl;
            private String hum;
            private String pcpn;
            private String pres;
            private String tmp;
            private String vis;
            private String wind_deg;
            private String wind_dir;
            private String wind_sc;
            private String wind_spd;

            public String getCloud() {
                return cloud;
            }

            public void setCloud(String cloud) {
                this.cloud = cloud;
            }

            public String getCond_code() {
                return cond_code;
            }

            public void setCond_code(String cond_code) {
                this.cond_code = cond_code;
            }

            public String getCond_txt() {
                return cond_txt;
            }

            public void setCond_txt(String cond_txt) {
                this.cond_txt = cond_txt;
            }

            public String getFl() {
                return fl;
            }

            public void setFl(String fl) {
                this.fl = fl;
            }

            public String getHum() {
                return hum;
            }

            public void setHum(String hum) {
                this.hum = hum;
            }

            public String getPcpn() {
                return pcpn;
            }

            public void setPcpn(String pcpn) {
                this.pcpn = pcpn;
            }

            public String getPres() {
                return pres;
            }

            public void setPres(String pres) {
                this.pres = pres;
            }

            public String getTmp() {
                return tmp;
            }

            public void setTmp(String tmp) {
                this.tmp = tmp;
            }

            public String getVis() {
                return vis;
            }

            public void setVis(String vis) {
                this.vis = vis;
            }

            public String getWind_deg() {
                return wind_deg;
            }

            public void setWind_deg(String wind_deg) {
                this.wind_deg = wind_deg;
            }

            public String getWind_dir() {
                return wind_dir;
            }

            public void setWind_dir(String wind_dir) {
                this.wind_dir = wind_dir;
            }

            public String getWind_sc() {
                return wind_sc;
            }

            public void setWind_sc(String wind_sc) {
                this.wind_sc = wind_sc;
            }

            public String getWind_spd() {
                return wind_spd;
            }

            public void setWind_spd(String wind_spd) {
                this.wind_spd = wind_spd;
            }
        }

        public static class DailyForecastBean {
            /**
             * cond_code_d : 103
             * cond_code_n : 100
             * cond_txt_d : 晴间多云
             * cond_txt_n : 晴
             * date : 2018-03-09
             * hum : 60
             * mr : 00:34
             * ms : 11:28
             * pcpn : 0.0
             * pop : 0
             * pres : 1027
             * sr : 06:39
             * ss : 18:26
             * tmp_max : 14
             * tmp_min : 4
             * uv_index : 6
             * vis : 16
             * wind_deg : 104
             * wind_dir : 东南风
             * wind_sc : 1-2
             * wind_spd : 5
             */

            private String cond_code_d;
            private String cond_code_n;
            private String cond_txt_d;
            private String cond_txt_n;
            private String date;
            private String hum;
            private String mr;
            private String ms;
            private String pcpn;
            private String pop;
            private String pres;
            private String sr;
            private String ss;
            private String tmp_max;
            private String tmp_min;
            private String uv_index;
            private String vis;
            private String wind_deg;
            private String wind_dir;
            private String wind_sc;
            private String wind_spd;

            public String getCond_code_d() {
                return cond_code_d;
            }

            public void setCond_code_d(String cond_code_d) {
                this.cond_code_d = cond_code_d;
            }

            public String getCond_code_n() {
                return cond_code_n;
            }

            public void setCond_code_n(String cond_code_n) {
                this.cond_code_n = cond_code_n;
            }

            public String getCond_txt_d() {
                return cond_txt_d;
            }

            public void setCond_txt_d(String cond_txt_d) {
                this.cond_txt_d = cond_txt_d;
            }

            public String getCond_txt_n() {
                return cond_txt_n;
            }

            public void setCond_txt_n(String cond_txt_n) {
                this.cond_txt_n = cond_txt_n;
            }

            public String getDate() {
                return date;
            }

            public void setDate(String date) {
                this.date = date;
            }

            public String getHum() {
                return hum;
            }

            public void setHum(String hum) {
                this.hum = hum;
            }

            public String getMr() {
                return mr;
            }

            public void setMr(String mr) {
                this.mr = mr;
            }

            public String getMs() {
                return ms;
            }

            public void setMs(String ms) {
                this.ms = ms;
            }

            public String getPcpn() {
                return pcpn;
            }

            public void setPcpn(String pcpn) {
                this.pcpn = pcpn;
            }

            public String getPop() {
                return pop;
            }

            public void setPop(String pop) {
                this.pop = pop;
            }

            public String getPres() {
                return pres;
            }

            public void setPres(String pres) {
                this.pres = pres;
            }

            public String getSr() {
                return sr;
            }

            public void setSr(String sr) {
                this.sr = sr;
            }

            public String getSs() {
                return ss;
            }

            public void setSs(String ss) {
                this.ss = ss;
            }

            public String getTmp_max() {
                return tmp_max;
            }

            public void setTmp_max(String tmp_max) {
                this.tmp_max = tmp_max;
            }

            public String getTmp_min() {
                return tmp_min;
            }

            public void setTmp_min(String tmp_min) {
                this.tmp_min = tmp_min;
            }

            public String getUv_index() {
                return uv_index;
            }

            public void setUv_index(String uv_index) {
                this.uv_index = uv_index;
            }

            public String getVis() {
                return vis;
            }

            public void setVis(String vis) {
                this.vis = vis;
            }

            public String getWind_deg() {
                return wind_deg;
            }

            public void setWind_deg(String wind_deg) {
                this.wind_deg = wind_deg;
            }

            public String getWind_dir() {
                return wind_dir;
            }

            public void setWind_dir(String wind_dir) {
                this.wind_dir = wind_dir;
            }

            public String getWind_sc() {
                return wind_sc;
            }

            public void setWind_sc(String wind_sc) {
                this.wind_sc = wind_sc;
            }

            public String getWind_spd() {
                return wind_spd;
            }

            public void setWind_spd(String wind_spd) {
                this.wind_spd = wind_spd;
            }
        }

        public static class LifestyleBean {
            /**
             * brf : 舒适
             * txt : 今天夜间不太热也不太冷，风力不大，相信您在这样的天气条件下，应会感到比较清爽和舒适。
             * type : comf
             */

            private String brf;
            private String txt;
            private String type;

            public String getBrf() {
                return brf;
            }

            public void setBrf(String brf) {
                this.brf = brf;
            }

            public String getTxt() {
                return txt;
            }

            public void setTxt(String txt) {
                this.txt = txt;
            }

            public String getType() {
                return type;
            }

            public void setType(String type) {
                this.type = type;
            }
        }
    }
}
package com.dzx.Bean;

/**
 * Created by 杜卓轩 on 2018/3/10.
 */

public class weatherInfoBean {



    private String city;
    private String date;
    private String temp;
    private String weather;
    private String wind;
    private String info;
    private String temp_max;
    private String netInfo;

    public String getNetInfo() {
        return netInfo;
    }

    public void setNetInfo(String netInfo) {
        this.netInfo = netInfo;
    }

    public String getParent_city() {
        return parent_city;
    }

    public void setParent_city(String parent_city) {
        this.parent_city = parent_city;
    }

    private String parent_city;
    private String tips;

    public String getTips() {
        return tips;
    }

    public void setTips(String tips) {
        this.tips = tips;
    }

    public String getTemp_max() {
        return temp_max;
    }

    public void setTemp_max(String temp_max) {
        this.temp_max = temp_max;
    }

    public String getInfo() {
        return info;
    }

    public void setInfo(String info) {
        this.info = info;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public String getDate() {
        return date;
    }

    public void setDate(String date) {
        this.date = date;
    }

    public String getTemp() {
        return temp;
    }

    public void setTemp(String temp) {
        this.temp = temp;
    }

    public String getWeather() {
        return weather;
    }

    public void setWeather(String weather) {
        this.weather = weather;
    }

    public String getWind() {
        return wind;
    }

    public void setWind(String wind) {
        this.wind = wind;
    }


    /**
     *
     * @return 是否为本人发送
     */
    private boolean isMeSend;
    private boolean isWeather;
    private boolean isNet;
    public boolean getisNet() {
        return isNet;
    }
    public boolean isWeather() {
        return isWeather;
    }
    public boolean isMeSend() {
        return isMeSend;
    }
    public void setIsWeather(boolean isWeather) {
        this.isWeather = isWeather;
    }
    public void setIsNet(boolean isNet){this.isNet=isNet;}
    public void setMeSend(boolean isMeSend) {
        this.isMeSend = isMeSend;
    }
    public weatherInfoBean(String city, String date, String temp,String weather,String wind, boolean isMeSend) {
        super();
        this.city = city;
        this.date = date;
        this.temp = temp;
        this.weather=weather;
        this.wind=wind;
        this.isMeSend = isMeSend;
    }
    public weatherInfoBean() {
        super();
    }
}
package com.dzx.control;

import android.content.Context;

import com.dzx.Recognization.online.IRecogListener;
import com.dzx.Recognization.online.RecogEventAdapter;
import com.dzx.util.Logger;
import com.baidu.speech.EventListener;
import com.baidu.speech.EventManager;
import com.baidu.speech.EventManagerFactory;
import com.baidu.speech.asr.SpeechConstant;

import org.json.JSONObject;

import java.util.Map;

/**

 * EventManager内的方法如send 都可以在主线程中进行，SDK中做过处理
 */

public class MyRecognizer {
    /**
     * SDK 内部核心 EventManager 类
     */
    private EventManager asr;

    /**
     * SDK 内部核心 事件回调类， 用于开发者写自己的识别回调逻辑
     */
    private EventListener eventListener;

    private static boolean isOfflineEngineLoaded = false;

    private static boolean isInited = false;

    private static final String TAG = "MyRecognizer";

    /**
     * 初始化
     *
     * @param context
     * @param recogListener 将EventListener结果做解析的DEMO回调。使用RecogEventAdapter 适配EventListener
     */
    public MyRecognizer(Context context, IRecogListener recogListener) {
        this(context, new RecogEventAdapter(recogListener));
    }

    /**
     * 初始化 提供 EventManagerFactory需要的Context和EventListener
     *
     * @param context
     * @param eventListener
     */
    public MyRecognizer(Context context, EventListener eventListener) {
        if (isInited) {
            Logger.error(TAG, "还未调用release()，请勿新建一个新类");
            throw new RuntimeException("还未调用release()，请勿新建一个新类");
        }
        isInited = true;
        this.eventListener = eventListener;
        asr = EventManagerFactory.create(context, "asr");
        asr.registerListener(eventListener);
    }


    /**
     * @param params
     */
    /*public void loadOfflineEngine(Map<String, Object> params) {
        String json = new JSONObject(params).toString();
        Logger.info(TAG + ".Debug", "loadOfflineEngine params:" + json);
        asr.send(SpeechConstant.ASR_KWS_LOAD_ENGINE, json, null, 0, 0);
        isOfflineEngineLoaded = true;
        // 没有ASR_KWS_LOAD_ENGINE这个回调表试失败，如缺少第一次联网时下载的正式授权文件。
    }*/

    public void start(Map<String, Object> params) {
        String json = new JSONObject(params).toString();
        Logger.info(TAG + ".Debug", "asr params(反馈请带上此行日志):" + json);
        if (asr != null) {
            asr.send(SpeechConstant.ASR_START, json, null, 0, 0);
        }
        else{

        }
    }


    /**
     * 提前结束录音等待识别结果。
     */
    public void stop() {
        Logger.info(TAG, "停止录音");
        if (asr != null) {
            asr.send(SpeechConstant.ASR_STOP, "{}", null, 0, 0);
        }
    }

    /**
     * 取消本次识别，取消后将立即停止不会返回识别结果。
     * cancel 与stop的区别是 cancel在stop的基础上，完全停止整个识别流程，
     */
    public void cancel() {
        Logger.info(TAG, "取消识别");
        if (asr != null) {
            asr.send(SpeechConstant.ASR_CANCEL, "{}", null, 0, 0);
        }
    }


    public void release() {
        if (asr == null) {
            return;
        }
        cancel();

        asr.unregisterListener(eventListener);
        asr = null;
        isInited = false;
    }
}
package com.dzx.control;

import android.content.Context;

import com.dzx.util.Logger;

import com.baidu.speech.EventListener;
import com.baidu.speech.EventManager;
import com.baidu.speech.EventManagerFactory;
import com.baidu.speech.asr.SpeechConstant;

import org.json.JSONObject;

import java.util.Map;

/**

 */

public class MyWakeup {


    private static boolean isInited = false;

    private EventManager wp;
    private EventListener eventListener;

    private static final String TAG = "MyWakeup";

    public MyWakeup(Context context, EventListener eventListener) {
        if (isInited) {
            Logger.error(TAG, "还未调用release()，请勿新建一个新类");
            throw new RuntimeException("还未调用release()，请勿新建一个新类");
        }
        isInited = true;
        this.eventListener = eventListener;
        wp = EventManagerFactory.create(context, "wp");
        wp.registerListener(eventListener);
    }


    public void start(Map<String, Object> params) {
        String json = new JSONObject(params).toString();
        Logger.info(TAG + ".Debug", "wakeup params(反馈请带上此行日志):" + json);
        wp.send(SpeechConstant.WAKEUP_START, json, null, 0, 0);
    }

    public void stop() {
        Logger.info(TAG, "唤醒结束");
        wp.send(SpeechConstant.WAKEUP_STOP, null, null, 0, 0);
    }

    public void release() {
        stop();
        wp.unregisterListener(eventListener);
        wp = null;
        isInited = false;
    }
}
package com.dzx.db;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

/**
 * Created by 杜卓轩 on 2018/3/17.
 */

public class diaryDB extends SQLiteOpenHelper {
    public static final String CREATE_DIARY = "create table Diary("
            + "id integer primary key autoincrement, "
            + "date text, "
            + "title text, "
            + "tag text, "
            + "content text)";

    private Context mContext;
    public diaryDB(Context context, String name, SQLiteDatabase.CursorFactory factory, int version){
        super(context, name, factory, version);
        mContext = context;
    }
    @Override
    public void onCreate(SQLiteDatabase db) {
        db.execSQL(CREATE_DIARY);
    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {

        db.execSQL("drop table if exists Diary");
        onCreate(db);
    }
}
package com.dzx.fragment;

import android.Manifest;

import android.content.pm.PackageManager;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.os.StrictMode;
import android.support.v4.app.ActivityCompat;
import android.support.v4.app.Fragment;
import android.support.v4.content.ContextCompat;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import com.dzx.R;
import com.dzx.Recognization.online.InFileStream;
import com.dzx.util.Logger;

import java.util.ArrayList;

/**
 * Created by 杜卓轩 on 2018/3/4.
 */

public abstract class Fragment_common extends Fragment {
    protected TextView txtLog;
    protected Button btn;
    //protected Button btn_stop;
    protected TextView txtResult;

    protected Handler handler;

    protected String descText;

    protected int layout = R.layout.fragment_2;

    protected Class settingActivityClass = null;

   // protected boolean running = false;

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {


        // setStrictMode();
        InFileStream.setContext(getActivity());
        View rootView = inflater.inflate(R.layout.fragment_2, container, false);

        handler = new Handler() {

            /*
             * @param msg
             */
            @Override
            public void handleMessage(Message msg) {
                super.handleMessage(msg);
                handleMsg(msg);
            }

        };
        Logger.setHandler(handler);
        initPermission();
        initView(rootView);
        initRecog();
        return rootView;
    }
    protected abstract void initRecog();

    protected void handleMsg(Message msg) {
        if (txtLog != null && msg.obj != null) {
           txtLog.append(msg.obj.toString() + "\n");

        }
    }

    protected void initView(View rootView) {
        txtResult = (TextView) rootView.findViewById(R.id.txtResult);
        txtLog = (TextView) rootView.findViewById(R.id.txtLog);
        btn = (Button) rootView.findViewById(R.id.btn);

        txtLog.setText(descText + "\n");
         //txtResult.setText("ceshi");
    }

    /**
     * android 6.0 以上需要动态申请权限
     */
    private void initPermission() {
        String[] permissions = {
                Manifest.permission.RECORD_AUDIO,
                Manifest.permission.ACCESS_NETWORK_STATE,
                Manifest.permission.INTERNET,
                Manifest.permission.READ_PHONE_STATE,
                Manifest.permission.WRITE_EXTERNAL_STORAGE
        };

        ArrayList<String> toApplyList = new ArrayList<String>();

        for (String perm : permissions) {
            if (PackageManager.PERMISSION_GRANTED != ContextCompat.checkSelfPermission(getActivity(), perm)) {
                toApplyList.add(perm);
                // 进入到这里代表没有权限.

            }
        }
        String[] tmpList = new String[toApplyList.size()];
        if (!toApplyList.isEmpty()) {
            ActivityCompat.requestPermissions(getActivity(), toApplyList.toArray(tmpList), 123);
        }

    }

    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        // 此处为android 6.0以上动态授权的回调，用户自行实现。
    }

    private void setStrictMode() {
        StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder()
                .detectAll()
                .penaltyLog()
                .build());
        StrictMode.setVmPolicy(new StrictMode.VmPolicy.Builder()
                .detectLeakedSqlLiteObjects()
                .detectLeakedClosableObjects()
                .penaltyLog()
                .penaltyDeath()
                .build());

    }
}
package com.dzx.fragment;

import android.content.SharedPreferences;
import android.os.Bundle;
import android.os.Message;
import android.preference.PreferenceManager;
import android.util.Log;
import android.view.View;


import com.dzx.Recognization.online.CommonRecogParams;
import com.dzx.Recognization.online.IStatus;
import com.dzx.Recognization.online.MessageStatusRecogListener;
import com.dzx.Recognization.online.StatusRecogListener;
import com.dzx.control.MyRecognizer;
import com.dzx.util.Logger;

import java.util.Map;

/**
 * Created by 杜卓轩 on 2018/3/4.
 */

public abstract class Fragment_recog extends Fragment_common implements IStatus {


        /**
         * 识别控制器，使用MyRecognizer控制识别的流程
         */
        protected MyRecognizer myRecognizer;

        /*
         * Api的参数类，仅仅用于生成调用START的json字符串，本身与SDK的调用无关
         */
        protected CommonRecogParams apiParams;

        /*
         * 本Activity中是否需要调用离线命令词功能。根据此参数，判断是否需要调用SDK的ASR_KWS_LOAD_ENGINE事件
         */
        protected boolean enableOffline = false;


        /**
         * 控制UI按钮的状态
         */
        protected int status;

        /**
         * 日志使用
         */
        private static final String TAG = "Fragment_recog";

        /**
         * 在onCreate中调用。初始化识别控制类MyRecognizer
         */
        protected void initRecog() {
            StatusRecogListener listener = new MessageStatusRecogListener(handler);
            myRecognizer = new MyRecognizer(getActivity(),  listener);
            apiParams = getApiParams();
            status = STATUS_NONE;

        }


        /**
         * 销毁时需要释放识别资源。
         */
        @Override
        public void onDestroy() {
            myRecognizer.release();
            Log.i(TAG, "onDestory");
            super.onDestroy();
        }
        @Override
        public void onStop(){

            super.onStop();
        }

        public void onStart(){
           // start();
            super.onStart();
        //目前的结论是，锁屏时调用release，把asr注销，isinited=false
            //导致了再次开启屏幕时，报nullpointer exception
            //asr.send函数报错。
        }

        public void onPause(){
            super.onPause();
            //myRecognizer.release();
            //这个有没有用。
            Logger.info(TAG, "进行了release");
        }

        /**
         * 开始录音，点击“开始”按钮后调用。
         */
        protected void start() {
            SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(getActivity());
            //  上面的获取是为了生成下面的Map， 自己集成时可以忽略
            Map<String, Object> params = apiParams.fetch(sp);
            // 集成时不需要上面的代码，只需要params参数。
            // 这里打印出params， 填写至您自己的app中，直接调用下面这行代码即可。
            myRecognizer.start(params);
        }


        /**
         * 开始录音后，手动停止录音。SDK会识别在此过程中的录音。点击“停止”按钮后调用。
         */
        private void stop() {
            myRecognizer.stop();
        }

        /**
         * 开始录音后，取消这次录音。SDK会取消本次识别，回到原始状态。点击“取消”按钮后调用。
         */
        private void cancel() {
            myRecognizer.cancel();
        }


        /**
         * @return
         */
        protected abstract CommonRecogParams getApiParams();

        // 以上为 语音SDK调用，以下为UI部分
        @Override
        public void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
        }


        @Override
        protected void initView(View rootView) {
            super.initView(rootView);
            btn.setOnClickListener(new View.OnClickListener() {

                @Override
                public void onClick(View v) {
                    switch (status) {
                        case STATUS_NONE: // 初始状态
                            start();
                            status = STATUS_WAITING_READY;
                            updateBtnTextByStatus();
                            txtLog.setText("");
                            txtResult.setText("");
                            break;
                        case STATUS_WAITING_READY: // 调用本类的start方法后，即输入START事件后，等待引擎准备完毕。
                        case STATUS_READY: // 引擎准备完毕。
                        case STATUS_SPEAKING:
                        case STATUS_FINISHED: // 长语音情况
                        case STATUS_RECOGNITION:
                            stop();
                            status = STATUS_STOPPED; // 引擎识别中
                            updateBtnTextByStatus();
                            break;
                        case STATUS_STOPPED: // 引擎识别中
                            cancel();
                            status = STATUS_NONE; // 识别结束，回到初始状态
                            updateBtnTextByStatus();
                            break;
                        default:
                            break;
                    }

                }
            });
        }

        protected void handleMsg(Message msg) {
            super.handleMsg(msg);

            switch (msg.what) { // 处理MessageStatusRecogListener中的状态回调
                case STATUS_FINISHED:
                   if (msg.arg2 == 1) {
                       txtResult.setText(msg.obj.toString());
                    }
                    status = msg.what;
                    updateBtnTextByStatus();
                    break;
                case STATUS_NONE:
                case STATUS_READY:
                case STATUS_SPEAKING:
                case STATUS_RECOGNITION:
                    status = msg.what;
                    updateBtnTextByStatus();
                    break;
                default:

                    break;

            }
        }

        private void updateBtnTextByStatus() {
            switch (status) {
                case STATUS_NONE:
                    btn.setText("开始录音");
                    btn.setEnabled(true);
                    //setting.setEnabled(true);
                    break;
                case STATUS_WAITING_READY:
                case STATUS_READY:
                case STATUS_SPEAKING:
                case STATUS_RECOGNITION:
                    btn.setText("停止录音");
                    btn.setEnabled(true);
                    //setting.setEnabled(false);
                    break;

                case STATUS_STOPPED:
                    btn.setText("取消整个识别过程");
                    btn.setEnabled(true);
                   // setting.setEnabled(false);
                    break;
                default:
                    break;
            }
        }
    }

package com.dzx.fragment;

import android.app.Activity;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import com.dzx.Recognization.online.CommonRecogParams;
import com.dzx.Recognization.online.OnlineRecogParams;
import com.dzx.Setting.Setting_use;

/**
 * Created by 杜卓轩 on 2018/3/4.
 */

public class FragmentCommon extends Fragment_recog {




    public FragmentCommon() {
        super();
        settingActivityClass = Setting_use.class;
    }

    @Override
    protected CommonRecogParams getApiParams() {
        return new OnlineRecogParams(getActivity());
    }

    public static String  TAG = FragmentCommon.class.getSimpleName();

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        Log.i(TAG, "onCreate");
    }

    @Override
    public void onActivityCreated(Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        Log.i(TAG, "onActivityCreated");
    }
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        Log.i(TAG, "onCreateView");
        return super.onCreateView(inflater, container, savedInstanceState);
    }

    @Override
    public void onAttach(Activity activity) {
        super.onAttach(activity);
        Log.i(TAG, "onAttach");
    }
    @Override
    public void onDestroy() {
        Log.i(TAG, "onDestory");
        super.onDestroy();
    }
    @Override
    public void onDetach() {
        Log.i(TAG, "onDetch");
        super.onDetach();
    }
    @Override
    public void onPause() {
        Log.i(TAG, "onPause");
        super.onPause();
    }
    @Override
    public void onDestroyView() {
        super.onDestroyView();
        Log.i(TAG, "onDestroyView");
    }
    @Override
    public void onViewCreated(View view, Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        Log.i(TAG, "onViewCreated");
    }
    @Override
    public void onStart() {
        super.onStart();
        Log.i(TAG, "onStart");
    }
}
package com.dzx.fragment;

import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.os.Bundle;
import android.support.design.widget.FloatingActionButton;
import android.support.v4.app.Fragment;
import android.support.v7.app.ActionBar;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.text.TextUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.SearchView;
import android.widget.TextView;

import com.dzx.Activity.AddDiaryActivity;
import com.dzx.Activity.UpdateDiaryActivity;
import com.dzx.Adapter.DiaryAdapter;
import com.dzx.Bean.diaryBean;
import com.dzx.Constants;
import com.dzx.Event.DelDiaryEvent;
import com.dzx.Event.StartUpdateDiaryEvent;
import com.dzx.MainActivity;
import com.dzx.R;
import com.dzx.db.diaryDB;
import com.dzx.util.AppManager;
import com.dzx.util.GetDate;
import com.dzx.util.SpHelper;
import com.dzx.util.StatusBarCompat;

import org.greenrobot.eventbus.EventBus;
import org.greenrobot.eventbus.Subscribe;

import java.util.ArrayList;
import java.util.List;

import butterknife.Bind;
import butterknife.ButterKnife;
import butterknife.OnClick;

/**
 * Created by 杜卓轩 on 2018/2/28.
 */




//public class FragmentOne extends BaseFragment {
public class FragmentOne extends Fragment {
    /*public static FragmentOne newInstance(String s){
        Bundle bundle = new Bundle();
        bundle.putString(Constants.KEY_ARGS,s);
        FragmentOne fragment = new FragmentOne();
        fragment.setArguments(bundle);
        return fragment;
    }*/




    //@Bind(R.id.common_iv_back)
    //ImageView mCommonIvBack;
    //@Bind(R.id.common_tv_title)
   // TextView mCommonTvTitle;
  //  @Bind(R.id.common_iv_test)
    //ImageView mCommonIvTest;
    //@Bind(R.id.common_title_ll)
   // LinearLayout mCommonTitleLl;
    @Bind(R.id.main_iv_circle)
    ImageView mMainIvCircle;
    @Bind(R.id.main_tv_date)
    TextView mMainTvDate;
    @Bind(R.id.main_tv_content)
    TextView mMainTvContent;
    @Bind(R.id.item_ll_control)
    LinearLayout mItemLlControl;

    @Bind(R.id.main_rv_show_diary)
    RecyclerView mMainRvShowDiary;
    @Bind(R.id.main_fab_enter_edit)
    FloatingActionButton mMainFabEnterEdit;
    @Bind(R.id.main_rl_main)
    RelativeLayout mMainRlMain;
    @Bind(R.id.item_first)
    LinearLayout mItemFirst;
    @Bind(R.id.main_ll_main)
    LinearLayout mMainLlMain;
    @Bind(R.id.searchView)
    SearchView mSearchView;
    private List<diaryBean> mDiaryBeanList=new ArrayList<>();


    private diaryDB mHelper;

    private static String IS_WRITE = "true";

    private int mEditPosition = -1;
    private DiaryAdapter diaryAdapter;
    /**
     * 标识今天是否已经写了日记
     */
    private boolean isWrite = false;
    private static TextView mTvTest;
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View rootView = inflater.inflate(R.layout.fragment_1, container, false);
        ButterKnife.bind(this,rootView);
        StatusBarCompat.compat(getActivity(), Color.parseColor("#161414"));
        mHelper = new diaryDB(getActivity(), "Diary.db", null, 1);
        //ActionBar actionBar = getSupportActionBar();
        //actionBar.hide();
        if(!EventBus.getDefault().isRegistered(this)){//加上判断
            EventBus.getDefault().register(this);
        }

        SpHelper spHelper = SpHelper.getInstance(getActivity());

        initTitle();
        getDiaryBeanList();
        RecyclerView.LayoutManager layoutManager=new LinearLayoutManager(getActivity());
        mMainRvShowDiary.setLayoutManager(layoutManager);
        diaryAdapter=new DiaryAdapter(getActivity().getApplicationContext(),mDiaryBeanList);
        mMainRvShowDiary.setAdapter(diaryAdapter);
        mTvTest = new TextView(getActivity());
        mTvTest.setText("hello world");
        searchEvent();
        mSearchView.clearFocus();
        return rootView;
    }
    public static void  startActivity(Context context) {
        Intent intent = new Intent(context,MainActivity.class);
        context.startActivity(intent);
        //diaryAdapter.notifyDataSetChanged();
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        //setContentView(R.layout.activity_main);
        //AppManager.getAppManager().addActivity(getActivity());

    }

    private void initTitle() {
        mMainTvDate.setText("今天，" + GetDate.getDate());
       // mCommonTvTitle.setText("日记");
      //  mCommonIvBack.setVisibility(View.INVISIBLE);
      //  mCommonIvTest.setVisibility(View.INVISIBLE);

    }

    private void searchEvent(){

        mSearchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
            // 当点击搜索按钮时触发该方法
            @Override
            public boolean onQueryTextSubmit(String query) {
                return false;
            }

            // 当搜索内容改变时触发该方法
            @Override
            public boolean onQueryTextChange(String newText) {

                    diaryAdapter.filter(newText);

                return false;
            }
        });
    }




    private List<diaryBean> getDiaryBeanList() {

        //mDiaryBeanList = new ArrayList<>();
        List<diaryBean> diaryList = new ArrayList<>();
        SQLiteDatabase sqLiteDatabase = mHelper.getWritableDatabase();
        Cursor cursor = sqLiteDatabase.query("Diary", null, null, null, null, null, null);

        if (cursor.moveToFirst()) {
            do {
                String date = cursor.getString(cursor.getColumnIndex("date"));
                String dateSystem = GetDate.getDate().toString();
                if (date.equals(dateSystem)) {
                    mMainLlMain.removeView(mItemFirst);

                    break;
                }
            } while (cursor.moveToNext());
        }


        if (cursor.moveToFirst()) {
            do {
                String date = cursor.getString(cursor.getColumnIndex("date"));
                String title = cursor.getString(cursor.getColumnIndex("title"));
                String content = cursor.getString(cursor.getColumnIndex("content"));
                String tag = cursor.getString(cursor.getColumnIndex("tag"));
                mDiaryBeanList.add(new diaryBean(date, title, content, tag));
            } while (cursor.moveToNext());
        }
        cursor.close();

        for (int i = mDiaryBeanList.size() - 1; i >= 0; i--) {
            diaryList.add(mDiaryBeanList.get(i));
        }

        mDiaryBeanList = diaryList;
        return mDiaryBeanList;
    }

    @Subscribe
    public void startUpdateDiaryActivity(StartUpdateDiaryEvent event) {
        String title = mDiaryBeanList.get(event.getPosition()).getTitle();
        String content = mDiaryBeanList.get(event.getPosition()).getContent();
        String tag = mDiaryBeanList.get(event.getPosition()).getTag();
        UpdateDiaryActivity.startActivity(getActivity(), title, content, tag);
        getActivity().finish();
       // onDestroy();

    }

    @Subscribe
    public void DelDiaryActivity(final DelDiaryEvent event) {
        //final String date = mDiaryBeanList.get(event.getPosition()).getDate();
         String title = mDiaryBeanList.get(event.getPosition()).getTitle();
         String content = mDiaryBeanList.get(event.getPosition()).getContent();
         final String tag = mDiaryBeanList.get(event.getPosition()).getTag();
        //UpdateDiaryActivity.startActivity(getActivity(), title, content, tag);
        android.support.v7.app.AlertDialog.Builder alertDialogBuilder = new android.support.v7.app.AlertDialog.Builder(getActivity());
        alertDialogBuilder.setMessage("确定要删除该日记吗？").setPositiveButton("确定", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int which) {

//                        String title = mUpdateDiaryEtTitle.getText().toString();
                //String tag = mTvTag.getText().toString();
                SQLiteDatabase dbDelete = mHelper.getWritableDatabase();
                dbDelete.delete("Diary", "tag = ?", new String[]{tag});
                mDiaryBeanList.remove(event.getPosition());
                diaryAdapter.notifyItemRemoved(event.getPosition());

              /*  getDiaryBeanList();
                RecyclerView.LayoutManager layoutManager=new LinearLayoutManager(getActivity());
                mMainRvShowDiary.setLayoutManager(layoutManager);*/
                diaryAdapter=new DiaryAdapter(getActivity().getApplicationContext(),mDiaryBeanList);
                mMainRvShowDiary.setAdapter(diaryAdapter);
                //if(event.getPosition()==0){
                    //mMainLlMain.addView(mItemFirst);
               // }



                //mMainRvShowDiary.notify();
                //mDiaryBeanList.remove(new diaryBean(date,title, content, tag));
                //diaryAdapter.notifyDataSetChanged();
                //FragmentOne.startActivity(getActivity());


               // FragmentOne.startActivity(UpdateDiaryActivity.this);
            }
        }).setNegativeButton("取消", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int which) {
            }
        }).show();
    }




    @Override
    public void onDestroy() {
        super.onDestroy();
        EventBus.getDefault().unregister(this);
    }

    @OnClick(R.id.main_fab_enter_edit)
    public void onClick() {
        AddDiaryActivity.startActivity(getActivity());
        getActivity().finish();
    }

    public void onResume(){
        super.onResume();

        mSearchView.setFocusable(true);
        mSearchView.setFocusableInTouchMode(true);
        //onCreateView(null,null,null);
    }
    public void onStart(){
        super.onStart();
        //getDiaryBeanList();

        //diaryAdapter.notifyDataSetChanged();
    }


}






package com.dzx.fragment;

import android.Manifest;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;

import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;

import android.support.v4.app.ActivityCompat;
import android.support.v4.app.Fragment;
import android.support.v4.content.ContextCompat;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ListView;
import android.widget.TextView;

import com.amap.api.location.AMapLocation;
import com.amap.api.location.AMapLocationClient;
import com.amap.api.location.AMapLocationClientOption;
import com.amap.api.location.AMapLocationListener;
import com.dzx.Adapter.weatherInfoViewAdapter;
import com.dzx.Bean.weatherInfoBean;
import com.dzx.R;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Random;

import okhttp3.Call;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

import com.dzx.Bean.weatherBean;
import com.google.gson.Gson;
import com.dzx.util.GetTime;
import static java.lang.Boolean.TRUE;


/**
 * Created by 杜卓轩 on 2018/2/28.
 */


public class FragmentThree extends Fragment implements AMapLocationListener{
    public AMapLocationClient mLocationClient=null;
    public AMapLocationClientOption mLocationOption=null;
    public String city;
    public TextView fragment3;

    public String cityCode;
    public double mLatitude;
    public double mLongitude;
    public TextView textView2;
    public TextView t_city;
    public TextView t_date;
    public TextView t_temp;
    public TextView t_weath;
    public TextView t_wind;
    public TextView t_air;
    public String weatherInfo;
    public boolean flag=TRUE;

    public String s_city;
    public String s_date;
    public String s_temp;
    public String s_weath;
    public String s_wind;
    public String s_air;
    public GetTime mgetTime;

    public static SharedPreferences sp;


    private String randomTips_night[]={//17-21
            "记得好好吃晚饭！",
            "现在大概是晚上吧？（如果没有BUG的话）\n在自习，在上课，还是在去食堂的路上呢？",
            "诶嘿，今天过的怎么样啊！",
            "晚上好啊！",
            "什么东西都要坚持才好！请收下我这碗鸡汤！"
    };
    private String randomTips_morning[]={//6-8
            "嗨，早上好啊！",
            "今天天气怎么样呢？",
            "要带着一天的好心情啊！",
            "又是新的一天！",
            "要一直元气满满啊！会为你加油的！！"
    };
    private String randomTips_noon[]={//10-14
            "午安~！",
            "中午稍稍休息一下吧！",
            "不如小睡一下养足精神...",
            "感觉我们这里好热啊！",
            "记得不要在路上玩手机啊！注意安全。"
    };
    private String randomTips_midnight[]={//21-6
            "现在...应该是很晚了吧！",
            "还没有休息吗？",
            "如果没有什么事的话就早点休息吧！",
            "累吗...要照顾好自己啊",
            "如果已经很困，不如明早早些起完成待续的任务？"
    };
    private String randomTips_daily[]={//8-10
            "这里是日常问候哟！",
            "有什么不开心的事就在这里说一说吧！",
            "假装我能听见。",
            "(眯眼笑)",
            "一起笑一下！"
    };
    private String randomTips_afternoon[]={//14-17
            "大概是下午？",
            "在上课吗？好好听讲！",
            "也许自习很枯燥但是....不对！如果有人陪或许就不那么枯燥了吧！",
            "好吧？当我没说....",
            "那就这样吧！加油！"
    };

    Random rand=new Random();

    //测试代码。测试功能
    private weatherInfoViewAdapter weatherInfoViewAdapters;
    private ListView weather_listView;

    private List<weatherInfoBean> weatherInfoBeans_List = new ArrayList<weatherInfoBean>();
    private Handler handler_p = new Handler() {
        public void handleMessage(android.os.Message msg) {
            int what = msg.what;
            switch (what) {
                case 1:
                    /**
                     * ListView条目控制在最后一行
                     */
                    weather_listView.setSelection(weatherInfoBeans_List.size());
                    break;

                default:
                    break;
            }
        };
    };






    public static boolean isNetworkAvailable(Context context) {

        if(context!=null) {
            ConnectivityManager cm = (ConnectivityManager) context
                    .getSystemService(Context.CONNECTIVITY_SERVICE);
            if (cm == null) {return false;
            } else {
                //如果仅仅是用来判断网络连接
                //则可以使用 cm.getActiveNetworkInfo().isAvailable();
                NetworkInfo[] info = cm.getAllNetworkInfo();
                if (info != null) {
                    for (int i = 0; i < info.length; i++) {
                        if (info[i].getState() == NetworkInfo.State.CONNECTED) {
                            return true;
                        }
                    }
                }
            }
        }

        return false;
    }


    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        //View rootView = inflater.inflate(R.layout.fragment_3, container, false);
        View rootView = inflater.inflate(R.layout.fragment_weather, container, false);
        initPermission();
        location();



        //测试：

        weather_listView = (ListView) rootView.findViewById(R.id.lv_chat_dialog);
        Button btn_forecast_send = (Button) rootView.findViewById(R.id.btn_forecast);
        Button btn_tips_send = (Button) rootView.findViewById(R.id.btn_tips);
        /**
         * 发送按钮的点击事件
         */

        btn_tips_send.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View arg0) {

                // TODO Auto-generated method stub
               // if (isNetworkAvailable(getActivity().getApplicationContext())) {
                HashMap<String,Object> map=mgetTime.getTime();
                int nowtime=Integer.parseInt(map.get("hour").toString());
                int nowDay=Integer.parseInt(map.get("day").toString());
                sp = getActivity().getSharedPreferences("Time_record", Context.MODE_PRIVATE);

                if(nowtime-sp.getInt("LAST_TIME",0)>=2  ||nowDay-sp.getInt("LAST_DAY",0)!=0) {//如果与上次使用tips间隔超过三小时（仅使用hour来粗略估计）



                    SharedPreferences.Editor editor = sp.edit();
                    editor.putInt("LAST_TIME", nowtime);
                    editor.putInt("LAST_DAY",nowDay);
                    editor.commit();
                    //更新使用时间。

                    weatherInfoBean weatherInfoBeans = new weatherInfoBean();
                    weatherInfoBeans.setMeSend(true);
                    weatherInfoBeans.setIsNet(true);
                    weatherInfoBeans.setInfo("想说的话");
                    weatherInfoBeans_List.add(weatherInfoBeans);

                    //weatherInfoViewAdapters.notifyDataSetChanged();
                    // if (!isNetworkAvailable(getActivity().getApplicationContext())) {
                    weatherInfoViewAdapters = new weatherInfoViewAdapter(getActivity(), weatherInfoBeans_List);
                    weather_listView.setAdapter(weatherInfoViewAdapters);
                    //  }
                    weatherInfoViewAdapters.notifyDataSetChanged();

                    weatherInfoBeans = new weatherInfoBean();
                    weatherInfoBeans.setMeSend(false);
                    weatherInfoBeans.setIsWeather(false);

                    //Log.i("tag",map.get("hour").toString());
                    if (nowtime <= 24 && nowtime >= 21) {
                        int random_tips = rand.nextInt(5);
                        weatherInfoBeans.setTips(randomTips_midnight[random_tips]);
                    } else if (nowtime <= 21 && nowtime >= 17) {
                        int random_tips = rand.nextInt(5);
                        weatherInfoBeans.setTips(randomTips_night[random_tips]);
                    } else if (nowtime <= 17 && nowtime >= 14) {
                        int random_tips = rand.nextInt(5);
                        weatherInfoBeans.setTips(randomTips_afternoon[random_tips]);
                    } else if (nowtime <= 14 && nowtime >= 10) {
                        int random_tips = rand.nextInt(5);
                        weatherInfoBeans.setTips(randomTips_noon[random_tips]);
                    } else if (nowtime <= 10 && nowtime >= 8) {
                        int random_tips = rand.nextInt(5);
                        weatherInfoBeans.setTips(randomTips_daily[random_tips]);
                    } else if (nowtime <= 8 && nowtime >= 6) {
                        int random_tips = rand.nextInt(5);
                        weatherInfoBeans.setTips(randomTips_morning[random_tips]);
                    } else if (nowtime <= 6 && nowtime >= 0) {
                        int random_tips = rand.nextInt(5);
                        weatherInfoBeans.setTips(randomTips_midnight[random_tips]);
                    }


                    weatherInfoBeans_List.add(weatherInfoBeans);

                    weatherInfoViewAdapters.notifyDataSetChanged();
                    handler_p.sendEmptyMessage(1);
                }
                else {
                    weatherInfoBean weatherInfoBeans = new weatherInfoBean();
                    weatherInfoBeans.setMeSend(false);
                    weatherInfoBeans.setIsWeather(false);
                    //weatherInfoBeans.setIsNet(true);
                    weatherInfoBeans.setTips("先去忙吧！"+"\n"+"不要这么频繁的点击啊。"+"\n"+"考虑一下存货问题！"+"\n"+"留一些以后看可好...");
                    weatherInfoBeans_List.add(weatherInfoBeans);

                    //weatherInfoViewAdapters.notifyDataSetChanged();
                    // if (!isNetworkAvailable(getActivity().getApplicationContext())) {
                    weatherInfoViewAdapters = new weatherInfoViewAdapter(getActivity(), weatherInfoBeans_List);
                    weather_listView.setAdapter(weatherInfoViewAdapters);
                    //  }
                    weatherInfoViewAdapters.notifyDataSetChanged();
                    handler_p.sendEmptyMessage(1);
                }
               // }
               /*else{
                    weatherInfoBean weatherInfoBeans = new weatherInfoBean();
                    weatherInfoBeans.setMeSend(true);
                    weatherInfoBeans.setIsNet(false);
                    weatherInfoBeans.setNetInfo("网络没有连接上啊,请先连接网络再试");
                    weatherInfoBeans_List.add(weatherInfoBeans);
                    weatherInfoViewAdapters = new weatherInfoViewAdapter(getActivity(), weatherInfoBeans_List);
                    weather_listView.setAdapter(weatherInfoViewAdapters);
                    weatherInfoViewAdapters.notifyDataSetChanged();
                }*/
            }
        });
        btn_forecast_send.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View arg0) {
                // TODO Auto-generated method stub

                if (isNetworkAvailable(getActivity().getApplicationContext())) {
                    Log.i("tag","youwangluolianjie");
                    weatherInfoBean weatherInfoBeans = new weatherInfoBean();
                    weatherInfoBeans.setMeSend(true);
                    weatherInfoBeans.setIsNet(true);
                    weatherInfoBeans.setInfo("未来N天天气预报");
                    weatherInfoBeans_List.add(weatherInfoBeans);
                    //weatherInfoViewAdapters.notifyDataSetChanged();

                    /*try {
                        Thread.currentThread().sleep(1000);
                    }catch (InterruptedException e) {
                        e.printStackTrace();
                    }*/

                    weatherInfoBeans = new weatherInfoBean();
                    weatherInfoBeans.setMeSend(false);
                    weatherInfoBeans.setIsWeather(true);
                    Gson gson = new Gson();
                    weatherBean weatherBean = gson.fromJson(weatherInfo, weatherBean.class);
                    weatherInfoBeans.setParent_city(weatherBean.getHeWeather6().get(0).getBasic().getParent_city());
                    weatherInfoBeans.setCity(weatherBean.getHeWeather6().get(0).getBasic().getLocation());
                    weatherInfoBeans.setDate(weatherBean.getHeWeather6().get(0).getDaily_forecast().get(1).getDate());
                    weatherInfoBeans.setTemp(weatherBean.getHeWeather6().get(0).getDaily_forecast().get(1).getTmp_min());
                    weatherInfoBeans.setTemp_max(weatherBean.getHeWeather6().get(0).getDaily_forecast().get(1).getTmp_max());
                    weatherInfoBeans.setWeather(weatherBean.getHeWeather6().get(0).getDaily_forecast().get(1).getCond_txt_d());
                    weatherInfoBeans.setWind(weatherBean.getHeWeather6().get(0).getDaily_forecast().get(1).getWind_dir());
                    weatherInfoBeans_List.add(weatherInfoBeans);

                    weatherInfoViewAdapters.notifyDataSetChanged();


                    weatherInfoBeans = new weatherInfoBean();
                    weatherInfoBeans.setMeSend(false);
                    weatherInfoBeans.setIsWeather(true);
                    gson = new Gson();
                    weatherBean = gson.fromJson(weatherInfo, weatherBean.class);
                    weatherInfoBeans.setParent_city(weatherBean.getHeWeather6().get(0).getBasic().getParent_city());
                    weatherInfoBeans.setCity(weatherBean.getHeWeather6().get(0).getBasic().getLocation());
                    weatherInfoBeans.setDate(weatherBean.getHeWeather6().get(0).getDaily_forecast().get(2).getDate());
                    weatherInfoBeans.setTemp(weatherBean.getHeWeather6().get(0).getDaily_forecast().get(2).getTmp_min());
                    weatherInfoBeans.setTemp_max(weatherBean.getHeWeather6().get(0).getDaily_forecast().get(2).getTmp_max());
                    weatherInfoBeans.setWeather(weatherBean.getHeWeather6().get(0).getDaily_forecast().get(2).getCond_txt_d());
                    weatherInfoBeans.setWind(weatherBean.getHeWeather6().get(0).getDaily_forecast().get(2).getWind_dir());
                    weatherInfoBeans_List.add(weatherInfoBeans);
                    weatherInfoViewAdapters.notifyDataSetChanged();

                    handler_p.sendEmptyMessage(1);
                }
                else{
                    weatherInfoBean weatherInfoBeans = new weatherInfoBean();
                    weatherInfoBeans.setMeSend(true);
                    weatherInfoBeans.setIsNet(false);
                    weatherInfoBeans.setNetInfo("网络没有连接上啊,请先连接网络再试");
                    weatherInfoBeans_List.add(weatherInfoBeans);
                    weatherInfoViewAdapters = new weatherInfoViewAdapter(getActivity(), weatherInfoBeans_List);
                    weather_listView.setAdapter(weatherInfoViewAdapters);
                    weatherInfoViewAdapters.notifyDataSetChanged();
                    handler_p.sendEmptyMessage(1);
                }
            }
        });
      //  initView(rootView);

        return rootView;
    }


    private void initView(View rootView){
        fragment3= rootView.findViewById(R.id.fragment_3_text);
        textView2=rootView.findViewById(R.id.textView1);
        t_air=rootView.findViewById(R.id.tv_air);
        t_city=rootView.findViewById(R.id.tv_city);
        t_date=rootView.findViewById(R.id.tv_date);
        t_temp=rootView.findViewById(R.id.tv_temp);
        t_weath=rootView.findViewById(R.id.tv_weath);
        t_wind=rootView.findViewById(R.id.tv_wind);

    }
    @Override
    public void onStart(){
        super.onStart();
       // fragment3.setText(cityCode);
        //fragment3.setText("cityCode");
     //   Log.i("tag",cityCode);
       // textView2.setText(weatherInfo);
    }

    private void location() {
        //初始化定位
        mLocationClient = new AMapLocationClient(getContext());
        //设置定位回调监听
        mLocationClient.setLocationListener((AMapLocationListener) this);
        //初始化定位参数
        mLocationOption = new AMapLocationClientOption();
        //设置定位模式为Hight_Accuracy高精度模式，Battery_Saving为低功耗模式，Device_Sensors是仅设备模式
        mLocationOption.setLocationMode(AMapLocationClientOption.AMapLocationMode.Hight_Accuracy);
        //设置是否返回地址信息（默认返回地址信息）
        mLocationOption.setNeedAddress(true);
        //设置是否只定位一次,默认为false
        mLocationOption.setOnceLocation(true);
        //设置是否强制刷新WIFI，默认为强制刷新
        mLocationOption.setWifiActiveScan(true);
        //设置是否允许模拟位置,默认为false，不允许模拟位置
        mLocationOption.setMockEnable(false);
        //设置定位间隔,单位毫秒,默认为2000ms
        mLocationOption.setInterval(2000);

        //给定位客户端对象设置定位参数
        mLocationClient.setLocationOption(mLocationOption);

        //启动定位
        mLocationClient.startLocation();


    }

    @Override
    public void onLocationChanged(AMapLocation amapLocation) {

        if (amapLocation != null) {
            if (amapLocation.getErrorCode() == 0) {
                //可在其中解析amapLocation获取相应内容。
                amapLocation.getCountry();//国家信息
                amapLocation.getProvince();//省信息
                city = amapLocation.getCity().toString();//城市信息
                mLatitude = amapLocation.getLatitude();//获取纬度
                mLongitude = amapLocation.getLongitude();//获取经度
                new Thread(new Runnable() {
                    @Override
                    public void run() {
                        String url = "https://free-api.heweather.com/s6/weather?" +
                                "location=" + mLongitude + "," + mLatitude + "&" +
                                "key=1c3120151deb44f3aaa70d5c2e0e5581" + "&" +

                                "unit=m";

                        OkHttpClient okHttpClient = new OkHttpClient();
                        Request request = new Request.Builder().url(url).build();
                        Call call = okHttpClient.newCall(request);
                        try {
                            Response response = call.execute();
                            //打印json
                            //System.out.println(response.body().string());
                            // Log.i("tag",response.body().string());
                            weatherInfo = response.body().string();
                            Log.i("tag", weatherInfo);

                        } catch (IOException e) {
                            e.printStackTrace();
                            Log.i("tag", "ioexception wrong");
                            //textView2.setText("error");
                        }


                      //  s_air = weatherBean.getHeWeather6().get(0).getNow();


                      //  tv_qlty.setText("空气质量："+qlty);
                        handler.sendEmptyMessage(1);
                    }
                }).start();
                //System.out.println(mLatitude);
                //System.out.println(mLongitude);
                //fragment3.setText(city);
                /*city="北京";
                Cursor C=com.dzx.db.rawQuery("select * from city.com.dzx.db where city like" + city+"%",null);
                while	(C.moveToNext()) {
                    String	cityCode	=	C.getString(C.getColumnIndex("number"));
                }*/
               // fragment3.setText(cityCode);
             //   textView2.setText(weatherInfo);







                /*SharedPreferences sharedPreferences=getSharedPreferences("CityCodePreference", Activity_MODE_PRIVATE);
                SharedPreferences.Editor editor=sharedPreferences.edit();
                editor.putString("cityCode",cityCode);
                editor.commit();
                Intent intent=new intent(getActivity(),);
                intent.putExtra("cityCode",cityCode);
                startActivity(intent);*/

            }
        } else {
            //定位失败时，可通过ErrCode（错误码）信息来确定失败的原因，errInfo是错误信息，详见错误码表。
            Log.e("AmapError", "location Error, ErrCode:"
                    + amapLocation.getErrorCode() + ", errInfo:"
                    + amapLocation.getErrorInfo());
        }
    }




    private Handler handler = new Handler(){
        @Override
public  void handleMessage(Message msg) {
            switch (msg.what) {
                case 0:

                    break;
                case 1:
                   // fragment3.setText(cityCode);
                   // textView2.setText(weatherInfo);
                   // t_city.setText("城市："+s_city);
                    //t_date.setText("日期："+s_date);
                   // t_temp.setText("温度："+s_temp);
                   // t_weath.setText("天气情况："+s_weath);
                   // t_wind.setText("风向："+s_wind);
                    if (isNetworkAvailable(getActivity())) {
                        weatherInfoBean weatherInfoBeans = new weatherInfoBean();
                        weatherInfoBeans.setMeSend(false);
                        weatherInfoBeans.setIsWeather(true);
                        Gson gson = new Gson();
                        weatherBean weatherBean = gson.fromJson(weatherInfo, weatherBean.class);
                        weatherInfoBeans.setParent_city(weatherBean.getHeWeather6().get(0).getBasic().getParent_city());
                        weatherInfoBeans.setCity(weatherBean.getHeWeather6().get(0).getBasic().getLocation());
                        weatherInfoBeans.setDate(weatherBean.getHeWeather6().get(0).getDaily_forecast().get(0).getDate());
                        weatherInfoBeans.setTemp(weatherBean.getHeWeather6().get(0).getDaily_forecast().get(0).getTmp_min());
                        weatherInfoBeans.setTemp_max(weatherBean.getHeWeather6().get(0).getDaily_forecast().get(0).getTmp_max());
                        weatherInfoBeans.setWeather(weatherBean.getHeWeather6().get(0).getDaily_forecast().get(0).getCond_txt_d());
                        weatherInfoBeans.setWind(weatherBean.getHeWeather6().get(0).getDaily_forecast().get(0).getWind_dir());
                        weatherInfoBeans_List.add(weatherInfoBeans);

                        /**
                         *setAdapter
                         */
                        weatherInfoViewAdapters = new weatherInfoViewAdapter(getActivity(), weatherInfoBeans_List);
                        weather_listView.setAdapter(weatherInfoViewAdapters);
                        weatherInfoViewAdapters.notifyDataSetChanged();
                    }


                    break;
                default:
                    break;
            }
        }
    };








    private void initPermission() {
        String[] permissions = {
                Manifest.permission.ACCESS_COARSE_LOCATION,
                Manifest.permission.ACCESS_FINE_LOCATION,
                Manifest.permission.WRITE_EXTERNAL_STORAGE,
                Manifest.permission.READ_EXTERNAL_STORAGE,
                Manifest.permission.READ_PHONE_STATE
        };

        ArrayList<String> toApplyList = new ArrayList<String>();

        for (String perm : permissions) {
            if (PackageManager.PERMISSION_GRANTED != ContextCompat.checkSelfPermission(getActivity(), perm)) {
                toApplyList.add(perm);
                // 进入到这里代表没有权限.

            }
        }
        String[] tmpList = new String[toApplyList.size()];
        if (!toApplyList.isEmpty()) {
            ActivityCompat.requestPermissions(getActivity(), toApplyList.toArray(tmpList), 123);
        }

    }

    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        // 此处为android 6.0以上动态授权的回调，用户自行实现。
    }
}
package com.dzx.fragment;

import android.Manifest;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.support.v4.app.ActivityCompat;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.content.ContextCompat;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;

import com.baidu.speech.EventListener;
import com.baidu.speech.EventManager;
import com.baidu.speech.EventManagerFactory;
import com.baidu.speech.asr.SpeechConstant;
import com.dzx.Constants;
import com.dzx.R;

import org.json.JSONObject;

import java.util.ArrayList;

import java.util.LinkedHashMap;
import java.util.Map;

/**
 * Created by 杜卓轩 on 2018/2/28.
 */

//public class FragmentTwo extends BaseFragment {
   /* public static FragmentTwo newInstance(String s){
    Bundle bundle = new Bundle();
    bundle.putString(Constants.KEY_ARGS,s);
    FragmentTwo fragment = new FragmentTwo();
    fragment.setArguments(bundle);
    return fragment;
}*/
public class FragmentTwo extends Fragment implements EventListener{
    protected TextView txtLog;
    protected TextView txtResult;
    protected Button btn;
    protected Button stopBtn;
    private static String DESC_TEXT = "精简版识别，带有SDK唤醒运行的最少代码，仅仅展示如何调用，\n" +
            "也可以用来反馈测试SDK输入参数及输出回调。\n" +
            "本示例需要自行根据文档填写参数，可以使用之前识别示例中的日志中的参数。\n" +
            "需要完整版请参见之前的识别示例。\n" +
            "需要测试离线命令词识别功能可以将本类中的enableOffline改成true，首次测试离线命令词请联网使用。之后请说出“打电话给张三”";

    private EventManager asr;

    private boolean logTime = true;

    private boolean enableOffline = false; // 测试离线命令词，需要改成true

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View rootView = inflater.inflate(R.layout.fragment_2, container, false);


       // super.onCreate(savedInstanceState);


        initView(rootView);
        initPermission();
        asr = EventManagerFactory.create(getActivity(), "asr");
        asr.registerListener(this); //  EventListener 中 onEvent方法
        btn.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                start();
            }
        });
        stopBtn.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                stop();
            }
        });
        if (enableOffline) {
            loadOfflineEngine(); // 测试离线命令词请开启, 测试 ASR_OFFLINE_ENGINE_GRAMMER_FILE_PATH 参数时开启
        }
        return rootView;
    }

    /**
     * 测试参数填在这里
     */
    private void start() {
        txtLog.setText("");
        Map<String, Object> params = new LinkedHashMap<String, Object>();
        String event = null;
        event = SpeechConstant.ASR_START; // 替换成测试的event

        if (enableOffline) {
            params.put(SpeechConstant.DECODER, 2);
        }
        params.put(SpeechConstant.ACCEPT_AUDIO_VOLUME, false);
        // params.put(SpeechConstant.NLU, "enable");
        // params.put(SpeechConstant.VAD_ENDPOINT_TIMEOUT, 0); // 长语音
        // params.put(SpeechConstant.IN_FILE, "res:///com/baidu/android/voicedemo/16k_test.pcm");
        // params.put(SpeechConstant.VAD, SpeechConstant.VAD_DNN);
        // params.put(SpeechConstant.PROP ,20000);
        // params.put(SpeechConstant.PID, 1537); // 中文输入法模型，有逗号
        // 请先使用如‘在线识别’界面测试和生成识别参数。 params同ActivityRecog类中myRecognizer.start(params);
        String json = null; // 可以替换成自己的json
        json = new JSONObject(params).toString(); // 这里可以替换成你需要测试的json
        asr.send(event, json, null, 0, 0);
        printLog("输入参数：" + json);
    }

    private void stop() {
        printLog("停止识别：ASR_STOP");
        asr.send(SpeechConstant.ASR_STOP, null, null, 0, 0); //
    }

    private void loadOfflineEngine() {
        Map<String, Object> params = new LinkedHashMap<String, Object>();
        params.put(SpeechConstant.DECODER, 2);
        params.put(SpeechConstant.ASR_OFFLINE_ENGINE_GRAMMER_FILE_PATH, "assets://baidu_speech_grammar.bsg");
        asr.send(SpeechConstant.ASR_KWS_LOAD_ENGINE, new JSONObject(params).toString(), null, 0, 0);
    }

    private void unloadOfflineEngine() {
        asr.send(SpeechConstant.ASR_KWS_UNLOAD_ENGINE, null, null, 0, 0); //
    }



    @Override
    public void onDestroy() {
        super.onDestroy();
        asr.send(SpeechConstant.ASR_CANCEL, "{}", null, 0, 0);
        if (enableOffline) {
            unloadOfflineEngine(); // 测试离线命令词请开启, 测试 ASR_OFFLINE_ENGINE_GRAMMER_FILE_PATH 参数时开启
        }
    }

    //   EventListener  回调方法
    @Override
    public void onEvent(String name, String params, byte[] data, int offset, int length) {
        String logTxt = "name: " + name;


        if (params != null && !params.isEmpty()) {
            logTxt += " ;params :" + params;
        }
        if (name.equals(SpeechConstant.CALLBACK_EVENT_ASR_PARTIAL)) {
            if (params.contains("\"nlu_result\"")) {
                if (length > 0 && data.length > 0) {
                    logTxt += ", 语义解析结果：" + new String(data, offset, length);
                }
            }
        } else if (data != null) {
            logTxt += " ;data length=" + data.length;
        }
        printLog(logTxt);
    }

    private void printLog(String text) {
        if (logTime) {
            text += "  ;time=" + System.currentTimeMillis();
        }
        text += "\n";
        Log.i(getClass().getName(), text);
        txtLog.append(text + "\n");
    }


    private void initView(View rootView) {
        txtResult = (TextView) rootView.findViewById(R.id.txtResult);
        txtLog = (TextView) rootView.findViewById(R.id.txtLog);
        btn = (Button) rootView.findViewById(R.id.btn);
       // stopBtn = (Button) rootView.findViewById(R.id.btn_stop);
        txtLog.setText(DESC_TEXT + "\n");
    }

    /**
     * android 6.0 以上需要动态申请权限
     */
    private void initPermission() {
        String permissions[] = {Manifest.permission.RECORD_AUDIO,
                Manifest.permission.ACCESS_NETWORK_STATE,
                Manifest.permission.INTERNET,
                Manifest.permission.READ_PHONE_STATE,
                Manifest.permission.WRITE_EXTERNAL_STORAGE
        };

        ArrayList<String> toApplyList = new ArrayList<String>();

        for (String perm : permissions) {
            if (PackageManager.PERMISSION_GRANTED != ContextCompat.checkSelfPermission(getActivity(), perm)) {
                toApplyList.add(perm);
                // 进入到这里代表没有权限.

            }
        }
        String tmpList[] = new String[toApplyList.size()];
        if (!toApplyList.isEmpty()) {
            ActivityCompat.requestPermissions(getActivity(), toApplyList.toArray(tmpList), 123);
        }

    }

    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        // 此处为android 6.0以上动态授权的回调，用户自行实现。
    }

}

package com.dzx.Recognization.online;


import java.util.ArrayList;



public class ChainRecogListener implements IRecogListener {

    private ArrayList<IRecogListener> listeners;

    public ChainRecogListener() {
        listeners = new ArrayList<IRecogListener>();
    }

    public void addListener(IRecogListener listener) {
        listeners.add(listener);
    }

    /**
     * ASR_START 输入事件调用后，引擎准备完毕
     */
    @Override
    public void onAsrReady() {
        for (IRecogListener listener : listeners) {
            listener.onAsrReady();
        }
    }

    /**
     * onAsrReady后检查到用户开始说话
     */
    @Override
    public void onAsrBegin() {
        for (IRecogListener listener : listeners) {
            listener.onAsrBegin();
        }
    }

    /**
     * 检查到用户开始说话停止，或者ASR_STOP 输入事件调用后，
     */
    @Override
    public void onAsrEnd() {
        for (IRecogListener listener : listeners) {
            listener.onAsrEnd();
        }
    }

    /**
     * onAsrBegin 后 随着用户的说话，返回的临时结果
     *
     * @param results     可能返回多个结果，请取第一个结果
     * @param recogResult 完整的结果
     */
    @Override
    public void onAsrPartialResult(String[] results, RecogResult recogResult) {
        for (IRecogListener listener : listeners) {
            listener.onAsrPartialResult(results, recogResult);
        }
    }

    /**
     * 最终的识别结果
     *
     * @param results     可能返回多个结果，请取第一个结果
     * @param recogResult 完整的结果
     */
    @Override
    public void onAsrFinalResult(String[] results, RecogResult recogResult) {
        for (IRecogListener listener : listeners) {
            listener.onAsrFinalResult(results, recogResult);
        }
    }

    @Override
    public void onAsrFinish(RecogResult recogResult) {
        for (IRecogListener listener : listeners) {
            listener.onAsrFinish(recogResult);
        }
    }

    @Override
    public void onAsrFinishError(int errorCode, int subErrorCode, String errorMessage, String descMessage,
                                 RecogResult recogResult) {
        for (IRecogListener listener : listeners) {
            listener.onAsrFinishError(errorCode, subErrorCode, errorMessage, descMessage, recogResult);
        }
    }

    /**
     * 长语音识别结束
     */
    @Override
    public void onAsrLongFinish() {
        for (IRecogListener listener : listeners) {
            listener.onAsrLongFinish();
        }
    }

    @Override
    public void onAsrVolume(int volumePercent, int volume) {
        for (IRecogListener listener : listeners) {
            listener.onAsrVolume(volumePercent, volume);
        }
    }

    @Override
    public void onAsrAudio(byte[] data, int offset, int length) {
        for (IRecogListener listener : listeners) {
            listener.onAsrAudio(data, offset, length);
        }
    }

    @Override
    public void onAsrExit() {
        for (IRecogListener listener : listeners) {
            listener.onAsrExit();
        }
    }

    @Override
    public void onAsrOnlineNluResult(String nluResult) {
        for (IRecogListener listener : listeners) {
            listener.onAsrOnlineNluResult(nluResult);
        }
    }

    @Override
    public void onOfflineLoaded() {
        for (IRecogListener listener : listeners) {
            listener.onOfflineLoaded();
        }
    }

    @Override
    public void onOfflineUnLoaded() {
        for (IRecogListener listener : listeners) {
            listener.onOfflineUnLoaded();
        }
    }
}
package com.dzx.Recognization.online;

import android.app.Activity;
import android.content.SharedPreferences;
import android.os.Environment;

import com.dzx.util.FileUtil;
import com.dzx.util.Logger;
import com.baidu.speech.asr.SpeechConstant;
import com.dzx.R;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;


public class CommonRecogParams {

    protected String samplePath;
    /**
     * 字符串格式的参数
     */
    protected ArrayList<String> stringParams = new ArrayList<String>();

    /**
     * int格式的参数
     */
    protected ArrayList<String> intParams = new ArrayList<String>();

    /**
     * bool格式的参数
     */
    protected ArrayList<String> boolParams = new ArrayList<String>();

    private static final String TAG = "CommonRecogParams";

    public CommonRecogParams(Activity context) {

        stringParams.addAll(Arrays.asList(
                SpeechConstant.VAD,
                SpeechConstant.IN_FILE
        ));
        intParams.addAll(Arrays.asList(
                SpeechConstant.VAD_ENDPOINT_TIMEOUT
        ));
        boolParams.addAll(Arrays.asList(
                SpeechConstant.ACCEPT_AUDIO_DATA,
                SpeechConstant.ACCEPT_AUDIO_VOLUME
        ));
        initSamplePath(context);
    }

    /**
     * 创建保存OUTFILE的临时目录. 仅用于OUTFILE参数。不使用demo中的OUTFILE参数可忽略此段
     *
     * @param context
     */
    protected void initSamplePath(Activity context) {
        String sampleDir = "baiduASR";
        samplePath = Environment.getExternalStorageDirectory().toString() + "/" + sampleDir;
        if (!FileUtil.makeDir(samplePath)) {
            samplePath = context.getApplication().getExternalFilesDir(sampleDir).getAbsolutePath();
            if (!FileUtil.makeDir(samplePath)) {
                throw new RuntimeException("创建临时目录失败 :" + samplePath);
            }
        }
    }

    public Map<String, Object> fetch(SharedPreferences sp) {
        Map<String, Object> map = new HashMap<String, Object>();

        parseParamArr(sp, map);

      /*  if (sp.getBoolean("_tips_sound", false)) { // 声音回调
            map.put(SpeechConstant.SOUND_START, R.raw.bdspeech_recognition_start);
            map.put(SpeechConstant.SOUND_END, R.raw.bdspeech_speech_end);
            map.put(SpeechConstant.SOUND_SUCCESS, R.raw.bdspeech_recognition_success);
            map.put(SpeechConstant.SOUND_ERROR, R.raw.bdspeech_recognition_error);
            map.put(SpeechConstant.SOUND_CANCEL, R.raw.bdspeech_recognition_cancel);
        }
*/
        if (sp.getBoolean("_outfile", false)) { // 保存录音文件
            map.put(SpeechConstant.ACCEPT_AUDIO_DATA, true); // 目前必须开启此回掉才嫩保存音频
            map.put(SpeechConstant.OUT_FILE, samplePath + "/outfile.pcm");
            Logger.info(TAG, "语音录音文件将保存在：" + samplePath + "/outfile.pcm");
        }

        return map;
    }

    /**
     * 根据 stringParams intParams boolParams中定义的参数名称，提取SharedPreferences相关字段
     *
     * @param sp
     * @param map
     */
    private void parseParamArr(SharedPreferences sp, Map<String, Object> map) {
        for (String name : stringParams) {
            if (sp.contains(name)) {
                String tmp = sp.getString(name, "").replaceAll(",.*", "").trim();
                if (null != tmp && !"".equals(tmp)) {
                    map.put(name, tmp);
                }
            }
        }
        for (String name : intParams) {
            if (sp.contains(name)) {
                String tmp = sp.getString(name, "").replaceAll(",.*", "").trim();
                if (null != tmp && !"".equals(tmp)) {
                    map.put(name, Integer.parseInt(tmp));
                }
            }
        }
        for (String name : boolParams) {
            if (sp.contains(name)) {
                map.put(name, sp.getBoolean(name, false));
            }
        }
    }
}

package com.dzx.Recognization.online;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;

/**
 * <p>
 * 解决大文件的输入问题。
 */

public class FileAudioInputStream extends InputStream {

    private InputStream in;

    public static final float SPEED = 2;

    public FileAudioInputStream(String file) throws FileNotFoundException {
        in = new FileInputStream(file);
    }

    public FileAudioInputStream(InputStream in) {
        this.in = in;
    }

    private long firstRead = -1;
    private long returnCount;

    @Override
    public int read() throws IOException {
        throw new UnsupportedOperationException();
    }

    @Override
    public int read(byte[] buffer, int byteOffset, int byteCount) throws IOException {
        if (firstRead == -1) {
            firstRead = System.currentTimeMillis();
        }
        long limit = (long) ((System.currentTimeMillis() - firstRead) * 32 * SPEED);
        long count = Math.min((limit - returnCount), byteCount);
        if (count <= 0) {
            try {
                Thread.sleep(1);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            return 0;
        } else {
            int r = in.read(buffer, byteOffset, (int) count);
            if (r >= 0) {
                returnCount += r;
            }
            return r;
        }
    }

    @Override
    public void close() throws IOException {
        super.close();
        if (null != in) {
            in.close();
        }
    }
}
package com.dzx.Recognization.online;

import android.app.Activity;

import com.dzx.util.Logger;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;

/**

 */

public class InFileStream {

    private static Activity context;

    private static final String TAG = "InFileStream";

    public static void setContext(Activity context) {
        InFileStream.context = context;
    }

    private static String filename;

    private static InputStream is;

    public static void reset() {
        filename = null;
        is = null;
    }

    public static void setFileName(String filename) {
        InFileStream.filename = filename;
    }

    public static void setInputStream(InputStream is2) {
        is = is2;
    }

    public static InputStream create16kStream() {
        if (is != null) {
            return new FileAudioInputStream(is);
        } else if (filename != null) {
            try {
                return new FileAudioInputStream(filename);
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        } else {
            return new FileAudioInputStream(createFileStream());
        }
        return null;
    }

    private static InputStream createFileStream() {
        InputStream res = null;
        try {
            InputStream is = context.getAssets().open("outfile.pcm");
            Logger.info(TAG, "create input stream ok " + is.available());
            res = new FileAudioInputStream(is);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return res;
    }
}package com.dzx.Recognization.online;

import android.app.Activity;

import com.dzx.util.Logger;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;

/**

 */

public class InFileStream {

    private static Activity context;

    private static final String TAG = "InFileStream";

    public static void setContext(Activity context) {
        InFileStream.context = context;
    }

    private static String filename;

    private static InputStream is;

    public static void reset() {
        filename = null;
        is = null;
    }

    public static void setFileName(String filename) {
        InFileStream.filename = filename;
    }

    public static void setInputStream(InputStream is2) {
        is = is2;
    }

    public static InputStream create16kStream() {
        if (is != null) {
            return new FileAudioInputStream(is);
        } else if (filename != null) {
            try {
                return new FileAudioInputStream(filename);
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        } else {
            return new FileAudioInputStream(createFileStream());
        }
        return null;
    }

    private static InputStream createFileStream() {
        InputStream res = null;
        try {
            InputStream is = context.getAssets().open("outfile.pcm");
            Logger.info(TAG, "create input stream ok " + is.available());
            res = new FileAudioInputStream(is);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return res;
    }
}package com.dzx.Recognization.online;

import android.os.Handler;
import android.os.Message;

/**

 */

public class MessageStatusRecogListener extends StatusRecogListener {
    private Handler handler;

    private long speechEndTime;

    private boolean needTime = true;

    public MessageStatusRecogListener(Handler handler) {
        this.handler = handler;
    }


    @Override
    public void onAsrReady() {
        super.onAsrReady();
        sendStatusMessage("引擎就绪，可以开始说话。");
    }

    @Override
    public void onAsrBegin() {
        super.onAsrBegin();
        sendStatusMessage("检测到用户说话");
    }

    @Override
    public void onAsrEnd() {
        super.onAsrEnd();
        speechEndTime = System.currentTimeMillis();
        //sendMessage("检测到用户说话结束");
    }

    @Override
    public void onAsrPartialResult(String[] results, RecogResult recogResult) {
        sendStatusMessage("临时识别结果，结果是“" + results[0] + "”；原始json：" + recogResult.getOrigalJson());
        super.onAsrPartialResult(results, recogResult);
    }

    @Override
    public void onAsrFinalResult(String[] results, RecogResult recogResult) {
        super.onAsrFinalResult(results, recogResult);
        //String message = "识别结束，结果是”" + results[0] + "”";
        String message =  results[0] ;
        sendStatusMessage(message + "“；原始json：" + recogResult.getOrigalJson());
        if (speechEndTime > 0) {
            long diffTime = System.currentTimeMillis() - speechEndTime;
            //message += "；说话结束到识别结束耗时【" + diffTime + "ms】";

        }
        speechEndTime = 0;
        sendMessage(message, status, true);
    }

    @Override
    public void onAsrFinishError(int errorCode, int subErrorCode, String errorMessage, String descMessage,
                                 RecogResult recogResult) {
        super.onAsrFinishError(errorCode, subErrorCode, errorMessage, descMessage, recogResult);
        String message = "";
        sendStatusMessage(message + "；错误消息:" + errorMessage + "；描述信息：" + descMessage);
        if (speechEndTime > 0) {
            long diffTime = System.currentTimeMillis() - speechEndTime;
            //message += "。说话结束到识别结束耗时【" + diffTime + "ms】";
        }
        speechEndTime = 0;
        sendMessage(message, status, true);
        speechEndTime = 0;
    }

    @Override
    public void onAsrOnlineNluResult(String nluResult) {
        super.onAsrOnlineNluResult(nluResult);
        if (!nluResult.isEmpty()) {
            sendStatusMessage("原始语义识别结果json：" + nluResult);
        }
    }

    @Override
    public void onAsrFinish(RecogResult recogResult) {
        super.onAsrFinish(recogResult);
        sendStatusMessage("识别一段话结束。如果是长语音的情况会继续识别下段话。");

    }

    /**
     * 长语音识别结束
     */
    @Override
    public void onAsrLongFinish() {
        super.onAsrLongFinish();
        sendStatusMessage("长语音识别结束。");
    }


    /**
     * 使用离线命令词时，有该回调说明离线语法资源加载成功
     */
    @Override
    public void onOfflineLoaded() {
        sendStatusMessage("【重要】asr.loaded：离线资源加载成功。没有此回调可能离线语法功能不能使用。");
    }

    /**
     * 使用离线命令词时，有该回调说明离线语法资源加载成功
     */
    @Override
    public void onOfflineUnLoaded() {
        sendStatusMessage(" 离线资源卸载成功。");
    }

    @Override
    public void onAsrExit() {
        super.onAsrExit();
        sendStatusMessage("识别引擎结束并空闲中");
    }

    private void sendStatusMessage(String message) {
        sendMessage(message, status);
    }

    private void sendMessage(String message) {
        sendMessage(message, WHAT_MESSAGE_STATUS);
    }

    private void sendMessage(String message, int what) {
        sendMessage(message, what, false);
    }


    private void sendMessage(String message, int what, boolean highlight) {
        if (needTime && what != STATUS_FINISHED) {
            message += "  ;time=" + System.currentTimeMillis();
        }
        Message msg = Message.obtain();
        msg.what = what;
        msg.arg1 = status;
        if (highlight) {
            msg.arg2 = 1;
        }
        //msg.obj = message + "\n";
        msg.obj=message;
        handler.sendMessage(msg);
    }
}
package com.dzx.Recognization.online;

import android.media.AudioFormat;
import android.media.AudioRecord;
import android.media.MediaRecorder;
import android.support.annotation.NonNull;
import android.util.Log;

import java.io.IOException;
import java.io.InputStream;

/**

 */

public class MicrophoneInputStream extends InputStream {
    private static AudioRecord audioRecord;

    private static MicrophoneInputStream is;

    private boolean isStarted = false;

    private static final String TAG = "MicrophoneInputStream";

    public MicrophoneInputStream() {

        if (audioRecord != null) {
            int bufferSize = AudioRecord.getMinBufferSize(16000,
                    AudioFormat.CHANNEL_CONFIGURATION_MONO, AudioFormat.ENCODING_PCM_16BIT) * 16;
            audioRecord = new AudioRecord(MediaRecorder.AudioSource.MIC,
                    16000, AudioFormat.CHANNEL_CONFIGURATION_MONO, AudioFormat.ENCODING_PCM_16BIT, bufferSize);
        }


    }

    public static MicrophoneInputStream getInstance() {

        if (is == null) {
            synchronized (MicrophoneInputStream.class) {
                if (is == null) {
                    is = new MicrophoneInputStream();
                }
            }
        }
        return is;
    }

    public void start() {
        Log.i(TAG, " MicrophoneInputStream start recoding");
        if (audioRecord == null
                || audioRecord.getState() != AudioRecord.STATE_INITIALIZED) {
            throw new IllegalStateException(
                    "startRecording() called on an uninitialized AudioRecord.");
        }
        audioRecord.startRecording();
    }

    @Override
    public int read() throws IOException {
        throw new UnsupportedOperationException();
    }

    @Override
    public int read(@NonNull byte[] b, int off, int len) throws IOException {
        if (!isStarted) {
            start(); // 建议在CALLBACK_EVENT_ASR_READY事件中调用。
            isStarted = true;
        }
        int count = audioRecord.read(b, off, len);
        // Log.i(TAG, " MicrophoneInputStream read count:" + count);
        return count;
    }

    @Override
    public void close() throws IOException {
        Log.i(TAG, " MicrophoneInputStream close");
        if (audioRecord != null) {
            audioRecord.stop();
            audioRecord.release();
            isStarted = false;
        }
    }
}
package com.dzx.Recognization.online;

import android.media.AudioFormat;
import android.media.AudioRecord;
import android.media.MediaRecorder;
import android.support.annotation.NonNull;
import android.util.Log;

import java.io.IOException;
import java.io.InputStream;

/**

 */

public class MicrophoneInputStream extends InputStream {
    private static AudioRecord audioRecord;

    private static MicrophoneInputStream is;

    private boolean isStarted = false;

    private static final String TAG = "MicrophoneInputStream";

    public MicrophoneInputStream() {

        if (audioRecord != null) {
            int bufferSize = AudioRecord.getMinBufferSize(16000,
                    AudioFormat.CHANNEL_CONFIGURATION_MONO, AudioFormat.ENCODING_PCM_16BIT) * 16;
            audioRecord = new AudioRecord(MediaRecorder.AudioSource.MIC,
                    16000, AudioFormat.CHANNEL_CONFIGURATION_MONO, AudioFormat.ENCODING_PCM_16BIT, bufferSize);
        }


    }

    public static MicrophoneInputStream getInstance() {

        if (is == null) {
            synchronized (MicrophoneInputStream.class) {
                if (is == null) {
                    is = new MicrophoneInputStream();
                }
            }
        }
        return is;
    }

    public void start() {
        Log.i(TAG, " MicrophoneInputStream start recoding");
        if (audioRecord == null
                || audioRecord.getState() != AudioRecord.STATE_INITIALIZED) {
            throw new IllegalStateException(
                    "startRecording() called on an uninitialized AudioRecord.");
        }
        audioRecord.startRecording();
    }

    @Override
    public int read() throws IOException {
        throw new UnsupportedOperationException();
    }

    @Override
    public int read(@NonNull byte[] b, int off, int len) throws IOException {
        if (!isStarted) {
            start(); // 建议在CALLBACK_EVENT_ASR_READY事件中调用。
            isStarted = true;
        }
        int count = audioRecord.read(b, off, len);
        // Log.i(TAG, " MicrophoneInputStream read count:" + count);
        return count;
    }

    @Override
    public void close() throws IOException {
        Log.i(TAG, " MicrophoneInputStream close");
        if (audioRecord != null) {
            audioRecord.stop();
            audioRecord.release();
            isStarted = false;
        }
    }
}
package com.dzx.Recognization.online;

import android.app.Activity;
import android.content.SharedPreferences;



import com.baidu.speech.asr.SpeechConstant;

import java.util.Arrays;
import java.util.Map;




public class OnlineRecogParams extends CommonRecogParams {


    private static final String TAG = "OnlineRecogParams";

    public OnlineRecogParams(Activity context) {
        super(context);

        stringParams.addAll(Arrays.asList(
                "_language", // 用于生成PID参数
                "_model" // 用于生成PID参数
        ));

        intParams.addAll(Arrays.asList(SpeechConstant.PROP));

        boolParams.addAll(Arrays.asList(SpeechConstant.DISABLE_PUNCTUATION));

    }


    public Map<String, Object> fetch(SharedPreferences sp) {
        Map<String, Object> map = super.fetch(sp);
        PidBuilder builder = new PidBuilder();
        map = builder.addPidInfo(map); // 生成PID， PID 网络在线有效
        return map;

    }

}
package com.dzx.Recognization.online;

import com.baidu.speech.asr.SpeechConstant;

import java.util.HashMap;
import java.util.Map;

/**
 * 根据语言， 搜索模型或输入法模型和是否需要语义功能 生成对应PID

 */

public class PidBuilder {

    public static final String PUDONGHUA = "cmn-Hans-CN";

    public static final String ENGLISH = "en-GB";

    public static final String SICHUAN = "sichuan-Hans-CN";

    public static final String YUEYU = "yue-Hans-CN";

    public static final String SEARCH = "search";

    public static final String INPUT = "input";

    public static final String FAR = "far";

    private static Map<String, Integer> map;

    private String language = PUDONGHUA;

    private String model = SEARCH;

    private boolean supportNlu = false;

    private boolean emptyParams = false;

    static {
        map = new HashMap<String, Integer>(16);
        createPid(1536, PUDONGHUA, SEARCH, false);
        createPid(15361, PUDONGHUA, SEARCH, true);
        createPid(1537, PUDONGHUA, INPUT, false);
        createPid(1736, ENGLISH, SEARCH, false);
        createPid(1737, ENGLISH, INPUT, false);
        createPid(1636, YUEYU, SEARCH, false);
        createPid(1637, YUEYU, INPUT, false);
        createPid(1836, SICHUAN, SEARCH, false);
        createPid(1837, SICHUAN, INPUT, false);
        createPid(1936, PUDONGHUA, FAR, false);
        createPid(1936, PUDONGHUA, FAR, true);
    }

    public static PidBuilder create() {
        return new PidBuilder();
    }

    /**
     * 从 params中 根据_language _model和_nlu_online这三个临时参数，输出PID并加入到params中。
     *
     * @param params
     * @return
     */
    public Map<String, Object> addPidInfo(Map<String, Object> params) {
        if (params != null) {
            Object lang = params.get("_language");
            params.remove("_language");
            Object onlineModel = params.get("_model");
            params.remove("_model");
            Object nlu = params.get("_nlu_online");
            params.remove("_nlu_online");
            if (lang == null && onlineModel == null && nlu == null) {
                emptyParams = true;
            } else {
                if (lang != null) {
                    language(String.valueOf(lang));
                }
                if (onlineModel != null) {
                    model(String.valueOf(onlineModel));
                }
                if (nlu != null) {
                    supportNlu(Boolean.valueOf(nlu.toString()));
                }
            }
            int pid = toPId();
            if (pid > 0) {
                params.put(SpeechConstant.PID, pid);
            }
        }

        return params;
    }

    /**
     * 返回负数的话，即没有生成PID成功，请不要设置
     *
     * @return -1 没对应pid
     * -2  用于使用 PidBuilder(params), params为空或者没有相关选项用于确定PID
     */
    public int toPId() {
        if (emptyParams) { // 用于 PidBuilder(Map<String,Object> params)
            return -2;
        }

        String key = language + "_" + model + "_" + (supportNlu ? 1 : 0);
        Integer result = map.get(key);
        if (result == null) {
            return -1;
        } else {
            return result;
        }
    }

    /**
     * 语言
     *
     * @param language
     * @return
     */
    public PidBuilder language(String language) {
        this.language = language;
        emptyParams = false;
        return this;
    }

    /**
     * 输入法模型或者搜索模型
     *
     * @param model
     * @return
     */
    public PidBuilder model(String model) {
        this.model = model;
        emptyParams = false;
        return this;
    }

    /**
     * 是否开启语义识别
     *
     * @param supportNlu
     * @return
     */
    public PidBuilder supportNlu(boolean supportNlu) {
        this.supportNlu = supportNlu;
        emptyParams = false;
        return this;
    }

    private static void createPid(int pid, String lang, String onlineModel, boolean nlu) {
        String key = lang + "_" + onlineModel + "_" + (nlu ? 1 : 0);
        map.put(key, pid);
    }
}
package com.dzx.Recognization.online;

import android.util.Log;

import com.dzx.control.ErrorTranslation;
import com.dzx.util.Logger;
import com.baidu.speech.EventListener;
import com.baidu.speech.asr.SpeechConstant;

import org.json.JSONException;
import org.json.JSONObject;




public class RecogEventAdapter implements EventListener {

    private static final String TAG = "RecogEventAdapter";


    private IRecogListener listener;

    public RecogEventAdapter(IRecogListener listener) {
        this.listener = listener;
    }

    protected String currentJson;

    @Override
    public void onEvent(String name, String params, byte[] data, int offset, int length) {
        currentJson = params;
        String logMessage = "name:" + name + "; params:" + params;

        // logcat 中 搜索RecogEventAdapter，即可以看见下面一行的日志
        Log.i(TAG, logMessage);
        if (false) { // 可以调试，不需要后续逻辑
            return;
        }
        if (name.equals(SpeechConstant.CALLBACK_EVENT_ASR_LOADED)) {
            listener.onOfflineLoaded();
        } else if (name.equals(SpeechConstant.CALLBACK_EVENT_ASR_UNLOADED)) {
            listener.onOfflineUnLoaded();
        } else if (name.equals(SpeechConstant.CALLBACK_EVENT_ASR_READY)) {
            // 引擎准备就绪，可以开始说话
            listener.onAsrReady();

        } else if (name.equals(SpeechConstant.CALLBACK_EVENT_ASR_BEGIN)) {
            // 检测到用户的已经开始说话
            listener.onAsrBegin();

        } else if (name.equals(SpeechConstant.CALLBACK_EVENT_ASR_END)) {
            // 检测到用户的已经停止说话
            listener.onAsrEnd();

        } else if (name.equals(SpeechConstant.CALLBACK_EVENT_ASR_PARTIAL)) {
            RecogResult recogResult = RecogResult.parseJson(params);
            // 临时识别结果, 长语音模式需要从此消息中取出结果
            String[] results = recogResult.getResultsRecognition();
            if (recogResult.isFinalResult()) {
                listener.onAsrFinalResult(results, recogResult);
            } else if (recogResult.isPartialResult()) {
                listener.onAsrPartialResult(results, recogResult);
            } else if (recogResult.isNluResult()) {
                listener.onAsrOnlineNluResult(new String(data, offset, length));
            }

        } else if (name.equals(SpeechConstant.CALLBACK_EVENT_ASR_FINISH)) {
            // 识别结束， 最终识别结果或可能的错误
            RecogResult recogResult = RecogResult.parseJson(params);
            if (recogResult.hasError()) {
                int errorCode = recogResult.getError();
                int subErrorCode = recogResult.getSubError();
                Logger.error(TAG, "asr error:" + params);
                listener.onAsrFinishError(errorCode, subErrorCode, ErrorTranslation.recogError(errorCode), recogResult.getDesc(), recogResult);
            } else {
                listener.onAsrFinish(recogResult);
            }

        } else if (name.equals(SpeechConstant.CALLBACK_EVENT_ASR_LONG_SPEECH)) { //长语音
            listener.onAsrLongFinish();// 长语音
        } else if (name.equals(SpeechConstant.CALLBACK_EVENT_ASR_EXIT)) {
            listener.onAsrExit();
        } else if (name.equals(SpeechConstant.CALLBACK_EVENT_ASR_VOLUME)) {
            // Logger.info(TAG, "asr volume event:" + params);
            Volume vol = parseVolumeJson(params);
            listener.onAsrVolume(vol.volumePercent, vol.volume);
        } else if (name.equals(SpeechConstant.CALLBACK_EVENT_ASR_AUDIO)) {
            if (data.length != length) {
                Logger.error(TAG, "internal error: asr.audio callback data length is not equal to length param");
            }
            listener.onAsrAudio(data, offset, length);
        }
    }


    private Volume parseVolumeJson(String jsonStr) {
        Volume vol = new Volume();
        vol.origalJson = jsonStr;
        try {
            JSONObject json = new JSONObject(jsonStr);
            vol.volumePercent = json.getInt("volume-percent");
            vol.volume = json.getInt("volume");
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return vol;
    }

    private class Volume {
        private int volumePercent = -1;
        private int volume = -1;
        private String origalJson;
    }

}
package com.dzx.Recognization.online;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/**

 */
public class RecogResult {
    private static final int ERROR_NONE = 0;

    private String origalJson;
    private String[] resultsRecognition;
    private String origalResult;
    private String sn; // 日志id， 请求有问题请提问带上sn
    private String desc;
    private String resultType;
    private int error = -1;
    private int subError = -1;

    public static RecogResult parseJson(String jsonStr) {
        RecogResult result = new RecogResult();
        result.setOrigalJson(jsonStr);
        try {
            JSONObject json = new JSONObject(jsonStr);
            int error = json.optInt("error");
            int subError = json.optInt("sub_error");
            result.setError(error);
            result.setDesc(json.optString("desc"));
            result.setResultType(json.optString("result_type"));
            if (error == ERROR_NONE) {
                result.setOrigalResult(json.getString("origin_result"));
                JSONArray arr = json.optJSONArray("results_recognition");
                if (arr != null) {
                    int size = arr.length();
                    String[] recogs = new String[size];
                    for (int i = 0; i < size; i++) {
                        recogs[i] = arr.getString(i);
                    }
                    result.setResultsRecognition(recogs);
                }


            }
        } catch (JSONException e) {
            e.printStackTrace();
        }

        return result;
    }

    public boolean hasError() {
        return error != ERROR_NONE;
    }

    public boolean isFinalResult() {
        return "final_result".equals(resultType);
    }


    public boolean isPartialResult() {
        return "partial_result".equals(resultType);
    }

    public boolean isNluResult() {
        return "nlu_result".equals(resultType);
    }

    public String getOrigalJson() {
        return origalJson;
    }

    public void setOrigalJson(String origalJson) {
        this.origalJson = origalJson;
    }

    public String[] getResultsRecognition() {
        return resultsRecognition;
    }

    public void setResultsRecognition(String[] resultsRecognition) {
        this.resultsRecognition = resultsRecognition;
    }

    public String getSn() {
        return sn;
    }

    public void setSn(String sn) {
        this.sn = sn;
    }

    public int getError() {
        return error;
    }

    public void setError(int error) {
        this.error = error;
    }

    public String getDesc() {
        return desc;
    }

    public void setDesc(String desc) {
        this.desc = desc;
    }

    public String getOrigalResult() {
        return origalResult;
    }

    public void setOrigalResult(String origalResult) {
        this.origalResult = origalResult;
    }

    public String getResultType() {
        return resultType;
    }

    public void setResultType(String resultType) {
        this.resultType = resultType;
    }

    public int getSubError() {
        return subError;
    }

    public void setSubError(int subError) {
        this.subError = subError;
    }
}
package com.dzx.Recognization.online;

/**

 */

import android.util.Log;

public class StatusRecogListener implements IRecogListener, IStatus {

    private static final String TAG = "StatusRecogListener";

    /**
     * 识别的引擎当前的状态
     */
    protected int status = STATUS_NONE;

    @Override
    public void onAsrReady() {
        status = STATUS_READY;
    }

    @Override
    public void onAsrBegin() {
        status = STATUS_SPEAKING;
    }

    @Override
    public void onAsrEnd() {
        status = STATUS_RECOGNITION;
    }

    @Override
    public void onAsrPartialResult(String[] results, RecogResult recogResult) {


    }

    @Override
    public void onAsrFinalResult(String[] results, RecogResult recogResult) {
        status = STATUS_FINISHED;
    }

    @Override
    public void onAsrFinish(RecogResult recogResult) {
        status = STATUS_FINISHED;
    }


    @Override
    public void onAsrFinishError(int errorCode, int subErrorCode, String errorMessage, String descMessage,
                                 RecogResult recogResult) {
        status = STATUS_FINISHED;
    }

    /**
     * 长语音识别结束
     */
    @Override
    public void onAsrLongFinish() {
        status = STATUS_FINISHED;
    }

    @Override
    public void onAsrVolume(int volumePercent, int volume) {
        Log.i(TAG, "音量百分比" + volumePercent + " ; 音量" + volume);
    }

    @Override
    public void onAsrAudio(byte[] data, int offset, int length) {
        if (offset != 0 || data.length != length) {
            byte[] actualData = new byte[length];
            System.arraycopy(data, 0, actualData, 0, length);
            data = actualData;
        }

        Log.i(TAG, "音频数据回调, length:" + data.length);
    }

    @Override
    public void onAsrExit() {
        status = STATUS_NONE;
    }

    @Override
    public void onAsrOnlineNluResult(String nluResult) {
        status = STATUS_FINISHED;
    }

    @Override
    public void onOfflineLoaded() {

    }

    @Override
    public void onOfflineUnLoaded() {

    }


}
package com.dzx;


import android.content.Intent;
import android.os.Bundle;
import android.support.design.widget.FloatingActionButton;
import android.support.design.widget.Snackbar;

import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentTransaction;

import android.support.v4.view.ViewPager;
import android.view.View;
import android.support.design.widget.NavigationView;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.view.Menu;
import android.view.MenuItem;

import com.ashokvarma.bottomnavigation.BottomNavigationBar;
import com.ashokvarma.bottomnavigation.BottomNavigationItem;
import com.dzx.Setting.Setting_use;
import com.dzx.fragment.FragmentCommon;
import com.dzx.fragment.FragmentFour;
import com.dzx.fragment.FragmentOne;
import com.dzx.fragment.FragmentThree;
import com.dzx.fragment.FragmentTwo;
import com.dzx.Adapter.SectionsPagerAdapter;
import java.util.ArrayList;
import java.util.List;


public class MainActivity extends AppCompatActivity
        implements NavigationView.OnNavigationItemSelectedListener,
        BottomNavigationBar.OnTabSelectedListener,
        ViewPager.OnPageChangeListener{

    //之前出现的问题是因为没有实现全部的接口的抽象方法，我加上reselected和unselected之后就不报错了。
    private ViewPager viewPager;
    private BottomNavigationBar mBottomNavigationBar;
    private List<Fragment> fragments;
    private MenuItem menuItem;
  //  private FragmentOne mFragmentOne;
   // private FragmentTwo mFragmentTwo;
  //  private FragmentThree mFragmentThree;
  //  private FragmentFour mFragmentFour;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        initView();

        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        //FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);
        /*fab.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Snackbar.make(view, "Replace with your own action", Snackbar.LENGTH_LONG)
                        .setAction("Action", null).show();
            }

        });*/

        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(
                this, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);
        drawer.addDrawerListener(toggle);
        toggle.syncState();

        NavigationView navigationView = (NavigationView) findViewById(R.id.nav_view);
        navigationView.setNavigationItemSelectedListener(this);

    }



    @Override
    public void onBackPressed() {
        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        if (drawer.isDrawerOpen(GravityCompat.START)) {
            drawer.closeDrawer(GravityCompat.START);
        } else {
            super.onBackPressed();
        }
    }



    private void initView(){
        initBottomNavigationBar();
        initViewPager();
    }

    private void initBottomNavigationBar(){
        mBottomNavigationBar = (BottomNavigationBar) findViewById(R.id.bottom_navigation_bar);
        mBottomNavigationBar.setTabSelectedListener(this);
        mBottomNavigationBar.clearAll();
        mBottomNavigationBar.setMode(BottomNavigationBar.MODE_FIXED);
        mBottomNavigationBar.setBackgroundStyle(BottomNavigationBar.BACKGROUND_STYLE_STATIC);
//        mBottomNavigationBar.setBackgroundStyle(BottomNavigationBar.BACKGROUND_STYLE_RIPPLE);
        mBottomNavigationBar.setBarBackgroundColor(R.color.red);//set background color for navigation bar
        mBottomNavigationBar.setInActiveColor(R.color.gray);//unSelected icon color
        mBottomNavigationBar.addItem(new BottomNavigationItem(R.drawable.ic_tab3, "记录").setActiveColorResource(R.color.white))
                .addItem(new BottomNavigationItem(R.drawable.ic_tab2, "声音").setActiveColorResource(R.color.white))
                .addItem(new BottomNavigationItem(R.drawable.ic_tab1, "天气").setActiveColorResource(R.color.white))
                .addItem(new BottomNavigationItem(R.drawable.icon_four, "没想好").setActiveColorResource(R.color.white))
                //.setFirstSelectedPosition(0)
                .initialise();


        //setDefaultFragment();
    }


    private void initViewPager(){
        viewPager = (ViewPager) findViewById(R.id.viewPager);
        viewPager.setOffscreenPageLimit(3);
        fragments = new ArrayList<Fragment>();
        fragments.add(new FragmentOne());
        fragments.add(new Fragment());
        fragments.add(new FragmentThree());
        fragments.add(new FragmentFour());

        viewPager.setAdapter(new SectionsPagerAdapter(getSupportFragmentManager(), fragments));
        viewPager.addOnPageChangeListener(this);
        viewPager.setCurrentItem(0);

    }

    /*private void setDefaultFragment() {
        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
        mFragmentOne = FragmentOne.newInstance("First Fragment");
        transaction.replace(R.id.bottom_nav_content, mFragmentOne).commit();
        //第一个参数是将fragment动态添加到那个id布局里，第二个参数是添加哪个fragment
        //还有add方法，remove方法。
        //transaction.commit()是提交事务。
    }*/
    //@Override
    public void onTabSelected(int position) {
       /* FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
        switch (position) {
            case 0:
                if (mFragmentOne == null) {
                    mFragmentOne = FragmentOne.newInstance("First Fragment");
                }
                transaction.replace(R.id.bottom_nav_content, mFragmentOne);
                break;
            case 1:
                if (mFragmentTwo == null) {
                    mFragmentTwo = FragmentTwo.newInstance("Second Fragment");
                }
                transaction.replace(R.id.bottom_nav_content, mFragmentTwo);
                break;
            case 2:
                if (mFragmentThree == null) {
                    mFragmentThree = FragmentThree.newInstance("Third Fragment");
                }
                transaction.replace(R.id.bottom_nav_content, mFragmentThree);
                break;
            case 3:
                if (mFragmentFour == null) {
                    mFragmentFour = FragmentFour.newInstance("Forth Fragment");
                }
                transaction.replace(R.id.bottom_nav_content, mFragmentFour);
                break;
            default:
                if (mFragmentOne == null) {
                    mFragmentOne = FragmentOne.newInstance("First Fragment");
                }
                transaction.replace(R.id.bottom_nav_content, mFragmentOne);
                break;
        }
        transaction.commit();*/
        viewPager.setCurrentItem(position);
    }
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.main, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        if (id == R.id.action_settings) {
            return true;
        }

        return super.onOptionsItemSelected(item);
    }

    @SuppressWarnings("StatementWithEmptyBody")
    @Override
    public boolean onNavigationItemSelected(MenuItem menuItem) {
        // Handle navigation view item clicks here.
        int id = menuItem.getItemId();

        if (id == R.id.nav_camera) {
            // Handle the camera action
        } else if (id == R.id.nav_gallery) {

        } else if (id == R.id.nav_slideshow) {


        } else if (id == R.id.nav_manage) {
            Intent intent=new Intent(MainActivity.this, Setting_use.class);
            startActivity(intent);



        } else if (id == R.id.nav_share) {

        } else if (id == R.id.nav_send) {

        }

        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        drawer.closeDrawer(GravityCompat.START);
        return true;
    }

    @Override

    public void onTabReselected(int position) {

    }
    @Override

    public void onTabUnselected(int position) {

    }
    @Override

    public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {

    }
    @Override
    public void onPageSelected(int position) {
        mBottomNavigationBar.selectTab(position);
    }
    @Override

    public void onPageScrollStateChanged(int state) {

    }

}
package com.dzx.Activity;

import android.Manifest;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.os.StrictMode;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.AppCompatActivity;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;


import com.dzx.LinedEditText;
import com.dzx.R;
import com.dzx.Recognization.online.InFileStream;
import com.dzx.util.Logger;

import java.util.ArrayList;



public abstract class ActivityCommon extends AppCompatActivity {
   // protected TextView txtLog;
    //protected Button btn;
    cc.trity.floatingactionbutton.FloatingActionButton mAddDiaryFabVoice;
    protected Button setting;
    protected LinedEditText txtResult;

    protected Handler handler2;

    protected String descText;

    protected int layout = R.layout.activity_add_diary;

    protected Class settingActivityClass = null;

    protected boolean running = false;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        // setStrictMode();
        InFileStream.setContext(this);
        setContentView(layout);

        initView();
        handler2 = new Handler() {

            /*
             * @param msg
             */
            @Override
            public void handleMessage(Message msg) {
                super.handleMessage(msg);
                handleMsg(msg);
            }

        };
        Logger.setHandler(handler2);
        initPermission();
        initRecog();
    }


    protected abstract void initRecog();

    protected void handleMsg(Message msg) {
        //if (txtLog != null && msg.obj != null) {
            //txtLog.append(msg.obj.toString() + "\n");
        //}
    }

    protected void initView() {
        txtResult = (LinedEditText) findViewById(R.id.add_diary_et_content);
        mAddDiaryFabVoice=findViewById(R.id.add_diary_fab_voice);
        //txtLog = (TextView) findViewById(R.id.txtLog);
       // btn = (Button) findViewById(R.id.btn);

        //txtLog.setText(descText + "\n");
        if (setting != null && settingActivityClass != null) {
            setting.setOnClickListener(new View.OnClickListener() {

                @Override
                public void onClick(View v) {
                    running = true;
                    Intent intent = new Intent(ActivityCommon.this, settingActivityClass);
                    startActivityForResult(intent, 1);
                }
            });
        }

    }

    /**
     * android 6.0 以上需要动态申请权限
     */
    private void initPermission() {
        String[] permissions = {
                Manifest.permission.RECORD_AUDIO,
                Manifest.permission.ACCESS_NETWORK_STATE,
                Manifest.permission.INTERNET,
                Manifest.permission.READ_PHONE_STATE,
                Manifest.permission.WRITE_EXTERNAL_STORAGE
        };

        ArrayList<String> toApplyList = new ArrayList<String>();

        for (String perm : permissions) {
            if (PackageManager.PERMISSION_GRANTED != ContextCompat.checkSelfPermission(this, perm)) {
                toApplyList.add(perm);
                // 进入到这里代表没有权限.

            }
        }
        String[] tmpList = new String[toApplyList.size()];
        if (!toApplyList.isEmpty()) {
            ActivityCompat.requestPermissions(this, toApplyList.toArray(tmpList), 123);
        }

    }

    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        // 此处为android 6.0以上动态授权的回调，用户自行实现。
    }

    private void setStrictMode() {
        StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder()
                .detectAll()
                .penaltyLog()
                .build());
        StrictMode.setVmPolicy(new StrictMode.VmPolicy.Builder()
                .detectLeakedSqlLiteObjects()
                .detectLeakedClosableObjects()
                .penaltyLog()
                .penaltyDeath()
                .build());

    }
}
package com.dzx.Activity;

import android.content.SharedPreferences;
import android.os.Bundle;
import android.os.Message;
import android.preference.PreferenceManager;
import android.util.Log;
import android.view.View;


import com.dzx.Recognization.online.CommonRecogParams;
import com.dzx.Recognization.online.IStatus;
import com.dzx.Recognization.online.MessageStatusRecogListener;
import com.dzx.Recognization.online.StatusRecogListener;
import com.dzx.control.MyRecognizer;

import java.util.Map;

/**
 * 识别的基类Activity。封装了识别的大部分逻辑，包括MyRecognizer的初始化，资源释放、
 * <p>
 * 大致流程为
 * 1. 实例化MyRecognizer ,调用release方法前不可以实例化第二个。参数中需要开发者自行填写语音识别事件的回调类，实现开发者自身的业务逻辑
 * 2. 如果使用离线命令词功能，需要调用loadOfflineEngine。在线功能不需要。
 * 3. 根据识别的参数文档，或者demo中测试出的参数，组成json格式的字符串。调用 start 方法
 * 4. 在合适的时候，调用release释放资源。
 * <p>

 */

public abstract class ActivityRecog extends ActivityCommon implements IStatus {

    /**
     * 识别控制器，使用MyRecognizer控制识别的流程
     */
    protected MyRecognizer myRecognizer;
     String voice_content="";
    /*
     * Api的参数类，仅仅用于生成调用START的json字符串，本身与SDK的调用无关
     */
    protected CommonRecogParams apiParams;

    /*
     * 本Activity中是否需要调用离线命令词功能。根据此参数，判断是否需要调用SDK的ASR_KWS_LOAD_ENGINE事件
     */
    protected boolean enableOffline = false;


    /**
     * 控制UI按钮的状态
     */
    protected int status;

    /**
     * 日志使用
     */
    private static final String TAG = "ActivityRecog";

    /**
     * 在onCreate中调用。初始化识别控制类MyRecognizer
     */
    protected void initRecog() {
        StatusRecogListener listener = new MessageStatusRecogListener(handler2);
        myRecognizer = new MyRecognizer(this, listener);
        apiParams = getApiParams();
        status = STATUS_NONE;

    }


    /**
     * 销毁时需要释放识别资源。
     */
    @Override
    protected void onDestroy() {
        myRecognizer.release();
        Log.i(TAG, "onDestory");
        super.onDestroy();
    }

    /**
     * 开始录音，点击“开始”按钮后调用。
     */
    protected void start() {
        SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(ActivityRecog.this);
        //  上面的获取是为了生成下面的Map， 自己集成时可以忽略
        Map<String, Object> params = apiParams.fetch(sp);
        // 集成时不需要上面的代码，只需要params参数。
        // 这里打印出params， 填写至您自己的app中，直接调用下面这行代码即可。
        myRecognizer.start(params);
    }


    /**
     * 开始录音后，手动停止录音。SDK会识别在此过程中的录音。点击“停止”按钮后调用。
     */
    protected void stop() {
        myRecognizer.stop();
    }

    /**
     * 开始录音后，取消这次录音。SDK会取消本次识别，回到原始状态。点击“取消”按钮后调用。
     */
    protected void cancel() {
        myRecognizer.cancel();
    }


    /**
     * @return
     */
    protected abstract CommonRecogParams getApiParams();

    // 以上为 语音SDK调用，以下为UI部分
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
    }


    @Override
    protected void initView() {
        super.initView();
        click();

    }
    protected void click() {


        switch (status) {
            case STATUS_NONE: // 初始状态
                start();
                status = STATUS_WAITING_READY;
                //updateBtnTextByStatus();
                //txtLog.setText("");
                //txtResult.setText("");
                break;
            case STATUS_WAITING_READY: // 调用本类的start方法后，即输入START事件后，等待引擎准备完毕。
            case STATUS_READY: // 引擎准备完毕。
            case STATUS_SPEAKING:
            case STATUS_FINISHED: // 长语音情况
            case STATUS_RECOGNITION:
                stop();
                status = STATUS_STOPPED; // 引擎识别中
                //updateBtnTextByStatus();
                break;
            case STATUS_STOPPED: // 引擎识别中
                cancel();
                status = STATUS_NONE; // 识别结束，回到初始状态
                //updateBtnTextByStatus();
                break;
            default:
                break;
        }

    }



    protected void handleMsg(Message msg) {
        super.handleMsg(msg);

        switch (msg.what) { // 处理MessageStatusRecogListener中的状态回调
            case STATUS_FINISHED:
                if (msg.arg2 == 1) {
                     voice_content=msg.obj.toString();
                     txtResult.append(voice_content);
                }
                status = msg.what;
                //updateBtnTextByStatus();
                break;
            case STATUS_NONE:
            case STATUS_READY:
            case STATUS_SPEAKING:
            case STATUS_RECOGNITION:
                status = msg.what;
                //updateBtnTextByStatus();
                break;
            default:
                break;

        }
    }

    private void updateBtnTextByStatus() {
        switch (status) {
            case STATUS_NONE:

                //btn.setText("开始录音");
               // btn.setEnabled(true);

                //setting.setEnabled(true);
                break;
            case STATUS_WAITING_READY:
            case STATUS_READY:
            case STATUS_SPEAKING:
            case STATUS_RECOGNITION:
               // btn.setText("停止录音");
               // btn.setEnabled(true);
                //setting.setEnabled(false);
                mAddDiaryFabVoice.setColorNormal(0x24d63c);
                break;

            case STATUS_STOPPED:
                //btn.setText("取消整个识别过程");
               // btn.setEnabled(true);
                //setting.setEnabled(false);
                mAddDiaryFabVoice.setColorNormal(0xe41c1c);
                break;
            default:
                break;
        }
    }
}
package com.dzx.Activity;

import android.content.ContentValues;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.design.widget.FloatingActionButton;
import android.support.v7.app.ActionBar;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.text.Editable;
import android.view.MotionEvent;
import android.view.View;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.dzx.LinedEditText;
import com.dzx.MainActivity;
import com.dzx.R;
import com.dzx.Recognization.online.CommonRecogParams;
import com.dzx.Recognization.online.OnlineRecogParams;
import com.dzx.Setting.Setting_use;
import com.dzx.fragment.FragmentOne;
import com.dzx.util.AppManager;
import com.dzx.util.GetDate;
import com.dzx.util.StatusBarCompat;

import butterknife.Bind;
import butterknife.ButterKnife;
import butterknife.OnClick;
import butterknife.OnTouch;
import cc.trity.floatingactionbutton.FloatingActionsMenu;

import com.dzx.db.diaryDB;


/**
 * Created by 杜卓轩 on 2018/3/17.
 */

public class AddDiaryActivity extends ActivityRecog {
    @Bind(R.id.add_diary_tv_date)
    TextView mAddDiaryTvDate;
    @Bind(R.id.add_diary_et_title)
    EditText mAddDiaryEtTitle;
    @Bind(R.id.add_diary_et_content)
    LinedEditText mAddDiaryEtContent;
    @Bind(R.id.add_diary_fab_back)
    cc.trity.floatingactionbutton.FloatingActionButton mAddDiaryFabBack;
    @Bind(R.id.add_diary_fab_add)
    cc.trity.floatingactionbutton.FloatingActionButton mAddDiaryFabAdd;

    @Bind(R.id.right_labels)
    FloatingActionsMenu mRightLabels;
    @Bind(R.id.common_tv_title)
    TextView mCommonTvTitle;
    @Bind(R.id.common_title_ll)
    LinearLayout mCommonTitleLl;
    @Bind(R.id.common_iv_back)
    ImageView mCommonIvBack;
    @Bind(R.id.common_iv_test)
    ImageView mCommonIvTest;

    private diaryDB mHelper;


    public AddDiaryActivity() {
        super();
        settingActivityClass = Setting_use.class;
    }

    protected CommonRecogParams getApiParams() {
        return new OnlineRecogParams(this);
    }


    public static void startActivity(Context context) {
        Intent intent = new Intent(context, AddDiaryActivity.class);
        context.startActivity(intent);
    }

    public static void startActivity(Context context, String title, String content) {
        Intent intent = new Intent(context, AddDiaryActivity.class);
        intent.putExtra("title", title);
        intent.putExtra("content", content);
        context.startActivity(intent);
    }

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_add_diary);
        AppManager.getAppManager().addActivity(this);
        ButterKnife.bind(this);
        //ActionBar actionBar = getSupportActionBar();
        //actionBar.hide();
        Intent intent = getIntent();
        mAddDiaryEtTitle.setText(intent.getStringExtra("title"));
        StatusBarCompat.compat(this, Color.parseColor("#161414"));

        mCommonTvTitle.setText("添加日记");
        mAddDiaryTvDate.setText("今天，" + GetDate.getDate());
        mAddDiaryEtContent.setText(intent.getStringExtra("content"));
        mHelper = new diaryDB(this, "Diary.db", null, 1);
    }


    @OnClick({R.id.common_iv_back, R.id.add_diary_et_title, R.id.add_diary_et_content, R.id.add_diary_fab_back, R.id.add_diary_fab_add
            //,R.id.add_diary_fab_voice
    })
    public void onClick(View view) {
        switch (view.getId()) {
            case R.id.common_iv_back:
                FragmentOne.startActivity(this);
                finish();
            case R.id.add_diary_et_title:
                break;
            case R.id.add_diary_et_content:
                break;
            case R.id.add_diary_fab_back:
                String date = GetDate.getDate().toString();
                String tag = String.valueOf(System.currentTimeMillis());
                String title = mAddDiaryEtTitle.getText().toString() + "";
                String content = mAddDiaryEtContent.getText().toString() + "";
                if (!title.equals("") || !content.equals("")) {
                    SQLiteDatabase db = mHelper.getWritableDatabase();
                    ContentValues values = new ContentValues();
                    values.put("date", date);
                    values.put("title", title);
                    values.put("content", content);
                    values.put("tag", tag);
                    db.insert("Diary", null, values);
                    values.clear();
                }
                FragmentOne.startActivity(this);
                finish();
                break;
           /* case R.id.add_diary_fab_voice:
                click();
                int index = mAddDiaryEtContent.getSelectionStart();//获取光标所在位置
                //String text="I want to input str";
                Editable edit = mAddDiaryEtContent.getEditableText();//获取EditText的文字

                if (index < 0 || index >= edit.length() ){
                    edit.append(voice_content);
                    voice_content="";
                }else{
                    edit.insert(index,voice_content);//光标所在位置插入文字
                    voice_content="";
                }
                //txtResult.append(voice_content);
                break;*/
            case R.id.add_diary_fab_add:
                final String dateBack = GetDate.getDate().toString();
                final String titleBack = mAddDiaryEtTitle.getText().toString();
                final String contentBack = mAddDiaryEtContent.getText().toString();
                if(!titleBack.isEmpty() || !contentBack.isEmpty()){
                    AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(this);
                    alertDialogBuilder.setMessage("是否保存日记内容？").setPositiveButton("确定", new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int which) {
                            SQLiteDatabase db = mHelper.getWritableDatabase();
                            ContentValues values = new ContentValues();
                            values.put("date", dateBack);
                            values.put("title", titleBack);
                            values.put("content", contentBack);
                            db.insert("Diary", null, values);
                            values.clear();
                            FragmentOne.startActivity(AddDiaryActivity.this);
                            finish();
                        }
                    }).setNegativeButton("取消", new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int which) {
                            FragmentOne.startActivity(AddDiaryActivity.this);
                        }
                    }).show();

                }else{
                    FragmentOne.startActivity(this);
                    finish();
                }
                break;
        }
    }

    @OnTouch({R.id.add_diary_fab_voice})
    public boolean onTouch(View view, MotionEvent event){
        switch (view.getId()) {
            case R.id.add_diary_fab_voice:

                if (event.getAction() == MotionEvent.ACTION_DOWN) {
                    click();
                    //start();
                    //status=STATUS_WAITING_READY;
                }
                if (event.getAction() == MotionEvent.ACTION_UP) {
                    //stop();
                    //status=STATUS_STOPPED;
                    int index = mAddDiaryEtContent.getSelectionStart();//获取光标所在位置
                    Editable edit = mAddDiaryEtContent.getEditableText();//获取EditText的文字

                    if (index < 0 || index >= edit.length() ){
                        edit.append(voice_content);
                        voice_content="";
                    }else{
                        edit.insert(index,voice_content);//光标所在位置插入文字
                        voice_content="";
                    }
                    //cancel();
                    //status=STATUS_NONE;
                }
                //click();
                /*switch (status) {
                    case STATUS_NONE: // 初始状态
                        start();
                        status = STATUS_WAITING_READY;
                        //updateBtnTextByStatus();
                        //txtLog.setText("");
                        //txtResult.setText("");
                        break;
                    case STATUS_WAITING_READY: // 调用本类的start方法后，即输入START事件后，等待引擎准备完毕。
                    case STATUS_READY: // 引擎准备完毕。
                    case STATUS_SPEAKING:
                    case STATUS_FINISHED: // 长语音情况
                    case STATUS_RECOGNITION:
                        stop();
                        //status = STATUS_STOPPED; // 引擎识别中
                        //updateBtnTextByStatus();
                        //break;
                    //case STATUS_STOPPED: // 引擎识别中
                        cancel();
                        status = STATUS_NONE; // 识别结束，回到初始状态
                        //updateBtnTextByStatus();*/





        }
    return false;
    }

    @Override
    public void onBackPressed() {
        super.onBackPressed();
        FragmentOne.startActivity(this);
       // finish();
    }
}
package com.dzx.Activity;

import android.content.ContentValues;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.design.widget.FloatingActionButton;
import android.support.v7.app.ActionBar;
import android.support.v7.app.AppCompatActivity;
import android.view.View;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.dzx.LinedEditText;
import com.dzx.R;
import com.dzx.db.diaryDB;
import com.dzx.fragment.FragmentOne;
import com.dzx.util.AppManager;
import com.dzx.util.GetDate;
import com.dzx.util.StatusBarCompat;

import butterknife.Bind;
import butterknife.ButterKnife;
import butterknife.OnClick;
import cc.trity.floatingactionbutton.FloatingActionsMenu;

/**
 * Created by 杜卓轩 on 2018/3/17.
 */

public class UpdateDiaryActivity extends AppCompatActivity {
    @Bind(R.id.update_diary_tv_date)
    TextView mUpdateDiaryTvDate;
    @Bind(R.id.update_diary_et_title)
    EditText mUpdateDiaryEtTitle;
    @Bind(R.id.update_diary_et_content)
    LinedEditText mUpdateDiaryEtContent;
    @Bind(R.id.update_diary_fab_back)
    cc.trity.floatingactionbutton.FloatingActionButton mUpdateDiaryFabBack;
    @Bind(R.id.update_diary_fab_add)
    cc.trity.floatingactionbutton.FloatingActionButton mUpdateDiaryFabAdd;
    @Bind(R.id.update_diary_fab_delete)
    cc.trity.floatingactionbutton.FloatingActionButton mUpdateDiaryFabDelete;
    @Bind(R.id.right_labels)
    FloatingActionsMenu mRightLabels;
    @Bind(R.id.common_tv_title)
    TextView mCommonTvTitle;
    @Bind(R.id.common_title_ll)
    LinearLayout mCommonTitleLl;
    @Bind(R.id.common_iv_back)
    ImageView mCommonIvBack;
    @Bind(R.id.common_iv_test)
    ImageView mCommonIvTest;
    @Bind(R.id.update_diary_tv_tag)
    TextView mTvTag;


    private diaryDB mHelper;

    public static void startActivity(Context context, String title, String content, String tag) {
        Intent intent = new Intent(context, UpdateDiaryActivity.class);
        intent.putExtra("title", title);
        intent.putExtra("content", content);
        intent.putExtra("tag", tag);
        context.startActivity(intent);
    }

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_update_diary);
        AppManager.getAppManager().addActivity(this);
        ButterKnife.bind(this);
        mHelper = new diaryDB(this, "Diary.db", null, 1);
        initTitle();
        StatusBarCompat.compat(this, Color.parseColor("#161414"));

        Intent intent = getIntent();
        mUpdateDiaryTvDate.setText("今天，" + GetDate.getDate());
        mUpdateDiaryEtTitle.setText(intent.getStringExtra("title"));
        mUpdateDiaryEtContent.setText(intent.getStringExtra("content"));
        mTvTag.setText(intent.getStringExtra("tag"));



    }

    private void initTitle() {
        //ActionBar actionBar = getSupportActionBar();
       // actionBar.hide();
        mCommonTvTitle.setText("修改日记");
    }

    @OnClick({R.id.common_iv_back, R.id.update_diary_tv_date, R.id.update_diary_et_title, R.id.update_diary_et_content, R.id.update_diary_fab_back, R.id.update_diary_fab_add, R.id.update_diary_fab_delete})
    public void onClick(View view) {
        switch (view.getId()) {
            case R.id.common_iv_back:
                FragmentOne.startActivity(this);
                finish();
            case R.id.update_diary_tv_date:
                break;
            case R.id.update_diary_et_title:
                break;
            case R.id.update_diary_et_content:
                break;
            case R.id.update_diary_fab_delete:
                android.support.v7.app.AlertDialog.Builder alertDialogBuilder = new android.support.v7.app.AlertDialog.Builder(this);
                alertDialogBuilder.setMessage("确定要删除该日记吗？").setPositiveButton("确定", new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {

//                        String title = mUpdateDiaryEtTitle.getText().toString();
                        String tag = mTvTag.getText().toString();
                        SQLiteDatabase dbDelete = mHelper.getWritableDatabase();
                        dbDelete.delete("Diary", "tag = ?", new String[]{tag});
                        FragmentOne.startActivity(UpdateDiaryActivity.this);
                        finish();
                    }
                }).setNegativeButton("取消", new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                    }
                }).show();
                break;
            case R.id.update_diary_fab_add:
                SQLiteDatabase dbUpdate = mHelper.getWritableDatabase();
                ContentValues valuesUpdate = new ContentValues();
                String title = mUpdateDiaryEtTitle.getText().toString();
                String content = mUpdateDiaryEtContent.getText().toString();
                valuesUpdate.put("title", title);
                valuesUpdate.put("content", content);
                dbUpdate.update("Diary", valuesUpdate, "title = ?", new String[]{title});
                dbUpdate.update("Diary", valuesUpdate, "content = ?", new String[]{content});
                FragmentOne.startActivity(this);
                finish();
                break;
            case R.id.update_diary_fab_back:
                FragmentOne.startActivity(this);
                finish();

                break;
        }
    }

    @OnClick(R.id.common_tv_title)
    public void onClick() {
    }

    @Override
    public void onBackPressed() {
        super.onBackPressed();
        FragmentOne.startActivity(this);
    }
}
package com.dzx.Activity;

import android.content.Intent;


import android.os.Bundle;
import android.os.Handler;
import android.support.v7.app.AppCompatActivity;

import android.view.Window;
import android.view.WindowManager;
import android.widget.ImageView;

import com.dzx.MainActivity;
import com.dzx.R;
import java.util.Random;



/**
 * Created by 杜卓轩 on 2018/3/5.
 * 这是一个欢迎页面
 */


public class WelcomeActivity extends AppCompatActivity {
    private ImageView imageView;
    private int randomImage[]={
            R.mipmap.pic_01,
            R.mipmap.pic_02,
            R.mipmap.pic_03,
            R.mipmap.pic_04,
            R.mipmap.pic_05,
            R.mipmap.pic_06,
            R.mipmap.pic_07

    };

    Random rand=new Random();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
                WindowManager.LayoutParams.FLAG_FULLSCREEN);
        requestWindowFeature(Window.FEATURE_NO_TITLE);
        setContentView(R.layout.activity_welcome);

        imageView=(ImageView)findViewById(R.id.image_choose);
        int random_img=rand.nextInt(7);
        random_img=randomImage[random_img];


        imageView.setImageDrawable(getResources().getDrawable(random_img));


        Handler handler = new Handler();
        //当计时结束,跳转至主界面
        handler.postDelayed(new Runnable() {
            @Override
            public void run() {
                Intent intent = new Intent(WelcomeActivity.this, MainActivity.class);
                startActivity(intent);
                WelcomeActivity.this.finish();
            }
        }, 3000);
    }




}
package com.dzx.Bean;

/**
 * Created by 杜卓轩 on 2018/3/17.
 */

public class diaryBean {

    private String date;
    private String title;
    private String content;
    private String tag;

    public diaryBean(String date, String title, String content, String tag) {
        this.date = date;
        this.title = title;
        this.content = content;
        this.tag = tag;
    }
    public String getTag() {
        return tag;
    }

    public void setTag(String tag) {
        this.tag = tag;
    }

    public String getDate() {
        return date;
    }

    public void setDate(String date) {
        this.date = date;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }


}
package com.dzx.Bean;

import java.util.List;

/**
 * Created by 杜卓轩 on 2018/3/9.
 */

public class weatherBean {
    private List<HeWeather6Bean> HeWeather6;

    public List<HeWeather6Bean> getHeWeather6() {
        return HeWeather6;
    }

    public void setHeWeather6(List<HeWeather6Bean> HeWeather6) {
        this.HeWeather6 = HeWeather6;
    }

    public static class HeWeather6Bean {
        /**
         * basic : {"cid":"CN101200113","location":"洪山","parent_city":"武汉","admin_area":"湖北","cnty":"中国","lat":"30.50425911","lon":"114.40071869","tz":"+8.00"}
         * update : {"loc":"2018-03-09 20:47","utc":"2018-03-09 12:47"}
         * status : ok
         * now : {"cloud":"0","cond_code":"100","cond_txt":"晴","fl":"4","hum":"85","pcpn":"0.0","pres":"1023","tmp":"7","vis":"10","wind_deg":"151","wind_dir":"东南风","wind_sc":"1-2","wind_spd":"3"}
         * daily_forecast : [{"cond_code_d":"103","cond_code_n":"100","cond_txt_d":"晴间多云","cond_txt_n":"晴","date":"2018-03-09","hum":"60","mr":"00:34","ms":"11:28","pcpn":"0.0","pop":"0","pres":"1027","sr":"06:39","ss":"18:26","tmp_max":"14","tmp_min":"4","uv_index":"6","vis":"16","wind_deg":"104","wind_dir":"东南风","wind_sc":"1-2","wind_spd":"5"},{"cond_code_d":"101","cond_code_n":"101","cond_txt_d":"多云","cond_txt_n":"多云","date":"2018-03-10","hum":"52","mr":"01:27","ms":"12:11","pcpn":"0.0","pop":"0","pres":"1023","sr":"06:38","ss":"18:27","tmp_max":"18","tmp_min":"5","uv_index":"7","vis":"20","wind_deg":"96","wind_dir":"东风","wind_sc":"1-2","wind_spd":"6"},{"cond_code_d":"101","cond_code_n":"101","cond_txt_d":"多云","cond_txt_n":"多云","date":"2018-03-11","hum":"52","mr":"02:17","ms":"12:57","pcpn":"0.0","pop":"0","pres":"1021","sr":"06:37","ss":"18:27","tmp_max":"18","tmp_min":"8","uv_index":"5","vis":"20","wind_deg":"181","wind_dir":"南风","wind_sc":"1-2","wind_spd":"4"}]
         * lifestyle : [{"brf":"舒适","txt":"今天夜间不太热也不太冷，风力不大，相信您在这样的天气条件下，应会感到比较清爽和舒适。","type":"comf"},{"brf":"较舒适","txt":"建议着薄外套、开衫牛仔衫裤等服装。年老体弱者应适当添加衣物，宜着夹克衫、薄毛衣等。","type":"drsg"},{"brf":"易发","txt":"昼夜温差很大，易发生感冒，请注意适当增减衣服，加强自我防护避免感冒。","type":"flu"},{"brf":"适宜","txt":"天气较好，赶快投身大自然参与户外运动，尽情感受运动的快乐吧。","type":"sport"},{"brf":"适宜","txt":"天气较好，但丝毫不会影响您出行的心情。温度适宜又有微风相伴，适宜旅游。","type":"trav"},{"brf":"弱","txt":"紫外线强度较弱，建议出门前涂擦SPF在12-15之间、PA+的防晒护肤品。","type":"uv"},{"brf":"较适宜","txt":"较适宜洗车，未来一天无雨，风力较小，擦洗一新的汽车至少能保持一天。","type":"cw"},{"brf":"较差","txt":"气象条件较不利于空气污染物稀释、扩散和清除，请适当减少室外活动时间。","type":"air"}]
         */

        private BasicBean basic;
        private UpdateBean update;
        private String status;
        private NowBean now;
        private List<DailyForecastBean> daily_forecast;
        private List<LifestyleBean> lifestyle;

        public BasicBean getBasic() {
            return basic;
        }

        public void setBasic(BasicBean basic) {
            this.basic = basic;
        }

        public UpdateBean getUpdate() {
            return update;
        }

        public void setUpdate(UpdateBean update) {
            this.update = update;
        }

        public String getStatus() {
            return status;
        }

        public void setStatus(String status) {
            this.status = status;
        }

        public NowBean getNow() {
            return now;
        }

        public void setNow(NowBean now) {
            this.now = now;
        }

        public List<DailyForecastBean> getDaily_forecast() {
            return daily_forecast;
        }

        public void setDaily_forecast(List<DailyForecastBean> daily_forecast) {
            this.daily_forecast = daily_forecast;
        }

        public List<LifestyleBean> getLifestyle() {
            return lifestyle;
        }

        public void setLifestyle(List<LifestyleBean> lifestyle) {
            this.lifestyle = lifestyle;
        }

        public static class BasicBean {
            /**
             * cid : CN101200113
             * location : 洪山
             * parent_city : 武汉
             * admin_area : 湖北
             * cnty : 中国
             * lat : 30.50425911
             * lon : 114.40071869
             * tz : +8.00
             */

            private String cid;
            private String location;
            private String parent_city;
            private String admin_area;
            private String cnty;
            private String lat;
            private String lon;
            private String tz;

            public String getCid() {
                return cid;
            }

            public void setCid(String cid) {
                this.cid = cid;
            }

            public String getLocation() {
                return location;
            }

            public void setLocation(String location) {
                this.location = location;
            }

            public String getParent_city() {
                return parent_city;
            }

            public void setParent_city(String parent_city) {
                this.parent_city = parent_city;
            }

            public String getAdmin_area() {
                return admin_area;
            }

            public void setAdmin_area(String admin_area) {
                this.admin_area = admin_area;
            }

            public String getCnty() {
                return cnty;
            }

            public void setCnty(String cnty) {
                this.cnty = cnty;
            }

            public String getLat() {
                return lat;
            }

            public void setLat(String lat) {
                this.lat = lat;
            }

            public String getLon() {
                return lon;
            }

            public void setLon(String lon) {
                this.lon = lon;
            }

            public String getTz() {
                return tz;
            }

            public void setTz(String tz) {
                this.tz = tz;
            }
        }

        public static class UpdateBean {
            /**
             * loc : 2018-03-09 20:47
             * utc : 2018-03-09 12:47
             */

            private String loc;
            private String utc;

            public String getLoc() {
                return loc;
            }

            public void setLoc(String loc) {
                this.loc = loc;
            }

            public String getUtc() {
                return utc;
            }

            public void setUtc(String utc) {
                this.utc = utc;
            }
        }

        public static class NowBean {
            /**
             * cloud : 0
             * cond_code : 100
             * cond_txt : 晴
             * fl : 4
             * hum : 85
             * pcpn : 0.0
             * pres : 1023
             * tmp : 7
             * vis : 10
             * wind_deg : 151
             * wind_dir : 东南风
             * wind_sc : 1-2
             * wind_spd : 3
             */

            private String cloud;
            private String cond_code;
            private String cond_txt;
            private String fl;
            private String hum;
            private String pcpn;
            private String pres;
            private String tmp;
            private String vis;
            private String wind_deg;
            private String wind_dir;
            private String wind_sc;
            private String wind_spd;

            public String getCloud() {
                return cloud;
            }

            public void setCloud(String cloud) {
                this.cloud = cloud;
            }

            public String getCond_code() {
                return cond_code;
            }

            public void setCond_code(String cond_code) {
                this.cond_code = cond_code;
            }

            public String getCond_txt() {
                return cond_txt;
            }

            public void setCond_txt(String cond_txt) {
                this.cond_txt = cond_txt;
            }

            public String getFl() {
                return fl;
            }

            public void setFl(String fl) {
                this.fl = fl;
            }

            public String getHum() {
                return hum;
            }

            public void setHum(String hum) {
                this.hum = hum;
            }

            public String getPcpn() {
                return pcpn;
            }

            public void setPcpn(String pcpn) {
                this.pcpn = pcpn;
            }

            public String getPres() {
                return pres;
            }

            public void setPres(String pres) {
                this.pres = pres;
            }

            public String getTmp() {
                return tmp;
            }

            public void setTmp(String tmp) {
                this.tmp = tmp;
            }

            public String getVis() {
                return vis;
            }

            public void setVis(String vis) {
                this.vis = vis;
            }

            public String getWind_deg() {
                return wind_deg;
            }

            public void setWind_deg(String wind_deg) {
                this.wind_deg = wind_deg;
            }

            public String getWind_dir() {
                return wind_dir;
            }

            public void setWind_dir(String wind_dir) {
                this.wind_dir = wind_dir;
            }

            public String getWind_sc() {
                return wind_sc;
            }

            public void setWind_sc(String wind_sc) {
                this.wind_sc = wind_sc;
            }

            public String getWind_spd() {
                return wind_spd;
            }

            public void setWind_spd(String wind_spd) {
                this.wind_spd = wind_spd;
            }
        }

        public static class DailyForecastBean {
            /**
             * cond_code_d : 103
             * cond_code_n : 100
             * cond_txt_d : 晴间多云
             * cond_txt_n : 晴
             * date : 2018-03-09
             * hum : 60
             * mr : 00:34
             * ms : 11:28
             * pcpn : 0.0
             * pop : 0
             * pres : 1027
             * sr : 06:39
             * ss : 18:26
             * tmp_max : 14
             * tmp_min : 4
             * uv_index : 6
             * vis : 16
             * wind_deg : 104
             * wind_dir : 东南风
             * wind_sc : 1-2
             * wind_spd : 5
             */

            private String cond_code_d;
            private String cond_code_n;
            private String cond_txt_d;
            private String cond_txt_n;
            private String date;
            private String hum;
            private String mr;
            private String ms;
            private String pcpn;
            private String pop;
            private String pres;
            private String sr;
            private String ss;
            private String tmp_max;
            private String tmp_min;
            private String uv_index;
            private String vis;
            private String wind_deg;
            private String wind_dir;
            private String wind_sc;
            private String wind_spd;

            public String getCond_code_d() {
                return cond_code_d;
            }

            public void setCond_code_d(String cond_code_d) {
                this.cond_code_d = cond_code_d;
            }

            public String getCond_code_n() {
                return cond_code_n;
            }

            public void setCond_code_n(String cond_code_n) {
                this.cond_code_n = cond_code_n;
            }

            public String getCond_txt_d() {
                return cond_txt_d;
            }

            public void setCond_txt_d(String cond_txt_d) {
                this.cond_txt_d = cond_txt_d;
            }

            public String getCond_txt_n() {
                return cond_txt_n;
            }

            public void setCond_txt_n(String cond_txt_n) {
                this.cond_txt_n = cond_txt_n;
            }

            public String getDate() {
                return date;
            }

            public void setDate(String date) {
                this.date = date;
            }

            public String getHum() {
                return hum;
            }

            public void setHum(String hum) {
                this.hum = hum;
            }

            public String getMr() {
                return mr;
            }

            public void setMr(String mr) {
                this.mr = mr;
            }

            public String getMs() {
                return ms;
            }

            public void setMs(String ms) {
                this.ms = ms;
            }

            public String getPcpn() {
                return pcpn;
            }

            public void setPcpn(String pcpn) {
                this.pcpn = pcpn;
            }

            public String getPop() {
                return pop;
            }

            public void setPop(String pop) {
                this.pop = pop;
            }

            public String getPres() {
                return pres;
            }

            public void setPres(String pres) {
                this.pres = pres;
            }

            public String getSr() {
                return sr;
            }

            public void setSr(String sr) {
                this.sr = sr;
            }

            public String getSs() {
                return ss;
            }

            public void setSs(String ss) {
                this.ss = ss;
            }

            public String getTmp_max() {
                return tmp_max;
            }

            public void setTmp_max(String tmp_max) {
                this.tmp_max = tmp_max;
            }

            public String getTmp_min() {
                return tmp_min;
            }

            public void setTmp_min(String tmp_min) {
                this.tmp_min = tmp_min;
            }

            public String getUv_index() {
                return uv_index;
            }

            public void setUv_index(String uv_index) {
                this.uv_index = uv_index;
            }

            public String getVis() {
                return vis;
            }

            public void setVis(String vis) {
                this.vis = vis;
            }

            public String getWind_deg() {
                return wind_deg;
            }

            public void setWind_deg(String wind_deg) {
                this.wind_deg = wind_deg;
            }

            public String getWind_dir() {
                return wind_dir;
            }

            public void setWind_dir(String wind_dir) {
                this.wind_dir = wind_dir;
            }

            public String getWind_sc() {
                return wind_sc;
            }

            public void setWind_sc(String wind_sc) {
                this.wind_sc = wind_sc;
            }

            public String getWind_spd() {
                return wind_spd;
            }

            public void setWind_spd(String wind_spd) {
                this.wind_spd = wind_spd;
            }
        }

        public static class LifestyleBean {
            /**
             * brf : 舒适
             * txt : 今天夜间不太热也不太冷，风力不大，相信您在这样的天气条件下，应会感到比较清爽和舒适。
             * type : comf
             */

            private String brf;
            private String txt;
            private String type;

            public String getBrf() {
                return brf;
            }

            public void setBrf(String brf) {
                this.brf = brf;
            }

            public String getTxt() {
                return txt;
            }

            public void setTxt(String txt) {
                this.txt = txt;
            }

            public String getType() {
                return type;
            }

            public void setType(String type) {
                this.type = type;
            }
        }
    }
}
package com.dzx.Bean;

/**
 * Created by 杜卓轩 on 2018/3/10.
 */

public class weatherInfoBean {



    private String city;
    private String date;
    private String temp;
    private String weather;
    private String wind;
    private String info;
    private String temp_max;
    private String netInfo;

    public String getNetInfo() {
        return netInfo;
    }

    public void setNetInfo(String netInfo) {
        this.netInfo = netInfo;
    }

    public String getParent_city() {
        return parent_city;
    }

    public void setParent_city(String parent_city) {
        this.parent_city = parent_city;
    }

    private String parent_city;
    private String tips;

    public String getTips() {
        return tips;
    }

    public void setTips(String tips) {
        this.tips = tips;
    }

    public String getTemp_max() {
        return temp_max;
    }

    public void setTemp_max(String temp_max) {
        this.temp_max = temp_max;
    }

    public String getInfo() {
        return info;
    }

    public void setInfo(String info) {
        this.info = info;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public String getDate() {
        return date;
    }

    public void setDate(String date) {
        this.date = date;
    }

    public String getTemp() {
        return temp;
    }

    public void setTemp(String temp) {
        this.temp = temp;
    }

    public String getWeather() {
        return weather;
    }

    public void setWeather(String weather) {
        this.weather = weather;
    }

    public String getWind() {
        return wind;
    }

    public void setWind(String wind) {
        this.wind = wind;
    }


    /**
     *
     * @return 是否为本人发送
     */
    private boolean isMeSend;
    private boolean isWeather;
    private boolean isNet;
    public boolean getisNet() {
        return isNet;
    }
    public boolean isWeather() {
        return isWeather;
    }
    public boolean isMeSend() {
        return isMeSend;
    }
    public void setIsWeather(boolean isWeather) {
        this.isWeather = isWeather;
    }
    public void setIsNet(boolean isNet){this.isNet=isNet;}
    public void setMeSend(boolean isMeSend) {
        this.isMeSend = isMeSend;
    }
    public weatherInfoBean(String city, String date, String temp,String weather,String wind, boolean isMeSend) {
        super();
        this.city = city;
        this.date = date;
        this.temp = temp;
        this.weather=weather;
        this.wind=wind;
        this.isMeSend = isMeSend;
    }
    public weatherInfoBean() {
        super();
    }
}
package com.dzx.control;

import android.content.Context;

import com.dzx.Recognization.online.IRecogListener;
import com.dzx.Recognization.online.RecogEventAdapter;
import com.dzx.util.Logger;
import com.baidu.speech.EventListener;
import com.baidu.speech.EventManager;
import com.baidu.speech.EventManagerFactory;
import com.baidu.speech.asr.SpeechConstant;

import org.json.JSONObject;

import java.util.Map;

/**

 * EventManager内的方法如send 都可以在主线程中进行，SDK中做过处理
 */

public class MyRecognizer {
    /**
     * SDK 内部核心 EventManager 类
     */
    private EventManager asr;

    /**
     * SDK 内部核心 事件回调类， 用于开发者写自己的识别回调逻辑
     */
    private EventListener eventListener;

    private static boolean isOfflineEngineLoaded = false;

    private static boolean isInited = false;

    private static final String TAG = "MyRecognizer";

    /**
     * 初始化
     *
     * @param context
     * @param recogListener 将EventListener结果做解析的DEMO回调。使用RecogEventAdapter 适配EventListener
     */
    public MyRecognizer(Context context, IRecogListener recogListener) {
        this(context, new RecogEventAdapter(recogListener));
    }

    /**
     * 初始化 提供 EventManagerFactory需要的Context和EventListener
     *
     * @param context
     * @param eventListener
     */
    public MyRecognizer(Context context, EventListener eventListener) {
        if (isInited) {
            Logger.error(TAG, "还未调用release()，请勿新建一个新类");
            throw new RuntimeException("还未调用release()，请勿新建一个新类");
        }
        isInited = true;
        this.eventListener = eventListener;
        asr = EventManagerFactory.create(context, "asr");
        asr.registerListener(eventListener);
    }


    /**
     * @param params
     */
    /*public void loadOfflineEngine(Map<String, Object> params) {
        String json = new JSONObject(params).toString();
        Logger.info(TAG + ".Debug", "loadOfflineEngine params:" + json);
        asr.send(SpeechConstant.ASR_KWS_LOAD_ENGINE, json, null, 0, 0);
        isOfflineEngineLoaded = true;
        // 没有ASR_KWS_LOAD_ENGINE这个回调表试失败，如缺少第一次联网时下载的正式授权文件。
    }*/

    public void start(Map<String, Object> params) {
        String json = new JSONObject(params).toString();
        Logger.info(TAG + ".Debug", "asr params(反馈请带上此行日志):" + json);
        if (asr != null) {
            asr.send(SpeechConstant.ASR_START, json, null, 0, 0);
        }
        else{

        }
    }


    /**
     * 提前结束录音等待识别结果。
     */
    public void stop() {
        Logger.info(TAG, "停止录音");
        if (asr != null) {
            asr.send(SpeechConstant.ASR_STOP, "{}", null, 0, 0);
        }
    }

    /**
     * 取消本次识别，取消后将立即停止不会返回识别结果。
     * cancel 与stop的区别是 cancel在stop的基础上，完全停止整个识别流程，
     */
    public void cancel() {
        Logger.info(TAG, "取消识别");
        if (asr != null) {
            asr.send(SpeechConstant.ASR_CANCEL, "{}", null, 0, 0);
        }
    }


    public void release() {
        if (asr == null) {
            return;
        }
        cancel();

        asr.unregisterListener(eventListener);
        asr = null;
        isInited = false;
    }
}
package com.dzx.control;

import android.content.Context;

import com.dzx.util.Logger;

import com.baidu.speech.EventListener;
import com.baidu.speech.EventManager;
import com.baidu.speech.EventManagerFactory;
import com.baidu.speech.asr.SpeechConstant;

import org.json.JSONObject;

import java.util.Map;

/**

 */

public class MyWakeup {


    private static boolean isInited = false;

    private EventManager wp;
    private EventListener eventListener;

    private static final String TAG = "MyWakeup";

    public MyWakeup(Context context, EventListener eventListener) {
        if (isInited) {
            Logger.error(TAG, "还未调用release()，请勿新建一个新类");
            throw new RuntimeException("还未调用release()，请勿新建一个新类");
        }
        isInited = true;
        this.eventListener = eventListener;
        wp = EventManagerFactory.create(context, "wp");
        wp.registerListener(eventListener);
    }


    public void start(Map<String, Object> params) {
        String json = new JSONObject(params).toString();
        Logger.info(TAG + ".Debug", "wakeup params(反馈请带上此行日志):" + json);
        wp.send(SpeechConstant.WAKEUP_START, json, null, 0, 0);
    }

    public void stop() {
        Logger.info(TAG, "唤醒结束");
        wp.send(SpeechConstant.WAKEUP_STOP, null, null, 0, 0);
    }

    public void release() {
        stop();
        wp.unregisterListener(eventListener);
        wp = null;
        isInited = false;
    }
}
package com.dzx.db;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

/**
 * Created by 杜卓轩 on 2018/3/17.
 */

public class diaryDB extends SQLiteOpenHelper {
    public static final String CREATE_DIARY = "create table Diary("
            + "id integer primary key autoincrement, "
            + "date text, "
            + "title text, "
            + "tag text, "
            + "content text)";

    private Context mContext;
    public diaryDB(Context context, String name, SQLiteDatabase.CursorFactory factory, int version){
        super(context, name, factory, version);
        mContext = context;
    }
    @Override
    public void onCreate(SQLiteDatabase db) {
        db.execSQL(CREATE_DIARY);
    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {

        db.execSQL("drop table if exists Diary");
        onCreate(db);
    }
}
package com.dzx.fragment;

import android.Manifest;

import android.content.pm.PackageManager;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.os.StrictMode;
import android.support.v4.app.ActivityCompat;
import android.support.v4.app.Fragment;
import android.support.v4.content.ContextCompat;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import com.dzx.R;
import com.dzx.Recognization.online.InFileStream;
import com.dzx.util.Logger;

import java.util.ArrayList;

/**
 * Created by 杜卓轩 on 2018/3/4.
 */

public abstract class Fragment_common extends Fragment {
    protected TextView txtLog;
    protected Button btn;
    //protected Button btn_stop;
    protected TextView txtResult;

    protected Handler handler;

    protected String descText;

    protected int layout = R.layout.fragment_2;

    protected Class settingActivityClass = null;

   // protected boolean running = false;

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {


        // setStrictMode();
        InFileStream.setContext(getActivity());
        View rootView = inflater.inflate(R.layout.fragment_2, container, false);

        handler = new Handler() {

            /*
             * @param msg
             */
            @Override
            public void handleMessage(Message msg) {
                super.handleMessage(msg);
                handleMsg(msg);
            }

        };
        Logger.setHandler(handler);
        initPermission();
        initView(rootView);
        initRecog();
        return rootView;
    }
    protected abstract void initRecog();

    protected void handleMsg(Message msg) {
        if (txtLog != null && msg.obj != null) {
           txtLog.append(msg.obj.toString() + "\n");

        }
    }

    protected void initView(View rootView) {
        txtResult = (TextView) rootView.findViewById(R.id.txtResult);
        txtLog = (TextView) rootView.findViewById(R.id.txtLog);
        btn = (Button) rootView.findViewById(R.id.btn);

        txtLog.setText(descText + "\n");
         //txtResult.setText("ceshi");
    }

    /**
     * android 6.0 以上需要动态申请权限
     */
    private void initPermission() {
        String[] permissions = {
                Manifest.permission.RECORD_AUDIO,
                Manifest.permission.ACCESS_NETWORK_STATE,
                Manifest.permission.INTERNET,
                Manifest.permission.READ_PHONE_STATE,
                Manifest.permission.WRITE_EXTERNAL_STORAGE
        };

        ArrayList<String> toApplyList = new ArrayList<String>();

        for (String perm : permissions) {
            if (PackageManager.PERMISSION_GRANTED != ContextCompat.checkSelfPermission(getActivity(), perm)) {
                toApplyList.add(perm);
                // 进入到这里代表没有权限.

            }
        }
        String[] tmpList = new String[toApplyList.size()];
        if (!toApplyList.isEmpty()) {
            ActivityCompat.requestPermissions(getActivity(), toApplyList.toArray(tmpList), 123);
        }

    }

    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        // 此处为android 6.0以上动态授权的回调，用户自行实现。
    }

    private void setStrictMode() {
        StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder()
                .detectAll()
                .penaltyLog()
                .build());
        StrictMode.setVmPolicy(new StrictMode.VmPolicy.Builder()
                .detectLeakedSqlLiteObjects()
                .detectLeakedClosableObjects()
                .penaltyLog()
                .penaltyDeath()
                .build());

    }
}
package com.dzx.fragment;

import android.content.SharedPreferences;
import android.os.Bundle;
import android.os.Message;
import android.preference.PreferenceManager;
import android.util.Log;
import android.view.View;


import com.dzx.Recognization.online.CommonRecogParams;
import com.dzx.Recognization.online.IStatus;
import com.dzx.Recognization.online.MessageStatusRecogListener;
import com.dzx.Recognization.online.StatusRecogListener;
import com.dzx.control.MyRecognizer;
import com.dzx.util.Logger;

import java.util.Map;

/**
 * Created by 杜卓轩 on 2018/3/4.
 */

public abstract class Fragment_recog extends Fragment_common implements IStatus {


        /**
         * 识别控制器，使用MyRecognizer控制识别的流程
         */
        protected MyRecognizer myRecognizer;

        /*
         * Api的参数类，仅仅用于生成调用START的json字符串，本身与SDK的调用无关
         */
        protected CommonRecogParams apiParams;

        /*
         * 本Activity中是否需要调用离线命令词功能。根据此参数，判断是否需要调用SDK的ASR_KWS_LOAD_ENGINE事件
         */
        protected boolean enableOffline = false;


        /**
         * 控制UI按钮的状态
         */
        protected int status;

        /**
         * 日志使用
         */
        private static final String TAG = "Fragment_recog";

        /**
         * 在onCreate中调用。初始化识别控制类MyRecognizer
         */
        protected void initRecog() {
            StatusRecogListener listener = new MessageStatusRecogListener(handler);
            myRecognizer = new MyRecognizer(getActivity(),  listener);
            apiParams = getApiParams();
            status = STATUS_NONE;

        }


        /**
         * 销毁时需要释放识别资源。
         */
        @Override
        public void onDestroy() {
            myRecognizer.release();
            Log.i(TAG, "onDestory");
            super.onDestroy();
        }
        @Override
        public void onStop(){

            super.onStop();
        }

        public void onStart(){
           // start();
            super.onStart();
        //目前的结论是，锁屏时调用release，把asr注销，isinited=false
            //导致了再次开启屏幕时，报nullpointer exception
            //asr.send函数报错。
        }

        public void onPause(){
            super.onPause();
            //myRecognizer.release();
            //这个有没有用。
            Logger.info(TAG, "进行了release");
        }

        /**
         * 开始录音，点击“开始”按钮后调用。
         */
        protected void start() {
            SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(getActivity());
            //  上面的获取是为了生成下面的Map， 自己集成时可以忽略
            Map<String, Object> params = apiParams.fetch(sp);
            // 集成时不需要上面的代码，只需要params参数。
            // 这里打印出params， 填写至您自己的app中，直接调用下面这行代码即可。
            myRecognizer.start(params);
        }


        /**
         * 开始录音后，手动停止录音。SDK会识别在此过程中的录音。点击“停止”按钮后调用。
         */
        private void stop() {
            myRecognizer.stop();
        }

        /**
         * 开始录音后，取消这次录音。SDK会取消本次识别，回到原始状态。点击“取消”按钮后调用。
         */
        private void cancel() {
            myRecognizer.cancel();
        }


        /**
         * @return
         */
        protected abstract CommonRecogParams getApiParams();

        // 以上为 语音SDK调用，以下为UI部分
        @Override
        public void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
        }


        @Override
        protected void initView(View rootView) {
            super.initView(rootView);
            btn.setOnClickListener(new View.OnClickListener() {

                @Override
                public void onClick(View v) {
                    switch (status) {
                        case STATUS_NONE: // 初始状态
                            start();
                            status = STATUS_WAITING_READY;
                            updateBtnTextByStatus();
                            txtLog.setText("");
                            txtResult.setText("");
                            break;
                        case STATUS_WAITING_READY: // 调用本类的start方法后，即输入START事件后，等待引擎准备完毕。
                        case STATUS_READY: // 引擎准备完毕。
                        case STATUS_SPEAKING:
                        case STATUS_FINISHED: // 长语音情况
                        case STATUS_RECOGNITION:
                            stop();
                            status = STATUS_STOPPED; // 引擎识别中
                            updateBtnTextByStatus();
                            break;
                        case STATUS_STOPPED: // 引擎识别中
                            cancel();
                            status = STATUS_NONE; // 识别结束，回到初始状态
                            updateBtnTextByStatus();
                            break;
                        default:
                            break;
                    }

                }
            });
        }

        protected void handleMsg(Message msg) {
            super.handleMsg(msg);

            switch (msg.what) { // 处理MessageStatusRecogListener中的状态回调
                case STATUS_FINISHED:
                   if (msg.arg2 == 1) {
                       txtResult.setText(msg.obj.toString());
                    }
                    status = msg.what;
                    updateBtnTextByStatus();
                    break;
                case STATUS_NONE:
                case STATUS_READY:
                case STATUS_SPEAKING:
                case STATUS_RECOGNITION:
                    status = msg.what;
                    updateBtnTextByStatus();
                    break;
                default:

                    break;

            }
        }

        private void updateBtnTextByStatus() {
            switch (status) {
                case STATUS_NONE:
                    btn.setText("开始录音");
                    btn.setEnabled(true);
                    //setting.setEnabled(true);
                    break;
                case STATUS_WAITING_READY:
                case STATUS_READY:
                case STATUS_SPEAKING:
                case STATUS_RECOGNITION:
                    btn.setText("停止录音");
                    btn.setEnabled(true);
                    //setting.setEnabled(false);
                    break;

                case STATUS_STOPPED:
                    btn.setText("取消整个识别过程");
                    btn.setEnabled(true);
                   // setting.setEnabled(false);
                    break;
                default:
                    break;
            }
        }
    }

package com.dzx.fragment;

import android.app.Activity;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import com.dzx.Recognization.online.CommonRecogParams;
import com.dzx.Recognization.online.OnlineRecogParams;
import com.dzx.Setting.Setting_use;

/**
 * Created by 杜卓轩 on 2018/3/4.
 */

public class FragmentCommon extends Fragment_recog {




    public FragmentCommon() {
        super();
        settingActivityClass = Setting_use.class;
    }

    @Override
    protected CommonRecogParams getApiParams() {
        return new OnlineRecogParams(getActivity());
    }

    public static String  TAG = FragmentCommon.class.getSimpleName();

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        Log.i(TAG, "onCreate");
    }

    @Override
    public void onActivityCreated(Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        Log.i(TAG, "onActivityCreated");
    }
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        Log.i(TAG, "onCreateView");
        return super.onCreateView(inflater, container, savedInstanceState);
    }

    @Override
    public void onAttach(Activity activity) {
        super.onAttach(activity);
        Log.i(TAG, "onAttach");
    }
    @Override
    public void onDestroy() {
        Log.i(TAG, "onDestory");
        super.onDestroy();
    }
    @Override
    public void onDetach() {
        Log.i(TAG, "onDetch");
        super.onDetach();
    }
    @Override
    public void onPause() {
        Log.i(TAG, "onPause");
        super.onPause();
    }
    @Override
    public void onDestroyView() {
        super.onDestroyView();
        Log.i(TAG, "onDestroyView");
    }
    @Override
    public void onViewCreated(View view, Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        Log.i(TAG, "onViewCreated");
    }
    @Override
    public void onStart() {
        super.onStart();
        Log.i(TAG, "onStart");
    }
}
package com.dzx.fragment;

import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.os.Bundle;
import android.support.design.widget.FloatingActionButton;
import android.support.v4.app.Fragment;
import android.support.v7.app.ActionBar;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.text.TextUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.SearchView;
import android.widget.TextView;

import com.dzx.Activity.AddDiaryActivity;
import com.dzx.Activity.UpdateDiaryActivity;
import com.dzx.Adapter.DiaryAdapter;
import com.dzx.Bean.diaryBean;
import com.dzx.Constants;
import com.dzx.Event.DelDiaryEvent;
import com.dzx.Event.StartUpdateDiaryEvent;
import com.dzx.MainActivity;
import com.dzx.R;
import com.dzx.db.diaryDB;
import com.dzx.util.AppManager;
import com.dzx.util.GetDate;
import com.dzx.util.SpHelper;
import com.dzx.util.StatusBarCompat;

import org.greenrobot.eventbus.EventBus;
import org.greenrobot.eventbus.Subscribe;

import java.util.ArrayList;
import java.util.List;

import butterknife.Bind;
import butterknife.ButterKnife;
import butterknife.OnClick;

/**
 * Created by 杜卓轩 on 2018/2/28.
 */




//public class FragmentOne extends BaseFragment {
public class FragmentOne extends Fragment {
    /*public static FragmentOne newInstance(String s){
        Bundle bundle = new Bundle();
        bundle.putString(Constants.KEY_ARGS,s);
        FragmentOne fragment = new FragmentOne();
        fragment.setArguments(bundle);
        return fragment;
    }*/




    //@Bind(R.id.common_iv_back)
    //ImageView mCommonIvBack;
    //@Bind(R.id.common_tv_title)
   // TextView mCommonTvTitle;
  //  @Bind(R.id.common_iv_test)
    //ImageView mCommonIvTest;
    //@Bind(R.id.common_title_ll)
   // LinearLayout mCommonTitleLl;
    @Bind(R.id.main_iv_circle)
    ImageView mMainIvCircle;
    @Bind(R.id.main_tv_date)
    TextView mMainTvDate;
    @Bind(R.id.main_tv_content)
    TextView mMainTvContent;
    @Bind(R.id.item_ll_control)
    LinearLayout mItemLlControl;

    @Bind(R.id.main_rv_show_diary)
    RecyclerView mMainRvShowDiary;
    @Bind(R.id.main_fab_enter_edit)
    FloatingActionButton mMainFabEnterEdit;
    @Bind(R.id.main_rl_main)
    RelativeLayout mMainRlMain;
    @Bind(R.id.item_first)
    LinearLayout mItemFirst;
    @Bind(R.id.main_ll_main)
    LinearLayout mMainLlMain;
    @Bind(R.id.searchView)
    SearchView mSearchView;
    private List<diaryBean> mDiaryBeanList=new ArrayList<>();


    private diaryDB mHelper;

    private static String IS_WRITE = "true";

    private int mEditPosition = -1;
    private DiaryAdapter diaryAdapter;
    /**
     * 标识今天是否已经写了日记
     */
    private boolean isWrite = false;
    private static TextView mTvTest;
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View rootView = inflater.inflate(R.layout.fragment_1, container, false);
        ButterKnife.bind(this,rootView);
        StatusBarCompat.compat(getActivity(), Color.parseColor("#161414"));
        mHelper = new diaryDB(getActivity(), "Diary.db", null, 1);
        //ActionBar actionBar = getSupportActionBar();
        //actionBar.hide();
        if(!EventBus.getDefault().isRegistered(this)){//加上判断
            EventBus.getDefault().register(this);
        }

        SpHelper spHelper = SpHelper.getInstance(getActivity());

        initTitle();
        getDiaryBeanList();
        RecyclerView.LayoutManager layoutManager=new LinearLayoutManager(getActivity());
        mMainRvShowDiary.setLayoutManager(layoutManager);
        diaryAdapter=new DiaryAdapter(getActivity().getApplicationContext(),mDiaryBeanList);
        mMainRvShowDiary.setAdapter(diaryAdapter);
        mTvTest = new TextView(getActivity());
        mTvTest.setText("hello world");
        searchEvent();
        mSearchView.clearFocus();
        return rootView;
    }
    public static void  startActivity(Context context) {
        Intent intent = new Intent(context,MainActivity.class);
        context.startActivity(intent);
        //diaryAdapter.notifyDataSetChanged();
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        //setContentView(R.layout.activity_main);
        //AppManager.getAppManager().addActivity(getActivity());

    }

    private void initTitle() {
        mMainTvDate.setText("今天，" + GetDate.getDate());
       // mCommonTvTitle.setText("日记");
      //  mCommonIvBack.setVisibility(View.INVISIBLE);
      //  mCommonIvTest.setVisibility(View.INVISIBLE);

    }

    private void searchEvent(){

        mSearchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
            // 当点击搜索按钮时触发该方法
            @Override
            public boolean onQueryTextSubmit(String query) {
                return false;
            }

            // 当搜索内容改变时触发该方法
            @Override
            public boolean onQueryTextChange(String newText) {

                    diaryAdapter.filter(newText);

                return false;
            }
        });
    }




    private List<diaryBean> getDiaryBeanList() {

        //mDiaryBeanList = new ArrayList<>();
        List<diaryBean> diaryList = new ArrayList<>();
        SQLiteDatabase sqLiteDatabase = mHelper.getWritableDatabase();
        Cursor cursor = sqLiteDatabase.query("Diary", null, null, null, null, null, null);

        if (cursor.moveToFirst()) {
            do {
                String date = cursor.getString(cursor.getColumnIndex("date"));
                String dateSystem = GetDate.getDate().toString();
                if (date.equals(dateSystem)) {
                    mMainLlMain.removeView(mItemFirst);

                    break;
                }
            } while (cursor.moveToNext());
        }


        if (cursor.moveToFirst()) {
            do {
                String date = cursor.getString(cursor.getColumnIndex("date"));
                String title = cursor.getString(cursor.getColumnIndex("title"));
                String content = cursor.getString(cursor.getColumnIndex("content"));
                String tag = cursor.getString(cursor.getColumnIndex("tag"));
                mDiaryBeanList.add(new diaryBean(date, title, content, tag));
            } while (cursor.moveToNext());
        }
        cursor.close();

        for (int i = mDiaryBeanList.size() - 1; i >= 0; i--) {
            diaryList.add(mDiaryBeanList.get(i));
        }

        mDiaryBeanList = diaryList;
        return mDiaryBeanList;
    }

    @Subscribe
    public void startUpdateDiaryActivity(StartUpdateDiaryEvent event) {
        String title = mDiaryBeanList.get(event.getPosition()).getTitle();
        String content = mDiaryBeanList.get(event.getPosition()).getContent();
        String tag = mDiaryBeanList.get(event.getPosition()).getTag();
        UpdateDiaryActivity.startActivity(getActivity(), title, content, tag);
        getActivity().finish();
       // onDestroy();

    }

    @Subscribe
    public void DelDiaryActivity(final DelDiaryEvent event) {
        //final String date = mDiaryBeanList.get(event.getPosition()).getDate();
         String title = mDiaryBeanList.get(event.getPosition()).getTitle();
         String content = mDiaryBeanList.get(event.getPosition()).getContent();
         final String tag = mDiaryBeanList.get(event.getPosition()).getTag();
        //UpdateDiaryActivity.startActivity(getActivity(), title, content, tag);
        android.support.v7.app.AlertDialog.Builder alertDialogBuilder = new android.support.v7.app.AlertDialog.Builder(getActivity());
        alertDialogBuilder.setMessage("确定要删除该日记吗？").setPositiveButton("确定", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int which) {

//                        String title = mUpdateDiaryEtTitle.getText().toString();
                //String tag = mTvTag.getText().toString();
                SQLiteDatabase dbDelete = mHelper.getWritableDatabase();
                dbDelete.delete("Diary", "tag = ?", new String[]{tag});
                mDiaryBeanList.remove(event.getPosition());
                diaryAdapter.notifyItemRemoved(event.getPosition());

              /*  getDiaryBeanList();
                RecyclerView.LayoutManager layoutManager=new LinearLayoutManager(getActivity());
                mMainRvShowDiary.setLayoutManager(layoutManager);*/
                diaryAdapter=new DiaryAdapter(getActivity().getApplicationContext(),mDiaryBeanList);
                mMainRvShowDiary.setAdapter(diaryAdapter);
                //if(event.getPosition()==0){
                    //mMainLlMain.addView(mItemFirst);
               // }



                //mMainRvShowDiary.notify();
                //mDiaryBeanList.remove(new diaryBean(date,title, content, tag));
                //diaryAdapter.notifyDataSetChanged();
                //FragmentOne.startActivity(getActivity());


               // FragmentOne.startActivity(UpdateDiaryActivity.this);
            }
        }).setNegativeButton("取消", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int which) {
            }
        }).show();
    }




    @Override
    public void onDestroy() {
        super.onDestroy();
        EventBus.getDefault().unregister(this);
    }

    @OnClick(R.id.main_fab_enter_edit)
    public void onClick() {
        AddDiaryActivity.startActivity(getActivity());
        getActivity().finish();
    }

    public void onResume(){
        super.onResume();

        mSearchView.setFocusable(true);
        mSearchView.setFocusableInTouchMode(true);
        //onCreateView(null,null,null);
    }
    public void onStart(){
        super.onStart();
        //getDiaryBeanList();

        //diaryAdapter.notifyDataSetChanged();
    }


}






package com.dzx.fragment;

import android.Manifest;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;

import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;

import android.support.v4.app.ActivityCompat;
import android.support.v4.app.Fragment;
import android.support.v4.content.ContextCompat;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ListView;
import android.widget.TextView;

import com.amap.api.location.AMapLocation;
import com.amap.api.location.AMapLocationClient;
import com.amap.api.location.AMapLocationClientOption;
import com.amap.api.location.AMapLocationListener;
import com.dzx.Adapter.weatherInfoViewAdapter;
import com.dzx.Bean.weatherInfoBean;
import com.dzx.R;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Random;

import okhttp3.Call;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

import com.dzx.Bean.weatherBean;
import com.google.gson.Gson;
import com.dzx.util.GetTime;
import static java.lang.Boolean.TRUE;


/**
 * Created by 杜卓轩 on 2018/2/28.
 */


public class FragmentThree extends Fragment implements AMapLocationListener{
    public AMapLocationClient mLocationClient=null;
    public AMapLocationClientOption mLocationOption=null;
    public String city;
    public TextView fragment3;

    public String cityCode;
    public double mLatitude;
    public double mLongitude;
    public TextView textView2;
    public TextView t_city;
    public TextView t_date;
    public TextView t_temp;
    public TextView t_weath;
    public TextView t_wind;
    public TextView t_air;
    public String weatherInfo;
    public boolean flag=TRUE;

    public String s_city;
    public String s_date;
    public String s_temp;
    public String s_weath;
    public String s_wind;
    public String s_air;
    public GetTime mgetTime;

    public static SharedPreferences sp;


    private String randomTips_night[]={//17-21
            "记得好好吃晚饭！",
            "现在大概是晚上吧？（如果没有BUG的话）\n在自习，在上课，还是在去食堂的路上呢？",
            "诶嘿，今天过的怎么样啊！",
            "晚上好啊！",
            "什么东西都要坚持才好！请收下我这碗鸡汤！"
    };
    private String randomTips_morning[]={//6-8
            "嗨，早上好啊！",
            "今天天气怎么样呢？",
            "要带着一天的好心情啊！",
            "又是新的一天！",
            "要一直元气满满啊！会为你加油的！！"
    };
    private String randomTips_noon[]={//10-14
            "午安~！",
            "中午稍稍休息一下吧！",
            "不如小睡一下养足精神...",
            "感觉我们这里好热啊！",
            "记得不要在路上玩手机啊！注意安全。"
    };
    private String randomTips_midnight[]={//21-6
            "现在...应该是很晚了吧！",
            "还没有休息吗？",
            "如果没有什么事的话就早点休息吧！",
            "累吗...要照顾好自己啊",
            "如果已经很困，不如明早早些起完成待续的任务？"
    };
    private String randomTips_daily[]={//8-10
            "这里是日常问候哟！",
            "有什么不开心的事就在这里说一说吧！",
            "假装我能听见。",
            "(眯眼笑)",
            "一起笑一下！"
    };
    private String randomTips_afternoon[]={//14-17
            "大概是下午？",
            "在上课吗？好好听讲！",
            "也许自习很枯燥但是....不对！如果有人陪或许就不那么枯燥了吧！",
            "好吧？当我没说....",
            "那就这样吧！加油！"
    };

    Random rand=new Random();

    //测试代码。测试功能
    private weatherInfoViewAdapter weatherInfoViewAdapters;
    private ListView weather_listView;

    private List<weatherInfoBean> weatherInfoBeans_List = new ArrayList<weatherInfoBean>();
    private Handler handler_p = new Handler() {
        public void handleMessage(android.os.Message msg) {
            int what = msg.what;
            switch (what) {
                case 1:
                    /**
                     * ListView条目控制在最后一行
                     */
                    weather_listView.setSelection(weatherInfoBeans_List.size());
                    break;

                default:
                    break;
            }
        };
    };






    public static boolean isNetworkAvailable(Context context) {

        if(context!=null) {
            ConnectivityManager cm = (ConnectivityManager) context
                    .getSystemService(Context.CONNECTIVITY_SERVICE);
            if (cm == null) {return false;
            } else {
                //如果仅仅是用来判断网络连接
                //则可以使用 cm.getActiveNetworkInfo().isAvailable();
                NetworkInfo[] info = cm.getAllNetworkInfo();
                if (info != null) {
                    for (int i = 0; i < info.length; i++) {
                        if (info[i].getState() == NetworkInfo.State.CONNECTED) {
                            return true;
                        }
                    }
                }
            }
        }

        return false;
    }


    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        //View rootView = inflater.inflate(R.layout.fragment_3, container, false);
        View rootView = inflater.inflate(R.layout.fragment_weather, container, false);
        initPermission();
        location();



        //测试：

        weather_listView = (ListView) rootView.findViewById(R.id.lv_chat_dialog);
        Button btn_forecast_send = (Button) rootView.findViewById(R.id.btn_forecast);
        Button btn_tips_send = (Button) rootView.findViewById(R.id.btn_tips);
        /**
         * 发送按钮的点击事件
         */

        btn_tips_send.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View arg0) {

                // TODO Auto-generated method stub
               // if (isNetworkAvailable(getActivity().getApplicationContext())) {
                HashMap<String,Object> map=mgetTime.getTime();
                int nowtime=Integer.parseInt(map.get("hour").toString());
                int nowDay=Integer.parseInt(map.get("day").toString());
                sp = getActivity().getSharedPreferences("Time_record", Context.MODE_PRIVATE);

                if(nowtime-sp.getInt("LAST_TIME",0)>=2  ||nowDay-sp.getInt("LAST_DAY",0)!=0) {//如果与上次使用tips间隔超过三小时（仅使用hour来粗略估计）



                    SharedPreferences.Editor editor = sp.edit();
                    editor.putInt("LAST_TIME", nowtime);
                    editor.putInt("LAST_DAY",nowDay);
                    editor.commit();
                    //更新使用时间。

                    weatherInfoBean weatherInfoBeans = new weatherInfoBean();
                    weatherInfoBeans.setMeSend(true);
                    weatherInfoBeans.setIsNet(true);
                    weatherInfoBeans.setInfo("想说的话");
                    weatherInfoBeans_List.add(weatherInfoBeans);

                    //weatherInfoViewAdapters.notifyDataSetChanged();
                    // if (!isNetworkAvailable(getActivity().getApplicationContext())) {
                    weatherInfoViewAdapters = new weatherInfoViewAdapter(getActivity(), weatherInfoBeans_List);
                    weather_listView.setAdapter(weatherInfoViewAdapters);
                    //  }
                    weatherInfoViewAdapters.notifyDataSetChanged();

                    weatherInfoBeans = new weatherInfoBean();
                    weatherInfoBeans.setMeSend(false);
                    weatherInfoBeans.setIsWeather(false);

                    //Log.i("tag",map.get("hour").toString());
                    if (nowtime <= 24 && nowtime >= 21) {
                        int random_tips = rand.nextInt(5);
                        weatherInfoBeans.setTips(randomTips_midnight[random_tips]);
                    } else if (nowtime <= 21 && nowtime >= 17) {
                        int random_tips = rand.nextInt(5);
                        weatherInfoBeans.setTips(randomTips_night[random_tips]);
                    } else if (nowtime <= 17 && nowtime >= 14) {
                        int random_tips = rand.nextInt(5);
                        weatherInfoBeans.setTips(randomTips_afternoon[random_tips]);
                    } else if (nowtime <= 14 && nowtime >= 10) {
                        int random_tips = rand.nextInt(5);
                        weatherInfoBeans.setTips(randomTips_noon[random_tips]);
                    } else if (nowtime <= 10 && nowtime >= 8) {
                        int random_tips = rand.nextInt(5);
                        weatherInfoBeans.setTips(randomTips_daily[random_tips]);
                    } else if (nowtime <= 8 && nowtime >= 6) {
                        int random_tips = rand.nextInt(5);
                        weatherInfoBeans.setTips(randomTips_morning[random_tips]);
                    } else if (nowtime <= 6 && nowtime >= 0) {
                        int random_tips = rand.nextInt(5);
                        weatherInfoBeans.setTips(randomTips_midnight[random_tips]);
                    }


                    weatherInfoBeans_List.add(weatherInfoBeans);

                    weatherInfoViewAdapters.notifyDataSetChanged();
                    handler_p.sendEmptyMessage(1);
                }
                else {
                    weatherInfoBean weatherInfoBeans = new weatherInfoBean();
                    weatherInfoBeans.setMeSend(false);
                    weatherInfoBeans.setIsWeather(false);
                    //weatherInfoBeans.setIsNet(true);
                    weatherInfoBeans.setTips("先去忙吧！"+"\n"+"不要这么频繁的点击啊。"+"\n"+"考虑一下存货问题！"+"\n"+"留一些以后看可好...");
                    weatherInfoBeans_List.add(weatherInfoBeans);

                    //weatherInfoViewAdapters.notifyDataSetChanged();
                    // if (!isNetworkAvailable(getActivity().getApplicationContext())) {
                    weatherInfoViewAdapters = new weatherInfoViewAdapter(getActivity(), weatherInfoBeans_List);
                    weather_listView.setAdapter(weatherInfoViewAdapters);
                    //  }
                    weatherInfoViewAdapters.notifyDataSetChanged();
                    handler_p.sendEmptyMessage(1);
                }
               // }
               /*else{
                    weatherInfoBean weatherInfoBeans = new weatherInfoBean();
                    weatherInfoBeans.setMeSend(true);
                    weatherInfoBeans.setIsNet(false);
                    weatherInfoBeans.setNetInfo("网络没有连接上啊,请先连接网络再试");
                    weatherInfoBeans_List.add(weatherInfoBeans);
                    weatherInfoViewAdapters = new weatherInfoViewAdapter(getActivity(), weatherInfoBeans_List);
                    weather_listView.setAdapter(weatherInfoViewAdapters);
                    weatherInfoViewAdapters.notifyDataSetChanged();
                }*/
            }
        });
        btn_forecast_send.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View arg0) {
                // TODO Auto-generated method stub

                if (isNetworkAvailable(getActivity().getApplicationContext())) {
                    Log.i("tag","youwangluolianjie");
                    weatherInfoBean weatherInfoBeans = new weatherInfoBean();
                    weatherInfoBeans.setMeSend(true);
                    weatherInfoBeans.setIsNet(true);
                    weatherInfoBeans.setInfo("未来N天天气预报");
                    weatherInfoBeans_List.add(weatherInfoBeans);
                    //weatherInfoViewAdapters.notifyDataSetChanged();

                    /*try {
                        Thread.currentThread().sleep(1000);
                    }catch (InterruptedException e) {
                        e.printStackTrace();
                    }*/

                    weatherInfoBeans = new weatherInfoBean();
                    weatherInfoBeans.setMeSend(false);
                    weatherInfoBeans.setIsWeather(true);
                    Gson gson = new Gson();
                    weatherBean weatherBean = gson.fromJson(weatherInfo, weatherBean.class);
                    weatherInfoBeans.setParent_city(weatherBean.getHeWeather6().get(0).getBasic().getParent_city());
                    weatherInfoBeans.setCity(weatherBean.getHeWeather6().get(0).getBasic().getLocation());
                    weatherInfoBeans.setDate(weatherBean.getHeWeather6().get(0).getDaily_forecast().get(1).getDate());
                    weatherInfoBeans.setTemp(weatherBean.getHeWeather6().get(0).getDaily_forecast().get(1).getTmp_min());
                    weatherInfoBeans.setTemp_max(weatherBean.getHeWeather6().get(0).getDaily_forecast().get(1).getTmp_max());
                    weatherInfoBeans.setWeather(weatherBean.getHeWeather6().get(0).getDaily_forecast().get(1).getCond_txt_d());
                    weatherInfoBeans.setWind(weatherBean.getHeWeather6().get(0).getDaily_forecast().get(1).getWind_dir());
                    weatherInfoBeans_List.add(weatherInfoBeans);

                    weatherInfoViewAdapters.notifyDataSetChanged();


                    weatherInfoBeans = new weatherInfoBean();
                    weatherInfoBeans.setMeSend(false);
                    weatherInfoBeans.setIsWeather(true);
                    gson = new Gson();
                    weatherBean = gson.fromJson(weatherInfo, weatherBean.class);
                    weatherInfoBeans.setParent_city(weatherBean.getHeWeather6().get(0).getBasic().getParent_city());
                    weatherInfoBeans.setCity(weatherBean.getHeWeather6().get(0).getBasic().getLocation());
                    weatherInfoBeans.setDate(weatherBean.getHeWeather6().get(0).getDaily_forecast().get(2).getDate());
                    weatherInfoBeans.setTemp(weatherBean.getHeWeather6().get(0).getDaily_forecast().get(2).getTmp_min());
                    weatherInfoBeans.setTemp_max(weatherBean.getHeWeather6().get(0).getDaily_forecast().get(2).getTmp_max());
                    weatherInfoBeans.setWeather(weatherBean.getHeWeather6().get(0).getDaily_forecast().get(2).getCond_txt_d());
                    weatherInfoBeans.setWind(weatherBean.getHeWeather6().get(0).getDaily_forecast().get(2).getWind_dir());
                    weatherInfoBeans_List.add(weatherInfoBeans);
                    weatherInfoViewAdapters.notifyDataSetChanged();

                    handler_p.sendEmptyMessage(1);
                }
                else{
                    weatherInfoBean weatherInfoBeans = new weatherInfoBean();
                    weatherInfoBeans.setMeSend(true);
                    weatherInfoBeans.setIsNet(false);
                    weatherInfoBeans.setNetInfo("网络没有连接上啊,请先连接网络再试");
                    weatherInfoBeans_List.add(weatherInfoBeans);
                    weatherInfoViewAdapters = new weatherInfoViewAdapter(getActivity(), weatherInfoBeans_List);
                    weather_listView.setAdapter(weatherInfoViewAdapters);
                    weatherInfoViewAdapters.notifyDataSetChanged();
                    handler_p.sendEmptyMessage(1);
                }
            }
        });
      //  initView(rootView);

        return rootView;
    }


    private void initView(View rootView){
        fragment3= rootView.findViewById(R.id.fragment_3_text);
        textView2=rootView.findViewById(R.id.textView1);
        t_air=rootView.findViewById(R.id.tv_air);
        t_city=rootView.findViewById(R.id.tv_city);
        t_date=rootView.findViewById(R.id.tv_date);
        t_temp=rootView.findViewById(R.id.tv_temp);
        t_weath=rootView.findViewById(R.id.tv_weath);
        t_wind=rootView.findViewById(R.id.tv_wind);

    }
    @Override
    public void onStart(){
        super.onStart();
       // fragment3.setText(cityCode);
        //fragment3.setText("cityCode");
     //   Log.i("tag",cityCode);
       // textView2.setText(weatherInfo);
    }

    private void location() {
        //初始化定位
        mLocationClient = new AMapLocationClient(getContext());
        //设置定位回调监听
        mLocationClient.setLocationListener((AMapLocationListener) this);
        //初始化定位参数
        mLocationOption = new AMapLocationClientOption();
        //设置定位模式为Hight_Accuracy高精度模式，Battery_Saving为低功耗模式，Device_Sensors是仅设备模式
        mLocationOption.setLocationMode(AMapLocationClientOption.AMapLocationMode.Hight_Accuracy);
        //设置是否返回地址信息（默认返回地址信息）
        mLocationOption.setNeedAddress(true);
        //设置是否只定位一次,默认为false
        mLocationOption.setOnceLocation(true);
        //设置是否强制刷新WIFI，默认为强制刷新
        mLocationOption.setWifiActiveScan(true);
        //设置是否允许模拟位置,默认为false，不允许模拟位置
        mLocationOption.setMockEnable(false);
        //设置定位间隔,单位毫秒,默认为2000ms
        mLocationOption.setInterval(2000);

        //给定位客户端对象设置定位参数
        mLocationClient.setLocationOption(mLocationOption);

        //启动定位
        mLocationClient.startLocation();


    }

    @Override
    public void onLocationChanged(AMapLocation amapLocation) {

        if (amapLocation != null) {
            if (amapLocation.getErrorCode() == 0) {
                //可在其中解析amapLocation获取相应内容。
                amapLocation.getCountry();//国家信息
                amapLocation.getProvince();//省信息
                city = amapLocation.getCity().toString();//城市信息
                mLatitude = amapLocation.getLatitude();//获取纬度
                mLongitude = amapLocation.getLongitude();//获取经度
                new Thread(new Runnable() {
                    @Override
                    public void run() {
                        String url = "https://free-api.heweather.com/s6/weather?" +
                                "location=" + mLongitude + "," + mLatitude + "&" +
                                "key=1c3120151deb44f3aaa70d5c2e0e5581" + "&" +

                                "unit=m";

                        OkHttpClient okHttpClient = new OkHttpClient();
                        Request request = new Request.Builder().url(url).build();
                        Call call = okHttpClient.newCall(request);
                        try {
                            Response response = call.execute();
                            //打印json
                            //System.out.println(response.body().string());
                            // Log.i("tag",response.body().string());
                            weatherInfo = response.body().string();
                            Log.i("tag", weatherInfo);

                        } catch (IOException e) {
                            e.printStackTrace();
                            Log.i("tag", "ioexception wrong");
                            //textView2.setText("error");
                        }


                      //  s_air = weatherBean.getHeWeather6().get(0).getNow();


                      //  tv_qlty.setText("空气质量："+qlty);
                        handler.sendEmptyMessage(1);
                    }
                }).start();
                //System.out.println(mLatitude);
                //System.out.println(mLongitude);
                //fragment3.setText(city);
                /*city="北京";
                Cursor C=com.dzx.db.rawQuery("select * from city.com.dzx.db where city like" + city+"%",null);
                while	(C.moveToNext()) {
                    String	cityCode	=	C.getString(C.getColumnIndex("number"));
                }*/
               // fragment3.setText(cityCode);
             //   textView2.setText(weatherInfo);







                /*SharedPreferences sharedPreferences=getSharedPreferences("CityCodePreference", Activity_MODE_PRIVATE);
                SharedPreferences.Editor editor=sharedPreferences.edit();
                editor.putString("cityCode",cityCode);
                editor.commit();
                Intent intent=new intent(getActivity(),);
                intent.putExtra("cityCode",cityCode);
                startActivity(intent);*/

            }
        } else {
            //定位失败时，可通过ErrCode（错误码）信息来确定失败的原因，errInfo是错误信息，详见错误码表。
            Log.e("AmapError", "location Error, ErrCode:"
                    + amapLocation.getErrorCode() + ", errInfo:"
                    + amapLocation.getErrorInfo());
        }
    }




    private Handler handler = new Handler(){
        @Override
public  void handleMessage(Message msg) {
            switch (msg.what) {
                case 0:

                    break;
                case 1:
                   // fragment3.setText(cityCode);
                   // textView2.setText(weatherInfo);
                   // t_city.setText("城市："+s_city);
                    //t_date.setText("日期："+s_date);
                   // t_temp.setText("温度："+s_temp);
                   // t_weath.setText("天气情况："+s_weath);
                   // t_wind.setText("风向："+s_wind);
                    if (isNetworkAvailable(getActivity())) {
                        weatherInfoBean weatherInfoBeans = new weatherInfoBean();
                        weatherInfoBeans.setMeSend(false);
                        weatherInfoBeans.setIsWeather(true);
                        Gson gson = new Gson();
                        weatherBean weatherBean = gson.fromJson(weatherInfo, weatherBean.class);
                        weatherInfoBeans.setParent_city(weatherBean.getHeWeather6().get(0).getBasic().getParent_city());
                        weatherInfoBeans.setCity(weatherBean.getHeWeather6().get(0).getBasic().getLocation());
                        weatherInfoBeans.setDate(weatherBean.getHeWeather6().get(0).getDaily_forecast().get(0).getDate());
                        weatherInfoBeans.setTemp(weatherBean.getHeWeather6().get(0).getDaily_forecast().get(0).getTmp_min());
                        weatherInfoBeans.setTemp_max(weatherBean.getHeWeather6().get(0).getDaily_forecast().get(0).getTmp_max());
                        weatherInfoBeans.setWeather(weatherBean.getHeWeather6().get(0).getDaily_forecast().get(0).getCond_txt_d());
                        weatherInfoBeans.setWind(weatherBean.getHeWeather6().get(0).getDaily_forecast().get(0).getWind_dir());
                        weatherInfoBeans_List.add(weatherInfoBeans);

                        /**
                         *setAdapter
                         */
                        weatherInfoViewAdapters = new weatherInfoViewAdapter(getActivity(), weatherInfoBeans_List);
                        weather_listView.setAdapter(weatherInfoViewAdapters);
                        weatherInfoViewAdapters.notifyDataSetChanged();
                    }


                    break;
                default:
                    break;
            }
        }
    };








    private void initPermission() {
        String[] permissions = {
                Manifest.permission.ACCESS_COARSE_LOCATION,
                Manifest.permission.ACCESS_FINE_LOCATION,
                Manifest.permission.WRITE_EXTERNAL_STORAGE,
                Manifest.permission.READ_EXTERNAL_STORAGE,
                Manifest.permission.READ_PHONE_STATE
        };

        ArrayList<String> toApplyList = new ArrayList<String>();

        for (String perm : permissions) {
            if (PackageManager.PERMISSION_GRANTED != ContextCompat.checkSelfPermission(getActivity(), perm)) {
                toApplyList.add(perm);
                // 进入到这里代表没有权限.

            }
        }
        String[] tmpList = new String[toApplyList.size()];
        if (!toApplyList.isEmpty()) {
            ActivityCompat.requestPermissions(getActivity(), toApplyList.toArray(tmpList), 123);
        }

    }

    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        // 此处为android 6.0以上动态授权的回调，用户自行实现。
    }
}
package com.dzx.fragment;

import android.Manifest;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.support.v4.app.ActivityCompat;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.content.ContextCompat;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;

import com.baidu.speech.EventListener;
import com.baidu.speech.EventManager;
import com.baidu.speech.EventManagerFactory;
import com.baidu.speech.asr.SpeechConstant;
import com.dzx.Constants;
import com.dzx.R;

import org.json.JSONObject;

import java.util.ArrayList;

import java.util.LinkedHashMap;
import java.util.Map;

/**
 * Created by 杜卓轩 on 2018/2/28.
 */

//public class FragmentTwo extends BaseFragment {
   /* public static FragmentTwo newInstance(String s){
    Bundle bundle = new Bundle();
    bundle.putString(Constants.KEY_ARGS,s);
    FragmentTwo fragment = new FragmentTwo();
    fragment.setArguments(bundle);
    return fragment;
}*/
public class FragmentTwo extends Fragment implements EventListener{
    protected TextView txtLog;
    protected TextView txtResult;
    protected Button btn;
    protected Button stopBtn;
    private static String DESC_TEXT = "精简版识别，带有SDK唤醒运行的最少代码，仅仅展示如何调用，\n" +
            "也可以用来反馈测试SDK输入参数及输出回调。\n" +
            "本示例需要自行根据文档填写参数，可以使用之前识别示例中的日志中的参数。\n" +
            "需要完整版请参见之前的识别示例。\n" +
            "需要测试离线命令词识别功能可以将本类中的enableOffline改成true，首次测试离线命令词请联网使用。之后请说出“打电话给张三”";

    private EventManager asr;

    private boolean logTime = true;

    private boolean enableOffline = false; // 测试离线命令词，需要改成true

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View rootView = inflater.inflate(R.layout.fragment_2, container, false);


       // super.onCreate(savedInstanceState);


        initView(rootView);
        initPermission();
        asr = EventManagerFactory.create(getActivity(), "asr");
        asr.registerListener(this); //  EventListener 中 onEvent方法
        btn.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                start();
            }
        });
        stopBtn.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                stop();
            }
        });
        if (enableOffline) {
            loadOfflineEngine(); // 测试离线命令词请开启, 测试 ASR_OFFLINE_ENGINE_GRAMMER_FILE_PATH 参数时开启
        }
        return rootView;
    }

    /**
     * 测试参数填在这里
     */
    private void start() {
        txtLog.setText("");
        Map<String, Object> params = new LinkedHashMap<String, Object>();
        String event = null;
        event = SpeechConstant.ASR_START; // 替换成测试的event

        if (enableOffline) {
            params.put(SpeechConstant.DECODER, 2);
        }
        params.put(SpeechConstant.ACCEPT_AUDIO_VOLUME, false);
        // params.put(SpeechConstant.NLU, "enable");
        // params.put(SpeechConstant.VAD_ENDPOINT_TIMEOUT, 0); // 长语音
        // params.put(SpeechConstant.IN_FILE, "res:///com/baidu/android/voicedemo/16k_test.pcm");
        // params.put(SpeechConstant.VAD, SpeechConstant.VAD_DNN);
        // params.put(SpeechConstant.PROP ,20000);
        // params.put(SpeechConstant.PID, 1537); // 中文输入法模型，有逗号
        // 请先使用如‘在线识别’界面测试和生成识别参数。 params同ActivityRecog类中myRecognizer.start(params);
        String json = null; // 可以替换成自己的json
        json = new JSONObject(params).toString(); // 这里可以替换成你需要测试的json
        asr.send(event, json, null, 0, 0);
        printLog("输入参数：" + json);
    }

    private void stop() {
        printLog("停止识别：ASR_STOP");
        asr.send(SpeechConstant.ASR_STOP, null, null, 0, 0); //
    }

    private void loadOfflineEngine() {
        Map<String, Object> params = new LinkedHashMap<String, Object>();
        params.put(SpeechConstant.DECODER, 2);
        params.put(SpeechConstant.ASR_OFFLINE_ENGINE_GRAMMER_FILE_PATH, "assets://baidu_speech_grammar.bsg");
        asr.send(SpeechConstant.ASR_KWS_LOAD_ENGINE, new JSONObject(params).toString(), null, 0, 0);
    }

    private void unloadOfflineEngine() {
        asr.send(SpeechConstant.ASR_KWS_UNLOAD_ENGINE, null, null, 0, 0); //
    }



    @Override
    public void onDestroy() {
        super.onDestroy();
        asr.send(SpeechConstant.ASR_CANCEL, "{}", null, 0, 0);
        if (enableOffline) {
            unloadOfflineEngine(); // 测试离线命令词请开启, 测试 ASR_OFFLINE_ENGINE_GRAMMER_FILE_PATH 参数时开启
        }
    }

    //   EventListener  回调方法
    @Override
    public void onEvent(String name, String params, byte[] data, int offset, int length) {
        String logTxt = "name: " + name;


        if (params != null && !params.isEmpty()) {
            logTxt += " ;params :" + params;
        }
        if (name.equals(SpeechConstant.CALLBACK_EVENT_ASR_PARTIAL)) {
            if (params.contains("\"nlu_result\"")) {
                if (length > 0 && data.length > 0) {
                    logTxt += ", 语义解析结果：" + new String(data, offset, length);
                }
            }
        } else if (data != null) {
            logTxt += " ;data length=" + data.length;
        }
        printLog(logTxt);
    }

    private void printLog(String text) {
        if (logTime) {
            text += "  ;time=" + System.currentTimeMillis();
        }
        text += "\n";
        Log.i(getClass().getName(), text);
        txtLog.append(text + "\n");
    }


    private void initView(View rootView) {
        txtResult = (TextView) rootView.findViewById(R.id.txtResult);
        txtLog = (TextView) rootView.findViewById(R.id.txtLog);
        btn = (Button) rootView.findViewById(R.id.btn);
       // stopBtn = (Button) rootView.findViewById(R.id.btn_stop);
        txtLog.setText(DESC_TEXT + "\n");
    }

    /**
     * android 6.0 以上需要动态申请权限
     */
    private void initPermission() {
        String permissions[] = {Manifest.permission.RECORD_AUDIO,
                Manifest.permission.ACCESS_NETWORK_STATE,
                Manifest.permission.INTERNET,
                Manifest.permission.READ_PHONE_STATE,
                Manifest.permission.WRITE_EXTERNAL_STORAGE
        };

        ArrayList<String> toApplyList = new ArrayList<String>();

        for (String perm : permissions) {
            if (PackageManager.PERMISSION_GRANTED != ContextCompat.checkSelfPermission(getActivity(), perm)) {
                toApplyList.add(perm);
                // 进入到这里代表没有权限.

            }
        }
        String tmpList[] = new String[toApplyList.size()];
        if (!toApplyList.isEmpty()) {
            ActivityCompat.requestPermissions(getActivity(), toApplyList.toArray(tmpList), 123);
        }

    }

    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        // 此处为android 6.0以上动态授权的回调，用户自行实现。
    }

}

package com.dzx.Recognization.online;


import java.util.ArrayList;



public class ChainRecogListener implements IRecogListener {

    private ArrayList<IRecogListener> listeners;

    public ChainRecogListener() {
        listeners = new ArrayList<IRecogListener>();
    }

    public void addListener(IRecogListener listener) {
        listeners.add(listener);
    }

    /**
     * ASR_START 输入事件调用后，引擎准备完毕
     */
    @Override
    public void onAsrReady() {
        for (IRecogListener listener : listeners) {
            listener.onAsrReady();
        }
    }

    /**
     * onAsrReady后检查到用户开始说话
     */
    @Override
    public void onAsrBegin() {
        for (IRecogListener listener : listeners) {
            listener.onAsrBegin();
        }
    }

    /**
     * 检查到用户开始说话停止，或者ASR_STOP 输入事件调用后，
     */
    @Override
    public void onAsrEnd() {
        for (IRecogListener listener : listeners) {
            listener.onAsrEnd();
        }
    }

    /**
     * onAsrBegin 后 随着用户的说话，返回的临时结果
     *
     * @param results     可能返回多个结果，请取第一个结果
     * @param recogResult 完整的结果
     */
    @Override
    public void onAsrPartialResult(String[] results, RecogResult recogResult) {
        for (IRecogListener listener : listeners) {
            listener.onAsrPartialResult(results, recogResult);
        }
    }

    /**
     * 最终的识别结果
     *
     * @param results     可能返回多个结果，请取第一个结果
     * @param recogResult 完整的结果
     */
    @Override
    public void onAsrFinalResult(String[] results, RecogResult recogResult) {
        for (IRecogListener listener : listeners) {
            listener.onAsrFinalResult(results, recogResult);
        }
    }

    @Override
    public void onAsrFinish(RecogResult recogResult) {
        for (IRecogListener listener : listeners) {
            listener.onAsrFinish(recogResult);
        }
    }

    @Override
    public void onAsrFinishError(int errorCode, int subErrorCode, String errorMessage, String descMessage,
                                 RecogResult recogResult) {
        for (IRecogListener listener : listeners) {
            listener.onAsrFinishError(errorCode, subErrorCode, errorMessage, descMessage, recogResult);
        }
    }

    /**
     * 长语音识别结束
     */
    @Override
    public void onAsrLongFinish() {
        for (IRecogListener listener : listeners) {
            listener.onAsrLongFinish();
        }
    }

    @Override
    public void onAsrVolume(int volumePercent, int volume) {
        for (IRecogListener listener : listeners) {
            listener.onAsrVolume(volumePercent, volume);
        }
    }

    @Override
    public void onAsrAudio(byte[] data, int offset, int length) {
        for (IRecogListener listener : listeners) {
            listener.onAsrAudio(data, offset, length);
        }
    }

    @Override
    public void onAsrExit() {
        for (IRecogListener listener : listeners) {
            listener.onAsrExit();
        }
    }

    @Override
    public void onAsrOnlineNluResult(String nluResult) {
        for (IRecogListener listener : listeners) {
            listener.onAsrOnlineNluResult(nluResult);
        }
    }

    @Override
    public void onOfflineLoaded() {
        for (IRecogListener listener : listeners) {
            listener.onOfflineLoaded();
        }
    }

    @Override
    public void onOfflineUnLoaded() {
        for (IRecogListener listener : listeners) {
            listener.onOfflineUnLoaded();
        }
    }
}
package com.dzx.Recognization.online;

import android.app.Activity;
import android.content.SharedPreferences;
import android.os.Environment;

import com.dzx.util.FileUtil;
import com.dzx.util.Logger;
import com.baidu.speech.asr.SpeechConstant;
import com.dzx.R;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;


public class CommonRecogParams {

    protected String samplePath;
    /**
     * 字符串格式的参数
     */
    protected ArrayList<String> stringParams = new ArrayList<String>();

    /**
     * int格式的参数
     */
    protected ArrayList<String> intParams = new ArrayList<String>();

    /**
     * bool格式的参数
     */
    protected ArrayList<String> boolParams = new ArrayList<String>();

    private static final String TAG = "CommonRecogParams";

    public CommonRecogParams(Activity context) {

        stringParams.addAll(Arrays.asList(
                SpeechConstant.VAD,
                SpeechConstant.IN_FILE
        ));
        intParams.addAll(Arrays.asList(
                SpeechConstant.VAD_ENDPOINT_TIMEOUT
        ));
        boolParams.addAll(Arrays.asList(
                SpeechConstant.ACCEPT_AUDIO_DATA,
                SpeechConstant.ACCEPT_AUDIO_VOLUME
        ));
        initSamplePath(context);
    }

    /**
     * 创建保存OUTFILE的临时目录. 仅用于OUTFILE参数。不使用demo中的OUTFILE参数可忽略此段
     *
     * @param context
     */
    protected void initSamplePath(Activity context) {
        String sampleDir = "baiduASR";
        samplePath = Environment.getExternalStorageDirectory().toString() + "/" + sampleDir;
        if (!FileUtil.makeDir(samplePath)) {
            samplePath = context.getApplication().getExternalFilesDir(sampleDir).getAbsolutePath();
            if (!FileUtil.makeDir(samplePath)) {
                throw new RuntimeException("创建临时目录失败 :" + samplePath);
            }
        }
    }

    public Map<String, Object> fetch(SharedPreferences sp) {
        Map<String, Object> map = new HashMap<String, Object>();

        parseParamArr(sp, map);

      /*  if (sp.getBoolean("_tips_sound", false)) { // 声音回调
            map.put(SpeechConstant.SOUND_START, R.raw.bdspeech_recognition_start);
            map.put(SpeechConstant.SOUND_END, R.raw.bdspeech_speech_end);
            map.put(SpeechConstant.SOUND_SUCCESS, R.raw.bdspeech_recognition_success);
            map.put(SpeechConstant.SOUND_ERROR, R.raw.bdspeech_recognition_error);
            map.put(SpeechConstant.SOUND_CANCEL, R.raw.bdspeech_recognition_cancel);
        }
*/
        if (sp.getBoolean("_outfile", false)) { // 保存录音文件
            map.put(SpeechConstant.ACCEPT_AUDIO_DATA, true); // 目前必须开启此回掉才嫩保存音频
            map.put(SpeechConstant.OUT_FILE, samplePath + "/outfile.pcm");
            Logger.info(TAG, "语音录音文件将保存在：" + samplePath + "/outfile.pcm");
        }

        return map;
    }

    /**
     * 根据 stringParams intParams boolParams中定义的参数名称，提取SharedPreferences相关字段
     *
     * @param sp
     * @param map
     */
    private void parseParamArr(SharedPreferences sp, Map<String, Object> map) {
        for (String name : stringParams) {
            if (sp.contains(name)) {
                String tmp = sp.getString(name, "").replaceAll(",.*", "").trim();
                if (null != tmp && !"".equals(tmp)) {
                    map.put(name, tmp);
                }
            }
        }
        for (String name : intParams) {
            if (sp.contains(name)) {
                String tmp = sp.getString(name, "").replaceAll(",.*", "").trim();
                if (null != tmp && !"".equals(tmp)) {
                    map.put(name, Integer.parseInt(tmp));
                }
            }
        }
        for (String name : boolParams) {
            if (sp.contains(name)) {
                map.put(name, sp.getBoolean(name, false));
            }
        }
    }
}

package com.dzx.Recognization.online;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;

/**
 * <p>
 * 解决大文件的输入问题。
 */

public class FileAudioInputStream extends InputStream {

    private InputStream in;

    public static final float SPEED = 2;

    public FileAudioInputStream(String file) throws FileNotFoundException {
        in = new FileInputStream(file);
    }

    public FileAudioInputStream(InputStream in) {
        this.in = in;
    }

    private long firstRead = -1;
    private long returnCount;

    @Override
    public int read() throws IOException {
        throw new UnsupportedOperationException();
    }

    @Override
    public int read(byte[] buffer, int byteOffset, int byteCount) throws IOException {
        if (firstRead == -1) {
            firstRead = System.currentTimeMillis();
        }
        long limit = (long) ((System.currentTimeMillis() - firstRead) * 32 * SPEED);
        long count = Math.min((limit - returnCount), byteCount);
        if (count <= 0) {
            try {
                Thread.sleep(1);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            return 0;
        } else {
            int r = in.read(buffer, byteOffset, (int) count);
            if (r >= 0) {
                returnCount += r;
            }
            return r;
        }
    }

    @Override
    public void close() throws IOException {
        super.close();
        if (null != in) {
            in.close();
        }
    }
}
package com.dzx.Recognization.online;

import android.app.Activity;

import com.dzx.util.Logger;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;

/**

 */

public class InFileStream {

    private static Activity context;

    private static final String TAG = "InFileStream";

    public static void setContext(Activity context) {
        InFileStream.context = context;
    }

    private static String filename;

    private static InputStream is;

    public static void reset() {
        filename = null;
        is = null;
    }

    public static void setFileName(String filename) {
        InFileStream.filename = filename;
    }

    public static void setInputStream(InputStream is2) {
        is = is2;
    }

    public static InputStream create16kStream() {
        if (is != null) {
            return new FileAudioInputStream(is);
        } else if (filename != null) {
            try {
                return new FileAudioInputStream(filename);
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        } else {
            return new FileAudioInputStream(createFileStream());
        }
        return null;
    }

    private static InputStream createFileStream() {
        InputStream res = null;
        try {
            InputStream is = context.getAssets().open("outfile.pcm");
            Logger.info(TAG, "create input stream ok " + is.available());
            res = new FileAudioInputStream(is);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return res;
    }
}package com.dzx.Recognization.online;

import android.app.Activity;

import com.dzx.util.Logger;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;

/**

 */

public class InFileStream {

    private static Activity context;

    private static final String TAG = "InFileStream";

    public static void setContext(Activity context) {
        InFileStream.context = context;
    }

    private static String filename;

    private static InputStream is;

    public static void reset() {
        filename = null;
        is = null;
    }

    public static void setFileName(String filename) {
        InFileStream.filename = filename;
    }

    public static void setInputStream(InputStream is2) {
        is = is2;
    }

    public static InputStream create16kStream() {
        if (is != null) {
            return new FileAudioInputStream(is);
        } else if (filename != null) {
            try {
                return new FileAudioInputStream(filename);
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        } else {
            return new FileAudioInputStream(createFileStream());
        }
        return null;
    }

    private static InputStream createFileStream() {
        InputStream res = null;
        try {
            InputStream is = context.getAssets().open("outfile.pcm");
            Logger.info(TAG, "create input stream ok " + is.available());
            res = new FileAudioInputStream(is);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return res;
    }
}package com.dzx.Recognization.online;

import android.os.Handler;
import android.os.Message;

/**

 */

public class MessageStatusRecogListener extends StatusRecogListener {
    private Handler handler;

    private long speechEndTime;

    private boolean needTime = true;

    public MessageStatusRecogListener(Handler handler) {
        this.handler = handler;
    }


    @Override
    public void onAsrReady() {
        super.onAsrReady();
        sendStatusMessage("引擎就绪，可以开始说话。");
    }

    @Override
    public void onAsrBegin() {
        super.onAsrBegin();
        sendStatusMessage("检测到用户说话");
    }

    @Override
    public void onAsrEnd() {
        super.onAsrEnd();
        speechEndTime = System.currentTimeMillis();
        //sendMessage("检测到用户说话结束");
    }

    @Override
    public void onAsrPartialResult(String[] results, RecogResult recogResult) {
        sendStatusMessage("临时识别结果，结果是“" + results[0] + "”；原始json：" + recogResult.getOrigalJson());
        super.onAsrPartialResult(results, recogResult);
    }

    @Override
    public void onAsrFinalResult(String[] results, RecogResult recogResult) {
        super.onAsrFinalResult(results, recogResult);
        //String message = "识别结束，结果是”" + results[0] + "”";
        String message =  results[0] ;
        sendStatusMessage(message + "“；原始json：" + recogResult.getOrigalJson());
        if (speechEndTime > 0) {
            long diffTime = System.currentTimeMillis() - speechEndTime;
            //message += "；说话结束到识别结束耗时【" + diffTime + "ms】";

        }
        speechEndTime = 0;
        sendMessage(message, status, true);
    }

    @Override
    public void onAsrFinishError(int errorCode, int subErrorCode, String errorMessage, String descMessage,
                                 RecogResult recogResult) {
        super.onAsrFinishError(errorCode, subErrorCode, errorMessage, descMessage, recogResult);
        String message = "";
        sendStatusMessage(message + "；错误消息:" + errorMessage + "；描述信息：" + descMessage);
        if (speechEndTime > 0) {
            long diffTime = System.currentTimeMillis() - speechEndTime;
            //message += "。说话结束到识别结束耗时【" + diffTime + "ms】";
        }
        speechEndTime = 0;
        sendMessage(message, status, true);
        speechEndTime = 0;
    }

    @Override
    public void onAsrOnlineNluResult(String nluResult) {
        super.onAsrOnlineNluResult(nluResult);
        if (!nluResult.isEmpty()) {
            sendStatusMessage("原始语义识别结果json：" + nluResult);
        }
    }

    @Override
    public void onAsrFinish(RecogResult recogResult) {
        super.onAsrFinish(recogResult);
        sendStatusMessage("识别一段话结束。如果是长语音的情况会继续识别下段话。");

    }

    /**
     * 长语音识别结束
     */
    @Override
    public void onAsrLongFinish() {
        super.onAsrLongFinish();
        sendStatusMessage("长语音识别结束。");
    }


    /**
     * 使用离线命令词时，有该回调说明离线语法资源加载成功
     */
    @Override
    public void onOfflineLoaded() {
        sendStatusMessage("【重要】asr.loaded：离线资源加载成功。没有此回调可能离线语法功能不能使用。");
    }

    /**
     * 使用离线命令词时，有该回调说明离线语法资源加载成功
     */
    @Override
    public void onOfflineUnLoaded() {
        sendStatusMessage(" 离线资源卸载成功。");
    }

    @Override
    public void onAsrExit() {
        super.onAsrExit();
        sendStatusMessage("识别引擎结束并空闲中");
    }

    private void sendStatusMessage(String message) {
        sendMessage(message, status);
    }

    private void sendMessage(String message) {
        sendMessage(message, WHAT_MESSAGE_STATUS);
    }

    private void sendMessage(String message, int what) {
        sendMessage(message, what, false);
    }


    private void sendMessage(String message, int what, boolean highlight) {
        if (needTime && what != STATUS_FINISHED) {
            message += "  ;time=" + System.currentTimeMillis();
        }
        Message msg = Message.obtain();
        msg.what = what;
        msg.arg1 = status;
        if (highlight) {
            msg.arg2 = 1;
        }
        //msg.obj = message + "\n";
        msg.obj=message;
        handler.sendMessage(msg);
    }
}
package com.dzx.Recognization.online;

import android.media.AudioFormat;
import android.media.AudioRecord;
import android.media.MediaRecorder;
import android.support.annotation.NonNull;
import android.util.Log;

import java.io.IOException;
import java.io.InputStream;

/**

 */

public class MicrophoneInputStream extends InputStream {
    private static AudioRecord audioRecord;

    private static MicrophoneInputStream is;

    private boolean isStarted = false;

    private static final String TAG = "MicrophoneInputStream";

    public MicrophoneInputStream() {

        if (audioRecord != null) {
            int bufferSize = AudioRecord.getMinBufferSize(16000,
                    AudioFormat.CHANNEL_CONFIGURATION_MONO, AudioFormat.ENCODING_PCM_16BIT) * 16;
            audioRecord = new AudioRecord(MediaRecorder.AudioSource.MIC,
                    16000, AudioFormat.CHANNEL_CONFIGURATION_MONO, AudioFormat.ENCODING_PCM_16BIT, bufferSize);
        }


    }

    public static MicrophoneInputStream getInstance() {

        if (is == null) {
            synchronized (MicrophoneInputStream.class) {
                if (is == null) {
                    is = new MicrophoneInputStream();
                }
            }
        }
        return is;
    }

    public void start() {
        Log.i(TAG, " MicrophoneInputStream start recoding");
        if (audioRecord == null
                || audioRecord.getState() != AudioRecord.STATE_INITIALIZED) {
            throw new IllegalStateException(
                    "startRecording() called on an uninitialized AudioRecord.");
        }
        audioRecord.startRecording();
    }

    @Override
    public int read() throws IOException {
        throw new UnsupportedOperationException();
    }

    @Override
    public int read(@NonNull byte[] b, int off, int len) throws IOException {
        if (!isStarted) {
            start(); // 建议在CALLBACK_EVENT_ASR_READY事件中调用。
            isStarted = true;
        }
        int count = audioRecord.read(b, off, len);
        // Log.i(TAG, " MicrophoneInputStream read count:" + count);
        return count;
    }

    @Override
    public void close() throws IOException {
        Log.i(TAG, " MicrophoneInputStream close");
        if (audioRecord != null) {
            audioRecord.stop();
            audioRecord.release();
            isStarted = false;
        }
    }
}
package com.dzx.Recognization.online;

import android.media.AudioFormat;
import android.media.AudioRecord;
import android.media.MediaRecorder;
import android.support.annotation.NonNull;
import android.util.Log;

import java.io.IOException;
import java.io.InputStream;

/**

 */

public class MicrophoneInputStream extends InputStream {
    private static AudioRecord audioRecord;

    private static MicrophoneInputStream is;

    private boolean isStarted = false;

    private static final String TAG = "MicrophoneInputStream";

    public MicrophoneInputStream() {

        if (audioRecord != null) {
            int bufferSize = AudioRecord.getMinBufferSize(16000,
                    AudioFormat.CHANNEL_CONFIGURATION_MONO, AudioFormat.ENCODING_PCM_16BIT) * 16;
            audioRecord = new AudioRecord(MediaRecorder.AudioSource.MIC,
                    16000, AudioFormat.CHANNEL_CONFIGURATION_MONO, AudioFormat.ENCODING_PCM_16BIT, bufferSize);
        }


    }

    public static MicrophoneInputStream getInstance() {

        if (is == null) {
            synchronized (MicrophoneInputStream.class) {
                if (is == null) {
                    is = new MicrophoneInputStream();
                }
            }
        }
        return is;
    }

    public void start() {
        Log.i(TAG, " MicrophoneInputStream start recoding");
        if (audioRecord == null
                || audioRecord.getState() != AudioRecord.STATE_INITIALIZED) {
            throw new IllegalStateException(
                    "startRecording() called on an uninitialized AudioRecord.");
        }
        audioRecord.startRecording();
    }

    @Override
    public int read() throws IOException {
        throw new UnsupportedOperationException();
    }

    @Override
    public int read(@NonNull byte[] b, int off, int len) throws IOException {
        if (!isStarted) {
            start(); // 建议在CALLBACK_EVENT_ASR_READY事件中调用。
            isStarted = true;
        }
        int count = audioRecord.read(b, off, len);
        // Log.i(TAG, " MicrophoneInputStream read count:" + count);
        return count;
    }

    @Override
    public void close() throws IOException {
        Log.i(TAG, " MicrophoneInputStream close");
        if (audioRecord != null) {
            audioRecord.stop();
            audioRecord.release();
            isStarted = false;
        }
    }
}
package com.dzx.Recognization.online;

import android.app.Activity;
import android.content.SharedPreferences;



import com.baidu.speech.asr.SpeechConstant;

import java.util.Arrays;
import java.util.Map;




public class OnlineRecogParams extends CommonRecogParams {


    private static final String TAG = "OnlineRecogParams";

    public OnlineRecogParams(Activity context) {
        super(context);

        stringParams.addAll(Arrays.asList(
                "_language", // 用于生成PID参数
                "_model" // 用于生成PID参数
        ));

        intParams.addAll(Arrays.asList(SpeechConstant.PROP));

        boolParams.addAll(Arrays.asList(SpeechConstant.DISABLE_PUNCTUATION));

    }


    public Map<String, Object> fetch(SharedPreferences sp) {
        Map<String, Object> map = super.fetch(sp);
        PidBuilder builder = new PidBuilder();
        map = builder.addPidInfo(map); // 生成PID， PID 网络在线有效
        return map;

    }

}
package com.dzx.Recognization.online;

import com.baidu.speech.asr.SpeechConstant;

import java.util.HashMap;
import java.util.Map;

/**
 * 根据语言， 搜索模型或输入法模型和是否需要语义功能 生成对应PID

 */

public class PidBuilder {

    public static final String PUDONGHUA = "cmn-Hans-CN";

    public static final String ENGLISH = "en-GB";

    public static final String SICHUAN = "sichuan-Hans-CN";

    public static final String YUEYU = "yue-Hans-CN";

    public static final String SEARCH = "search";

    public static final String INPUT = "input";

    public static final String FAR = "far";

    private static Map<String, Integer> map;

    private String language = PUDONGHUA;

    private String model = SEARCH;

    private boolean supportNlu = false;

    private boolean emptyParams = false;

    static {
        map = new HashMap<String, Integer>(16);
        createPid(1536, PUDONGHUA, SEARCH, false);
        createPid(15361, PUDONGHUA, SEARCH, true);
        createPid(1537, PUDONGHUA, INPUT, false);
        createPid(1736, ENGLISH, SEARCH, false);
        createPid(1737, ENGLISH, INPUT, false);
        createPid(1636, YUEYU, SEARCH, false);
        createPid(1637, YUEYU, INPUT, false);
        createPid(1836, SICHUAN, SEARCH, false);
        createPid(1837, SICHUAN, INPUT, false);
        createPid(1936, PUDONGHUA, FAR, false);
        createPid(1936, PUDONGHUA, FAR, true);
    }

    public static PidBuilder create() {
        return new PidBuilder();
    }

    /**
     * 从 params中 根据_language _model和_nlu_online这三个临时参数，输出PID并加入到params中。
     *
     * @param params
     * @return
     */
    public Map<String, Object> addPidInfo(Map<String, Object> params) {
        if (params != null) {
            Object lang = params.get("_language");
            params.remove("_language");
            Object onlineModel = params.get("_model");
            params.remove("_model");
            Object nlu = params.get("_nlu_online");
            params.remove("_nlu_online");
            if (lang == null && onlineModel == null && nlu == null) {
                emptyParams = true;
            } else {
                if (lang != null) {
                    language(String.valueOf(lang));
                }
                if (onlineModel != null) {
                    model(String.valueOf(onlineModel));
                }
                if (nlu != null) {
                    supportNlu(Boolean.valueOf(nlu.toString()));
                }
            }
            int pid = toPId();
            if (pid > 0) {
                params.put(SpeechConstant.PID, pid);
            }
        }

        return params;
    }

    /**
     * 返回负数的话，即没有生成PID成功，请不要设置
     *
     * @return -1 没对应pid
     * -2  用于使用 PidBuilder(params), params为空或者没有相关选项用于确定PID
     */
    public int toPId() {
        if (emptyParams) { // 用于 PidBuilder(Map<String,Object> params)
            return -2;
        }

        String key = language + "_" + model + "_" + (supportNlu ? 1 : 0);
        Integer result = map.get(key);
        if (result == null) {
            return -1;
        } else {
            return result;
        }
    }

    /**
     * 语言
     *
     * @param language
     * @return
     */
    public PidBuilder language(String language) {
        this.language = language;
        emptyParams = false;
        return this;
    }

    /**
     * 输入法模型或者搜索模型
     *
     * @param model
     * @return
     */
    public PidBuilder model(String model) {
        this.model = model;
        emptyParams = false;
        return this;
    }

    /**
     * 是否开启语义识别
     *
     * @param supportNlu
     * @return
     */
    public PidBuilder supportNlu(boolean supportNlu) {
        this.supportNlu = supportNlu;
        emptyParams = false;
        return this;
    }

    private static void createPid(int pid, String lang, String onlineModel, boolean nlu) {
        String key = lang + "_" + onlineModel + "_" + (nlu ? 1 : 0);
        map.put(key, pid);
    }
}
package com.dzx.Recognization.online;

import android.util.Log;

import com.dzx.control.ErrorTranslation;
import com.dzx.util.Logger;
import com.baidu.speech.EventListener;
import com.baidu.speech.asr.SpeechConstant;

import org.json.JSONException;
import org.json.JSONObject;




public class RecogEventAdapter implements EventListener {

    private static final String TAG = "RecogEventAdapter";


    private IRecogListener listener;

    public RecogEventAdapter(IRecogListener listener) {
        this.listener = listener;
    }

    protected String currentJson;

    @Override
    public void onEvent(String name, String params, byte[] data, int offset, int length) {
        currentJson = params;
        String logMessage = "name:" + name + "; params:" + params;

        // logcat 中 搜索RecogEventAdapter，即可以看见下面一行的日志
        Log.i(TAG, logMessage);
        if (false) { // 可以调试，不需要后续逻辑
            return;
        }
        if (name.equals(SpeechConstant.CALLBACK_EVENT_ASR_LOADED)) {
            listener.onOfflineLoaded();
        } else if (name.equals(SpeechConstant.CALLBACK_EVENT_ASR_UNLOADED)) {
            listener.onOfflineUnLoaded();
        } else if (name.equals(SpeechConstant.CALLBACK_EVENT_ASR_READY)) {
            // 引擎准备就绪，可以开始说话
            listener.onAsrReady();

        } else if (name.equals(SpeechConstant.CALLBACK_EVENT_ASR_BEGIN)) {
            // 检测到用户的已经开始说话
            listener.onAsrBegin();

        } else if (name.equals(SpeechConstant.CALLBACK_EVENT_ASR_END)) {
            // 检测到用户的已经停止说话
            listener.onAsrEnd();

        } else if (name.equals(SpeechConstant.CALLBACK_EVENT_ASR_PARTIAL)) {
            RecogResult recogResult = RecogResult.parseJson(params);
            // 临时识别结果, 长语音模式需要从此消息中取出结果
            String[] results = recogResult.getResultsRecognition();
            if (recogResult.isFinalResult()) {
                listener.onAsrFinalResult(results, recogResult);
            } else if (recogResult.isPartialResult()) {
                listener.onAsrPartialResult(results, recogResult);
            } else if (recogResult.isNluResult()) {
                listener.onAsrOnlineNluResult(new String(data, offset, length));
            }

        } else if (name.equals(SpeechConstant.CALLBACK_EVENT_ASR_FINISH)) {
            // 识别结束， 最终识别结果或可能的错误
            RecogResult recogResult = RecogResult.parseJson(params);
            if (recogResult.hasError()) {
                int errorCode = recogResult.getError();
                int subErrorCode = recogResult.getSubError();
                Logger.error(TAG, "asr error:" + params);
                listener.onAsrFinishError(errorCode, subErrorCode, ErrorTranslation.recogError(errorCode), recogResult.getDesc(), recogResult);
            } else {
                listener.onAsrFinish(recogResult);
            }

        } else if (name.equals(SpeechConstant.CALLBACK_EVENT_ASR_LONG_SPEECH)) { //长语音
            listener.onAsrLongFinish();// 长语音
        } else if (name.equals(SpeechConstant.CALLBACK_EVENT_ASR_EXIT)) {
            listener.onAsrExit();
        } else if (name.equals(SpeechConstant.CALLBACK_EVENT_ASR_VOLUME)) {
            // Logger.info(TAG, "asr volume event:" + params);
            Volume vol = parseVolumeJson(params);
            listener.onAsrVolume(vol.volumePercent, vol.volume);
        } else if (name.equals(SpeechConstant.CALLBACK_EVENT_ASR_AUDIO)) {
            if (data.length != length) {
                Logger.error(TAG, "internal error: asr.audio callback data length is not equal to length param");
            }
            listener.onAsrAudio(data, offset, length);
        }
    }


    private Volume parseVolumeJson(String jsonStr) {
        Volume vol = new Volume();
        vol.origalJson = jsonStr;
        try {
            JSONObject json = new JSONObject(jsonStr);
            vol.volumePercent = json.getInt("volume-percent");
            vol.volume = json.getInt("volume");
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return vol;
    }

    private class Volume {
        private int volumePercent = -1;
        private int volume = -1;
        private String origalJson;
    }

}
package com.dzx.Recognization.online;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/**

 */
public class RecogResult {
    private static final int ERROR_NONE = 0;

    private String origalJson;
    private String[] resultsRecognition;
    private String origalResult;
    private String sn; // 日志id， 请求有问题请提问带上sn
    private String desc;
    private String resultType;
    private int error = -1;
    private int subError = -1;

    public static RecogResult parseJson(String jsonStr) {
        RecogResult result = new RecogResult();
        result.setOrigalJson(jsonStr);
        try {
            JSONObject json = new JSONObject(jsonStr);
            int error = json.optInt("error");
            int subError = json.optInt("sub_error");
            result.setError(error);
            result.setDesc(json.optString("desc"));
            result.setResultType(json.optString("result_type"));
            if (error == ERROR_NONE) {
                result.setOrigalResult(json.getString("origin_result"));
                JSONArray arr = json.optJSONArray("results_recognition");
                if (arr != null) {
                    int size = arr.length();
                    String[] recogs = new String[size];
                    for (int i = 0; i < size; i++) {
                        recogs[i] = arr.getString(i);
                    }
                    result.setResultsRecognition(recogs);
                }


            }
        } catch (JSONException e) {
            e.printStackTrace();
        }

        return result;
    }

    public boolean hasError() {
        return error != ERROR_NONE;
    }

    public boolean isFinalResult() {
        return "final_result".equals(resultType);
    }


    public boolean isPartialResult() {
        return "partial_result".equals(resultType);
    }

    public boolean isNluResult() {
        return "nlu_result".equals(resultType);
    }

    public String getOrigalJson() {
        return origalJson;
    }

    public void setOrigalJson(String origalJson) {
        this.origalJson = origalJson;
    }

    public String[] getResultsRecognition() {
        return resultsRecognition;
    }

    public void setResultsRecognition(String[] resultsRecognition) {
        this.resultsRecognition = resultsRecognition;
    }

    public String getSn() {
        return sn;
    }

    public void setSn(String sn) {
        this.sn = sn;
    }

    public int getError() {
        return error;
    }

    public void setError(int error) {
        this.error = error;
    }

    public String getDesc() {
        return desc;
    }

    public void setDesc(String desc) {
        this.desc = desc;
    }

    public String getOrigalResult() {
        return origalResult;
    }

    public void setOrigalResult(String origalResult) {
        this.origalResult = origalResult;
    }

    public String getResultType() {
        return resultType;
    }

    public void setResultType(String resultType) {
        this.resultType = resultType;
    }

    public int getSubError() {
        return subError;
    }

    public void setSubError(int subError) {
        this.subError = subError;
    }
}
package com.dzx.Recognization.online;

/**

 */

import android.util.Log;

public class StatusRecogListener implements IRecogListener, IStatus {

    private static final String TAG = "StatusRecogListener";

    /**
     * 识别的引擎当前的状态
     */
    protected int status = STATUS_NONE;

    @Override
    public void onAsrReady() {
        status = STATUS_READY;
    }

    @Override
    public void onAsrBegin() {
        status = STATUS_SPEAKING;
    }

    @Override
    public void onAsrEnd() {
        status = STATUS_RECOGNITION;
    }

    @Override
    public void onAsrPartialResult(String[] results, RecogResult recogResult) {


    }

    @Override
    public void onAsrFinalResult(String[] results, RecogResult recogResult) {
        status = STATUS_FINISHED;
    }

    @Override
    public void onAsrFinish(RecogResult recogResult) {
        status = STATUS_FINISHED;
    }


    @Override
    public void onAsrFinishError(int errorCode, int subErrorCode, String errorMessage, String descMessage,
                                 RecogResult recogResult) {
        status = STATUS_FINISHED;
    }

    /**
     * 长语音识别结束
     */
    @Override
    public void onAsrLongFinish() {
        status = STATUS_FINISHED;
    }

    @Override
    public void onAsrVolume(int volumePercent, int volume) {
        Log.i(TAG, "音量百分比" + volumePercent + " ; 音量" + volume);
    }

    @Override
    public void onAsrAudio(byte[] data, int offset, int length) {
        if (offset != 0 || data.length != length) {
            byte[] actualData = new byte[length];
            System.arraycopy(data, 0, actualData, 0, length);
            data = actualData;
        }

        Log.i(TAG, "音频数据回调, length:" + data.length);
    }

    @Override
    public void onAsrExit() {
        status = STATUS_NONE;
    }

    @Override
    public void onAsrOnlineNluResult(String nluResult) {
        status = STATUS_FINISHED;
    }

    @Override
    public void onOfflineLoaded() {

    }

    @Override
    public void onOfflineUnLoaded() {

    }


}
package com.dzx;


import android.content.Intent;
import android.os.Bundle;
import android.support.design.widget.FloatingActionButton;
import android.support.design.widget.Snackbar;

import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentTransaction;

import android.support.v4.view.ViewPager;
import android.view.View;
import android.support.design.widget.NavigationView;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.view.Menu;
import android.view.MenuItem;

import com.ashokvarma.bottomnavigation.BottomNavigationBar;
import com.ashokvarma.bottomnavigation.BottomNavigationItem;
import com.dzx.Setting.Setting_use;
import com.dzx.fragment.FragmentCommon;
import com.dzx.fragment.FragmentFour;
import com.dzx.fragment.FragmentOne;
import com.dzx.fragment.FragmentThree;
import com.dzx.fragment.FragmentTwo;
import com.dzx.Adapter.SectionsPagerAdapter;
import java.util.ArrayList;
import java.util.List;


public class MainActivity extends AppCompatActivity
        implements NavigationView.OnNavigationItemSelectedListener,
        BottomNavigationBar.OnTabSelectedListener,
        ViewPager.OnPageChangeListener{

    //之前出现的问题是因为没有实现全部的接口的抽象方法，我加上reselected和unselected之后就不报错了。
    private ViewPager viewPager;
    private BottomNavigationBar mBottomNavigationBar;
    private List<Fragment> fragments;
    private MenuItem menuItem;
  //  private FragmentOne mFragmentOne;
   // private FragmentTwo mFragmentTwo;
  //  private FragmentThree mFragmentThree;
  //  private FragmentFour mFragmentFour;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        initView();

        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        //FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);
        /*fab.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Snackbar.make(view, "Replace with your own action", Snackbar.LENGTH_LONG)
                        .setAction("Action", null).show();
            }

        });*/

        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(
                this, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);
        drawer.addDrawerListener(toggle);
        toggle.syncState();

        NavigationView navigationView = (NavigationView) findViewById(R.id.nav_view);
        navigationView.setNavigationItemSelectedListener(this);

    }



    @Override
    public void onBackPressed() {
        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        if (drawer.isDrawerOpen(GravityCompat.START)) {
            drawer.closeDrawer(GravityCompat.START);
        } else {
            super.onBackPressed();
        }
    }



    private void initView(){
        initBottomNavigationBar();
        initViewPager();
    }

    private void initBottomNavigationBar(){
        mBottomNavigationBar = (BottomNavigationBar) findViewById(R.id.bottom_navigation_bar);
        mBottomNavigationBar.setTabSelectedListener(this);
        mBottomNavigationBar.clearAll();
        mBottomNavigationBar.setMode(BottomNavigationBar.MODE_FIXED);
        mBottomNavigationBar.setBackgroundStyle(BottomNavigationBar.BACKGROUND_STYLE_STATIC);
//        mBottomNavigationBar.setBackgroundStyle(BottomNavigationBar.BACKGROUND_STYLE_RIPPLE);
        mBottomNavigationBar.setBarBackgroundColor(R.color.red);//set background color for navigation bar
        mBottomNavigationBar.setInActiveColor(R.color.gray);//unSelected icon color
        mBottomNavigationBar.addItem(new BottomNavigationItem(R.drawable.ic_tab3, "记录").setActiveColorResource(R.color.white))
                .addItem(new BottomNavigationItem(R.drawable.ic_tab2, "声音").setActiveColorResource(R.color.white))
                .addItem(new BottomNavigationItem(R.drawable.ic_tab1, "天气").setActiveColorResource(R.color.white))
                .addItem(new BottomNavigationItem(R.drawable.icon_four, "没想好").setActiveColorResource(R.color.white))
                //.setFirstSelectedPosition(0)
                .initialise();


        //setDefaultFragment();
    }


    private void initViewPager(){
        viewPager = (ViewPager) findViewById(R.id.viewPager);
        viewPager.setOffscreenPageLimit(3);
        fragments = new ArrayList<Fragment>();
        fragments.add(new FragmentOne());
        fragments.add(new Fragment());
        fragments.add(new FragmentThree());
        fragments.add(new FragmentFour());

        viewPager.setAdapter(new SectionsPagerAdapter(getSupportFragmentManager(), fragments));
        viewPager.addOnPageChangeListener(this);
        viewPager.setCurrentItem(0);

    }

    /*private void setDefaultFragment() {
        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
        mFragmentOne = FragmentOne.newInstance("First Fragment");
        transaction.replace(R.id.bottom_nav_content, mFragmentOne).commit();
        //第一个参数是将fragment动态添加到那个id布局里，第二个参数是添加哪个fragment
        //还有add方法，remove方法。
        //transaction.commit()是提交事务。
    }*/
    //@Override
    public void onTabSelected(int position) {
       /* FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
        switch (position) {
            case 0:
                if (mFragmentOne == null) {
                    mFragmentOne = FragmentOne.newInstance("First Fragment");
                }
                transaction.replace(R.id.bottom_nav_content, mFragmentOne);
                break;
            case 1:
                if (mFragmentTwo == null) {
                    mFragmentTwo = FragmentTwo.newInstance("Second Fragment");
                }
                transaction.replace(R.id.bottom_nav_content, mFragmentTwo);
                break;
            case 2:
                if (mFragmentThree == null) {
                    mFragmentThree = FragmentThree.newInstance("Third Fragment");
                }
                transaction.replace(R.id.bottom_nav_content, mFragmentThree);
                break;
            case 3:
                if (mFragmentFour == null) {
                    mFragmentFour = FragmentFour.newInstance("Forth Fragment");
                }
                transaction.replace(R.id.bottom_nav_content, mFragmentFour);
                break;
            default:
                if (mFragmentOne == null) {
                    mFragmentOne = FragmentOne.newInstance("First Fragment");
                }
                transaction.replace(R.id.bottom_nav_content, mFragmentOne);
                break;
        }
        transaction.commit();*/
        viewPager.setCurrentItem(position);
    }
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.main, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        if (id == R.id.action_settings) {
            return true;
        }

        return super.onOptionsItemSelected(item);
    }

    @SuppressWarnings("StatementWithEmptyBody")
    @Override
    public boolean onNavigationItemSelected(MenuItem menuItem) {
        // Handle navigation view item clicks here.
        int id = menuItem.getItemId();

        if (id == R.id.nav_camera) {
            // Handle the camera action
        } else if (id == R.id.nav_gallery) {

        } else if (id == R.id.nav_slideshow) {


        } else if (id == R.id.nav_manage) {
            Intent intent=new Intent(MainActivity.this, Setting_use.class);
            startActivity(intent);



        } else if (id == R.id.nav_share) {

        } else if (id == R.id.nav_send) {

        }

        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        drawer.closeDrawer(GravityCompat.START);
        return true;
    }

    @Override

    public void onTabReselected(int position) {

    }
    @Override

    public void onTabUnselected(int position) {

    }
    @Override

    public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {

    }
    @Override
    public void onPageSelected(int position) {
        mBottomNavigationBar.selectTab(position);
    }
    @Override

    public void onPageScrollStateChanged(int state) {

    }

}
